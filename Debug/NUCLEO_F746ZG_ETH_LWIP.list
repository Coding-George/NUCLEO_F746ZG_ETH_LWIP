
NUCLEO_F746ZG_ETH_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d8  080177b8  080177b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af90  0801af90  0001c1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801af90  0801af90  0001bf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af98  0801af98  0001c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af98  0801af98  0001bf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801af9c  0801af9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801afa0  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801b02c  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801b0cc  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c684  200001cc  0801b16c  0001c1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000c850  0801b16c  0001c850  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000368a8  00000000  00000000  0001c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008248  00000000  00000000  00052aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002718  00000000  00000000  0005acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f0c  00000000  00000000  0005d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038117  00000000  00000000  0005f314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003e24b  00000000  00000000  0009742b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116a1a  00000000  00000000  000d5676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ec090  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000aa74  00000000  00000000  001ec0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  001f6b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080177a0 	.word	0x080177a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	080177a0 	.word	0x080177a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetIdleTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetIdleTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200001e8 	.word	0x200001e8
 8000600:	20000290 	.word	0x20000290

08000604 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
}
 8000612:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000614:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <SCB_EnableICache+0x48>)
 8000616:	2200      	movs	r2, #0
 8000618:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800061c:	f3bf 8f4f 	dsb	sy
}
 8000620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
}
 8000626:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <SCB_EnableICache+0x48>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a07      	ldr	r2, [pc, #28]	@ (800064c <SCB_EnableICache+0x48>)
 800062e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000632:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000634:	f3bf 8f4f 	dsb	sy
}
 8000638:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063a:	f3bf 8f6f 	isb	sy
}
 800063e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SCB_EnableDCache+0x84>)
 8000658:	2200      	movs	r2, #0
 800065a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800065e:	f3bf 8f4f 	dsb	sy
}
 8000662:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <SCB_EnableDCache+0x84>)
 8000666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800066a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	0b5b      	lsrs	r3, r3, #13
 8000670:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000674:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	08db      	lsrs	r3, r3, #3
 800067a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800067e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	015a      	lsls	r2, r3, #5
 8000684:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000688:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800068e:	4911      	ldr	r1, [pc, #68]	@ (80006d4 <SCB_EnableDCache+0x84>)
 8000690:	4313      	orrs	r3, r2
 8000692:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1e5a      	subs	r2, r3, #1
 800069a:	60ba      	str	r2, [r7, #8]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1ef      	bne.n	8000680 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	60fa      	str	r2, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1e5      	bne.n	8000676 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006aa:	f3bf 8f4f 	dsb	sy
}
 80006ae:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <SCB_EnableDCache+0x84>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <SCB_EnableDCache+0x84>)
 80006b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006bc:	f3bf 8f4f 	dsb	sy
}
 80006c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c2:	f3bf 8f6f 	isb	sy
}
 80006c6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006de:	f7ff ff91 	bl	8000604 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006e2:	f7ff ffb5 	bl	8000650 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f001 f8bc 	bl	8001862 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f81f 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f8f5 	bl	80008dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80006f2:	f000 f883 	bl	80007fc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006f6:	f000 f8c1 	bl	800087c <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80006fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <main+0x4c>)
 80006fc:	1d3c      	adds	r4, r7, #4
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f005 ff14 	bl	800653e <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a03      	ldr	r2, [pc, #12]	@ (8000728 <main+0x50>)
 800071a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800071c:	f005 fef8 	bl	8006510 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <main+0x48>
 8000724:	080177c4 	.word	0x080177c4
 8000728:	2000056c 	.word	0x2000056c

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f016 f937 	bl	80169ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f002 ff36 	bl	80035c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <SystemClock_Config+0xc8>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a26      	ldr	r2, [pc, #152]	@ (80007f4 <SystemClock_Config+0xc8>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <SystemClock_Config+0xcc>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <SystemClock_Config+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000788:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800079c:	23b4      	movs	r3, #180	@ 0xb4
 800079e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007a4:	2303      	movs	r3, #3
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 ff17 	bl	80035e0 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007b8:	f000 fac2 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2105      	movs	r1, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 f9a4 	bl	8003b28 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007e6:	f000 faab 	bl	8000d40 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	@ 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000838:	f002 fd8e 	bl	8003358 <HAL_I2C_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000842:	f000 fa7d 	bl	8000d40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x74>)
 800084a:	f002 fe21 	bl	8003490 <HAL_I2CEx_ConfigAnalogFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000854:	f000 fa74 	bl	8000d40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2C1_Init+0x74>)
 800085c:	f002 fe63 	bl	8003526 <HAL_I2CEx_ConfigDigitalFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 fa6b 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000490 	.word	0x20000490
 8000874:	40005400 	.word	0x40005400
 8000878:	c0000e12 	.word	0xc0000e12

0800087c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	@ (80008d8 <MX_USART3_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008c0:	f004 fa4e 	bl	8004d60 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 fa39 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200004e4 	.word	0x200004e4
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <MX_GPIO_Init+0x170>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a55      	ldr	r2, [pc, #340]	@ (8000a4c <MX_GPIO_Init+0x170>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <MX_GPIO_Init+0x170>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a4f      	ldr	r2, [pc, #316]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b4a      	ldr	r3, [pc, #296]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a49      	ldr	r2, [pc, #292]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b44      	ldr	r3, [pc, #272]	@ (8000a4c <MX_GPIO_Init+0x170>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a43      	ldr	r2, [pc, #268]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a3d      	ldr	r2, [pc, #244]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b38      	ldr	r3, [pc, #224]	@ (8000a4c <MX_GPIO_Init+0x170>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a37      	ldr	r2, [pc, #220]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <MX_GPIO_Init+0x170>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000988:	4831      	ldr	r0, [pc, #196]	@ (8000a50 <MX_GPIO_Init+0x174>)
 800098a:	f002 fccb 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	@ 0x40
 8000992:	4830      	ldr	r0, [pc, #192]	@ (8000a54 <MX_GPIO_Init+0x178>)
 8000994:	f002 fcc6 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	482a      	ldr	r0, [pc, #168]	@ (8000a58 <MX_GPIO_Init+0x17c>)
 80009b0:	f002 fb0c 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009b4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4820      	ldr	r0, [pc, #128]	@ (8000a50 <MX_GPIO_Init+0x174>)
 80009ce:	f002 fafd 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d2:	2340      	movs	r3, #64	@ 0x40
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	481a      	ldr	r0, [pc, #104]	@ (8000a54 <MX_GPIO_Init+0x178>)
 80009ea:	f002 faef 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ee:	2380      	movs	r3, #128	@ 0x80
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	@ (8000a54 <MX_GPIO_Init+0x178>)
 8000a02:	f002 fae3 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <MX_GPIO_Init+0x180>)
 8000a1c:	f002 fad6 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a20:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a32:	230a      	movs	r3, #10
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <MX_GPIO_Init+0x180>)
 8000a3e:	f002 fac5 	bl	8002fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3730      	adds	r7, #48	@ 0x30
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40021800 	.word	0x40021800
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <putchar>:

/* USER CODE BEGIN 4 */
int putchar(int ch)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,1);
 8000a68:	1d39      	adds	r1, r7, #4
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <putchar+0x20>)
 8000a70:	f004 f9c4 	bl	8004dfc <HAL_UART_Transmit>
    return ch;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200004e4 	.word	0x200004e4

08000a84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8000a8a:	af02      	add	r7, sp, #8
 8000a8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000a90:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000a94:	6018      	str	r0, [r3, #0]
    /* init code for LWIP */
    MX_LWIP_Init();
 8000a96:	f004 fe69 	bl	800576c <MX_LWIP_Init>
    err_t status;
    struct netconn *conn; // pointer to hold connection data

    char buffer[256];  // Create a buffer to store formatted strings

    while (!netif_is_up(netif_default)) {
 8000a9a:	e011      	b.n	8000ac0 <StartDefaultTask+0x3c>
        snprintf(buffer, sizeof(buffer), "Waiting for network...\r\n");
 8000a9c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000aa0:	4a8e      	ldr	r2, [pc, #568]	@ (8000cdc <StartDefaultTask+0x258>)
 8000aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fb26 	bl	80010f8 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000aac:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	488b      	ldr	r0, [pc, #556]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000ab4:	f000 fb0c 	bl	80010d0 <printf>
        osDelay(500);
 8000ab8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000abc:	f005 fd97 	bl	80065ee <osDelay>
    while (!netif_is_up(netif_default)) {
 8000ac0:	4b88      	ldr	r3, [pc, #544]	@ (8000ce4 <StartDefaultTask+0x260>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0e5      	beq.n	8000a9c <StartDefaultTask+0x18>
    }

    snprintf(buffer, sizeof(buffer), "Network is up!\r\n");
 8000ad0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ad4:	4a84      	ldr	r2, [pc, #528]	@ (8000ce8 <StartDefaultTask+0x264>)
 8000ad6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fb0c 	bl	80010f8 <snprintf>
    printf("%s", buffer);  // Output the formatted string
 8000ae0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	487e      	ldr	r0, [pc, #504]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000ae8:	f000 faf2 	bl	80010d0 <printf>

    conn = netconn_new(NETCONN_TCP);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2010      	movs	r0, #16
 8000af2:	f008 fe61 	bl	80097b8 <netconn_new_with_proto_and_callback>
 8000af6:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
    if (conn == NULL) {
 8000afa:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10e      	bne.n	8000b20 <StartDefaultTask+0x9c>
        snprintf(buffer, sizeof(buffer), "Failed to create connection.\r\n");
 8000b02:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b06:	4a79      	ldr	r2, [pc, #484]	@ (8000cec <StartDefaultTask+0x268>)
 8000b08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 faf3 	bl	80010f8 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000b12:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b16:	4619      	mov	r1, r3
 8000b18:	4871      	ldr	r0, [pc, #452]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000b1a:	f000 fad9 	bl	80010d0 <printf>
        return;
 8000b1e:	e0d8      	b.n	8000cd2 <StartDefaultTask+0x24e>
    }

    // Set server IP address (192.168.1.127)
    IP4_ADDR(&server_ip, 192, 168, 1, 127);
 8000b20:	4b73      	ldr	r3, [pc, #460]	@ (8000cf0 <StartDefaultTask+0x26c>)
 8000b22:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    // Connect to the TCP server on port 8000
    snprintf(buffer, sizeof(buffer), "Connecting to server...\r\n");
 8000b26:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b2a:	4a72      	ldr	r2, [pc, #456]	@ (8000cf4 <StartDefaultTask+0x270>)
 8000b2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fae1 	bl	80010f8 <snprintf>
    printf("%s", buffer);  // Output the formatted string
 8000b36:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4868      	ldr	r0, [pc, #416]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000b3e:	f000 fac7 	bl	80010d0 <printf>
    status = netconn_connect(conn, &server_ip, 8000);
 8000b42:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000b46:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000b50:	f008 feec 	bl	800992c <netconn_connect>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217

    if (status == ERR_OK) {
 8000b5a:	f997 3217 	ldrsb.w	r3, [r7, #535]	@ 0x217
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 80a2 	bne.w	8000ca8 <StartDefaultTask+0x224>
        snprintf(buffer, sizeof(buffer), "Connected to server!\r\n");
 8000b64:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b68:	4a63      	ldr	r2, [pc, #396]	@ (8000cf8 <StartDefaultTask+0x274>)
 8000b6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fac2 	bl	80010f8 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000b74:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4859      	ldr	r0, [pc, #356]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000b7c:	f000 faa8 	bl	80010d0 <printf>

        for (int i = 0; i < 5; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000b86:	e074      	b.n	8000c72 <StartDefaultTask+0x1ee>
            snprintf(buffer, sizeof(buffer), "Sending JSON data to server...\r\n");
 8000b88:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b8c:	4a5b      	ldr	r2, [pc, #364]	@ (8000cfc <StartDefaultTask+0x278>)
 8000b8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fab0 	bl	80010f8 <snprintf>
            printf("%s", buffer);  // Output the formatted string
 8000b98:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4850      	ldr	r0, [pc, #320]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000ba0:	f000 fa96 	bl	80010d0 <printf>

            // Create JSON-formatted string
            char json_buffer[256];
            int len = snprintf(json_buffer, sizeof(json_buffer),
 8000ba4:	f107 000c 	add.w	r0, r7, #12
 8000ba8:	4b55      	ldr	r3, [pc, #340]	@ (8000d00 <StartDefaultTask+0x27c>)
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	4a55      	ldr	r2, [pc, #340]	@ (8000d04 <StartDefaultTask+0x280>)
 8000bb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb4:	f000 faa0 	bl	80010f8 <snprintf>
 8000bb8:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
                               "{ \"Node ID\": %d, \"Door Status\": %s }\r\n", 1, "true");

            if (len < 0 || len >= sizeof(json_buffer)) {
 8000bbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db03      	blt.n	8000bcc <StartDefaultTask+0x148>
 8000bc4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000bc8:	2bff      	cmp	r3, #255	@ 0xff
 8000bca:	d912      	bls.n	8000bf2 <StartDefaultTask+0x16e>
                snprintf(buffer, sizeof(buffer), "Error: snprintf buffer overflow!\r\n");
 8000bcc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bd0:	4a4d      	ldr	r2, [pc, #308]	@ (8000d08 <StartDefaultTask+0x284>)
 8000bd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa8e 	bl	80010f8 <snprintf>
                printf("%s", buffer);  // Output the formatted string
 8000bdc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000be0:	4619      	mov	r1, r3
 8000be2:	483f      	ldr	r0, [pc, #252]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000be4:	f000 fa74 	bl	80010d0 <printf>
                netconn_delete(conn);
 8000be8:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000bec:	f008 fe82 	bl	80098f4 <netconn_delete>
                return;
 8000bf0:	e06f      	b.n	8000cd2 <StartDefaultTask+0x24e>
            }

            // Send JSON data
            status = netconn_write(conn, json_buffer, strlen(json_buffer), NETCONN_NOCOPY);
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fb0a 	bl	8000210 <strlen>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f107 010c 	add.w	r1, r7, #12
 8000c02:	2300      	movs	r3, #0
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000c0c:	f008 fec6 	bl	800999c <netconn_write_partly>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217

            if (status != ERR_OK) {
 8000c16:	f997 3217 	ldrsb.w	r3, [r7, #535]	@ 0x217
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d012      	beq.n	8000c44 <StartDefaultTask+0x1c0>
                snprintf(buffer, sizeof(buffer), "Failed to send data!\r\n");
 8000c1e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c22:	4a3a      	ldr	r2, [pc, #232]	@ (8000d0c <StartDefaultTask+0x288>)
 8000c24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fa65 	bl	80010f8 <snprintf>
                printf("%s", buffer);  // Output the formatted string
 8000c2e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c32:	4619      	mov	r1, r3
 8000c34:	482a      	ldr	r0, [pc, #168]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000c36:	f000 fa4b 	bl	80010d0 <printf>
                netconn_delete(conn);
 8000c3a:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000c3e:	f008 fe59 	bl	80098f4 <netconn_delete>
                return;
 8000c42:	e046      	b.n	8000cd2 <StartDefaultTask+0x24e>
            } else {
                snprintf(buffer, sizeof(buffer), "Data sent successfully!\r\n");
 8000c44:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c48:	4a31      	ldr	r2, [pc, #196]	@ (8000d10 <StartDefaultTask+0x28c>)
 8000c4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fa52 	bl	80010f8 <snprintf>
                printf("%s", buffer);  // Output the formatted string
 8000c54:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4821      	ldr	r0, [pc, #132]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000c5c:	f000 fa38 	bl	80010d0 <printf>
            }

            osDelay(1000); // Wait for 1 second
 8000c60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c64:	f005 fcc3 	bl	80065ee <osDelay>
        for (int i = 0; i < 5; i++) {
 8000c68:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000c72:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	dd86      	ble.n	8000b88 <StartDefaultTask+0x104>
        }

        // Close and delete connection
        netconn_close(conn);
 8000c7a:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000c7e:	f008 ff8f 	bl	8009ba0 <netconn_close>
        netconn_delete(conn);
 8000c82:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000c86:	f008 fe35 	bl	80098f4 <netconn_delete>
        snprintf(buffer, sizeof(buffer), "Connection closed.\r\n");
 8000c8a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c8e:	4a21      	ldr	r2, [pc, #132]	@ (8000d14 <StartDefaultTask+0x290>)
 8000c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fa2f 	bl	80010f8 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000c9a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480f      	ldr	r0, [pc, #60]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000ca2:	f000 fa15 	bl	80010d0 <printf>
 8000ca6:	e012      	b.n	8000cce <StartDefaultTask+0x24a>
    } else {
        snprintf(buffer, sizeof(buffer), "Could not connect to server.\r\n");
 8000ca8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000cac:	4a1a      	ldr	r2, [pc, #104]	@ (8000d18 <StartDefaultTask+0x294>)
 8000cae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fa20 	bl	80010f8 <snprintf>
        printf("%s", buffer);  // Output the formatted string
 8000cb8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <StartDefaultTask+0x25c>)
 8000cc0:	f000 fa06 	bl	80010d0 <printf>
        netconn_delete(conn);
 8000cc4:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8000cc8:	f008 fe14 	bl	80098f4 <netconn_delete>
    }

    for(;;) {
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	e7fd      	b.n	8000cce <StartDefaultTask+0x24a>
    }
}
 8000cd2:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	080177e0 	.word	0x080177e0
 8000ce0:	080177fc 	.word	0x080177fc
 8000ce4:	2000c59c 	.word	0x2000c59c
 8000ce8:	08017800 	.word	0x08017800
 8000cec:	08017814 	.word	0x08017814
 8000cf0:	7f01a8c0 	.word	0x7f01a8c0
 8000cf4:	08017834 	.word	0x08017834
 8000cf8:	08017850 	.word	0x08017850
 8000cfc:	08017868 	.word	0x08017868
 8000d00:	080178b4 	.word	0x080178b4
 8000d04:	0801788c 	.word	0x0801788c
 8000d08:	080178bc 	.word	0x080178bc
 8000d0c:	080178e0 	.word	0x080178e0
 8000d10:	080178f8 	.word	0x080178f8
 8000d14:	08017914 	.word	0x08017914
 8000d18:	0801792c 	.word	0x0801792c

08000d1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2e:	f000 fda5 	bl	800187c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40001000 	.word	0x40001000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <printchar>:
*/

#include <stdarg.h>

static void printchar(char **str, int c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);

	if (str) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00a      	beq.n	8000d72 <printchar+0x26>
		**str = c;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	601a      	str	r2, [r3, #0]
	}
	else (void)putchar(c);
}
 8000d70:	e002      	b.n	8000d78 <printchar+0x2c>
	else (void)putchar(c);
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	f7ff fe74 	bl	8000a60 <putchar>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000d90:	2400      	movs	r4, #0
 8000d92:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dd17      	ble.n	8000dcc <prints+0x4c>
		register int len = 0;
 8000d9c:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000d9e:	68be      	ldr	r6, [r7, #8]
 8000da0:	e001      	b.n	8000da6 <prints+0x26>
 8000da2:	3501      	adds	r5, #1
 8000da4:	3601      	adds	r6, #1
 8000da6:	7833      	ldrb	r3, [r6, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1fa      	bne.n	8000da2 <prints+0x22>
		if (len >= width) width = 0;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429d      	cmp	r5, r3
 8000db0:	db02      	blt.n	8000db8 <prints+0x38>
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e002      	b.n	8000dbe <prints+0x3e>
		else width -= len;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	1b5b      	subs	r3, r3, r5
 8000dbc:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <prints+0x4c>
 8000dc8:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d116      	bne.n	8000e04 <prints+0x84>
		for ( ; width > 0; --width) {
 8000dd6:	e007      	b.n	8000de8 <prints+0x68>
			printchar (out, padchar);
 8000dd8:	4641      	mov	r1, r8
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff ffb6 	bl	8000d4c <printchar>
			++pc;
 8000de0:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dcf4      	bgt.n	8000dd8 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 8000dee:	e009      	b.n	8000e04 <prints+0x84>
		printchar (out, *string);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff ffa8 	bl	8000d4c <printchar>
		++pc;
 8000dfc:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f1      	bne.n	8000df0 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8000e0c:	e007      	b.n	8000e1e <prints+0x9e>
		printchar (out, padchar);
 8000e0e:	4641      	mov	r1, r8
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff ff9b 	bl	8000d4c <printchar>
		++pc;
 8000e16:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dcf4      	bgt.n	8000e0e <prints+0x8e>
	}

	return pc;
 8000e24:	4623      	mov	r3, r4
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e30 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e34:	b089      	sub	sp, #36	@ 0x24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000e40:	f04f 0900 	mov.w	r9, #0
 8000e44:	2600      	movs	r6, #0
	register unsigned int u = i;
 8000e46:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <printi+0x38>
		print_buf[0] = '0';
 8000e4e:	2330      	movs	r3, #48	@ 0x30
 8000e50:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000e52:	2300      	movs	r3, #0
 8000e54:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8000e56:	f107 0114 	add.w	r1, r7, #20
 8000e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff ff8e 	bl	8000d80 <prints>
 8000e64:	4603      	mov	r3, r0
 8000e66:	e04a      	b.n	8000efe <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00a      	beq.n	8000e84 <printi+0x54>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0a      	cmp	r3, #10
 8000e72:	d107      	bne.n	8000e84 <printi+0x54>
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da04      	bge.n	8000e84 <printi+0x54>
		neg = 1;
 8000e7a:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	425b      	negs	r3, r3
 8000e82:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000e84:	f107 0414 	add.w	r4, r7, #20
 8000e88:	340b      	adds	r4, #11
	*s = '\0';
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000e8e:	e015      	b.n	8000ebc <printi+0x8c>
		t = u % b;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	fbb5 f2f3 	udiv	r2, r5, r3
 8000e96:	fb02 f303 	mul.w	r3, r2, r3
 8000e9a:	1aeb      	subs	r3, r5, r3
 8000e9c:	4698      	mov	r8, r3
		if( t >= 10 )
 8000e9e:	f1b8 0f09 	cmp.w	r8, #9
 8000ea2:	dd02      	ble.n	8000eaa <printi+0x7a>
			t += letbase - '0' - 10;
 8000ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ea6:	3b3a      	subs	r3, #58	@ 0x3a
 8000ea8:	4498      	add	r8, r3
		*--s = t + '0';
 8000eaa:	fa5f f388 	uxtb.w	r3, r8
 8000eae:	3c01      	subs	r4, #1
 8000eb0:	3330      	adds	r3, #48	@ 0x30
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d1e7      	bne.n	8000e90 <printi+0x60>
	}

	if (neg) {
 8000ec0:	f1b9 0f00 	cmp.w	r9, #0
 8000ec4:	d013      	beq.n	8000eee <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00d      	beq.n	8000ee8 <printi+0xb8>
 8000ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <printi+0xb8>
			printchar (out, '-');
 8000ed6:	212d      	movs	r1, #45	@ 0x2d
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ff37 	bl	8000d4c <printchar>
			++pc;
 8000ede:	3601      	adds	r6, #1
			--width;
 8000ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ee6:	e002      	b.n	8000eee <printi+0xbe>
		}
		else {
			*--s = '-';
 8000ee8:	3c01      	subs	r4, #1
 8000eea:	232d      	movs	r3, #45	@ 0x2d
 8000eec:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ff43 	bl	8000d80 <prints>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4433      	add	r3, r6
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f08 <print>:

static int print( char **out, const char *format, va_list args )
{
 8000f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0c:	b08a      	sub	sp, #40	@ 0x28
 8000f0e:	af04      	add	r7, sp, #16
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000f16:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000f18:	e0c4      	b.n	80010a4 <print+0x19c>
		if (*format == '%') {
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b25      	cmp	r3, #37	@ 0x25
 8000f20:	f040 80b3 	bne.w	800108a <print+0x182>
			++format;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000f2a:	2600      	movs	r6, #0
 8000f2c:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80bc 	beq.w	80010b0 <print+0x1a8>
			if (*format == '%') goto out;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b25      	cmp	r3, #37	@ 0x25
 8000f3e:	f000 80a6 	beq.w	800108e <print+0x186>
			if (*format == '-') {
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f48:	d109      	bne.n	8000f5e <print+0x56>
				++format;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000f50:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000f52:	e004      	b.n	8000f5e <print+0x56>
				++format;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	3301      	adds	r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000f5a:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b30      	cmp	r3, #48	@ 0x30
 8000f64:	d0f6      	beq.n	8000f54 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000f66:	e00b      	b.n	8000f80 <print+0x78>
				width *= 10;
 8000f68:	462b      	mov	r3, r5
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	442b      	add	r3, r5
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	461d      	mov	r5, r3
				width += *format - '0';
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	3b30      	subs	r3, #48	@ 0x30
 8000f78:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f86:	d903      	bls.n	8000f90 <print+0x88>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b39      	cmp	r3, #57	@ 0x39
 8000f8e:	d9eb      	bls.n	8000f68 <print+0x60>
			}
			if( *format == 's' ) {
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b73      	cmp	r3, #115	@ 0x73
 8000f96:	d112      	bne.n	8000fbe <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	1d1a      	adds	r2, r3, #4
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8000fa2:	f1b8 0f00 	cmp.w	r8, #0
 8000fa6:	d001      	beq.n	8000fac <print+0xa4>
 8000fa8:	4641      	mov	r1, r8
 8000faa:	e000      	b.n	8000fae <print+0xa6>
 8000fac:	4947      	ldr	r1, [pc, #284]	@ (80010cc <print+0x1c4>)
 8000fae:	4633      	mov	r3, r6
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f7ff fee4 	bl	8000d80 <prints>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	441c      	add	r4, r3
				continue;
 8000fbc:	e06f      	b.n	800109e <print+0x196>
			}
			if( *format == 'd' ) {
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b64      	cmp	r3, #100	@ 0x64
 8000fc4:	d10f      	bne.n	8000fe6 <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	1d1a      	adds	r2, r3, #4
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	6819      	ldr	r1, [r3, #0]
 8000fce:	2361      	movs	r3, #97	@ 0x61
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	9601      	str	r6, [sp, #4]
 8000fd4:	9500      	str	r5, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	220a      	movs	r2, #10
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff ff28 	bl	8000e30 <printi>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	441c      	add	r4, r3
				continue;
 8000fe4:	e05b      	b.n	800109e <print+0x196>
			}
			if( *format == 'x' ) {
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b78      	cmp	r3, #120	@ 0x78
 8000fec:	d10f      	bne.n	800100e <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	1d1a      	adds	r2, r3, #4
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	2361      	movs	r3, #97	@ 0x61
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	9601      	str	r6, [sp, #4]
 8000ffc:	9500      	str	r5, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2210      	movs	r2, #16
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff ff14 	bl	8000e30 <printi>
 8001008:	4603      	mov	r3, r0
 800100a:	441c      	add	r4, r3
				continue;
 800100c:	e047      	b.n	800109e <print+0x196>
			}
			if( *format == 'X' ) {
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b58      	cmp	r3, #88	@ 0x58
 8001014:	d10f      	bne.n	8001036 <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	1d1a      	adds	r2, r3, #4
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	6819      	ldr	r1, [r3, #0]
 800101e:	2341      	movs	r3, #65	@ 0x41
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	9601      	str	r6, [sp, #4]
 8001024:	9500      	str	r5, [sp, #0]
 8001026:	2300      	movs	r3, #0
 8001028:	2210      	movs	r2, #16
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff ff00 	bl	8000e30 <printi>
 8001030:	4603      	mov	r3, r0
 8001032:	441c      	add	r4, r3
				continue;
 8001034:	e033      	b.n	800109e <print+0x196>
			}
			if( *format == 'u' ) {
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b75      	cmp	r3, #117	@ 0x75
 800103c:	d10f      	bne.n	800105e <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1d1a      	adds	r2, r3, #4
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	2361      	movs	r3, #97	@ 0x61
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	9601      	str	r6, [sp, #4]
 800104c:	9500      	str	r5, [sp, #0]
 800104e:	2300      	movs	r3, #0
 8001050:	220a      	movs	r2, #10
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f7ff feec 	bl	8000e30 <printi>
 8001058:	4603      	mov	r3, r0
 800105a:	441c      	add	r4, r3
				continue;
 800105c:	e01f      	b.n	800109e <print+0x196>
			}
			if( *format == 'c' ) {
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b63      	cmp	r3, #99	@ 0x63
 8001064:	d11b      	bne.n	800109e <print+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1d1a      	adds	r2, r3, #4
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8001072:	2300      	movs	r3, #0
 8001074:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8001076:	f107 0114 	add.w	r1, r7, #20
 800107a:	4633      	mov	r3, r6
 800107c:	462a      	mov	r2, r5
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff fe7e 	bl	8000d80 <prints>
 8001084:	4603      	mov	r3, r0
 8001086:	441c      	add	r4, r3
				continue;
 8001088:	e009      	b.n	800109e <print+0x196>
			}
		}
		else {
		out:
 800108a:	bf00      	nop
 800108c:	e000      	b.n	8001090 <print+0x188>
			if (*format == '%') goto out;
 800108e:	bf00      	nop
			printchar (out, *format);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fe58 	bl	8000d4c <printchar>
			++pc;
 800109c:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f47f af36 	bne.w	8000f1a <print+0x12>
 80010ae:	e000      	b.n	80010b2 <print+0x1aa>
			if (*format == '\0') break;
 80010b0:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <print+0x1b8>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 80010c0:	4623      	mov	r3, r4
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010cc:	0801794c 	.word	0x0801794c

080010d0 <printf>:

int printf(const char *format, ...)
{
 80010d0:	b40f      	push	{r0, r1, r2, r3}
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff10 	bl	8000f08 <print>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f4:	b004      	add	sp, #16
 80010f6:	4770      	bx	lr

080010f8 <snprintf>:

int snprintf( char *buf, unsigned int count, const char *format, ... )
{
 80010f8:	b40c      	push	{r2, r3}
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
        va_list args;

        ( void ) count;

        va_start( args, format );
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	60fb      	str	r3, [r7, #12]
        return print( &buf, format, args );
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fef9 	bl	8000f08 <print>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001122:	b002      	add	sp, #8
 8001124:	4770      	bx	lr
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_MspInit+0x4c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001150:	6453      	str	r3, [r2, #68]	@ 0x44
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	210f      	movs	r1, #15
 8001162:	f06f 0001 	mvn.w	r0, #1
 8001166:	f000 fc91 	bl	8001a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0aa      	sub	sp, #168	@ 0xa8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2284      	movs	r2, #132	@ 0x84
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f015 fc08 	bl	80169ae <memset>
  if(hi2c->Instance==I2C1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a22      	ldr	r2, [pc, #136]	@ (800122c <HAL_I2C_MspInit+0xb4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d13c      	bne.n	8001222 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 ff0e 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f7ff fdbd 	bl	8000d40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001202:	4619      	mov	r1, r3
 8001204:	480b      	ldr	r0, [pc, #44]	@ (8001234 <HAL_I2C_MspInit+0xbc>)
 8001206:	f001 fee1 	bl	8002fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001222:	bf00      	nop
 8001224:	37a8      	adds	r7, #168	@ 0xa8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40005400 	.word	0x40005400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020400 	.word	0x40020400

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0aa      	sub	sp, #168	@ 0xa8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2284      	movs	r2, #132	@ 0x84
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f015 fba8 	bl	80169ae <memset>
  if(huart->Instance==USART3)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <HAL_UART_MspInit+0xb4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d13c      	bne.n	80012e2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800126e:	2300      	movs	r3, #0
 8001270:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4618      	mov	r0, r3
 8001278:	f002 feae 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001282:	f7ff fd5d 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_UART_MspInit+0xb8>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_UART_MspInit+0xb8>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001290:	6413      	str	r3, [r2, #64]	@ 0x40
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_UART_MspInit+0xb8>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_UART_MspInit+0xb8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <HAL_UART_MspInit+0xb8>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_UART_MspInit+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d0:	2307      	movs	r3, #7
 80012d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <HAL_UART_MspInit+0xbc>)
 80012de:	f001 fe75 	bl	8002fcc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80012e2:	bf00      	nop
 80012e4:	37a8      	adds	r7, #168	@ 0xa8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40004800 	.word	0x40004800
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	@ 0x38
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001308:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_InitTick+0xe0>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a32      	ldr	r2, [pc, #200]	@ (80013d8 <HAL_InitTick+0xe0>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <HAL_InitTick+0xe0>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001320:	f107 0210 	add.w	r2, r7, #16
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fe22 	bl	8003f74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800133a:	f002 fdf3 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 800133e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001340:	e004      	b.n	800134c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001342:	f002 fdef 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 8001346:	4603      	mov	r3, r0
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800134c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800134e:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <HAL_InitTick+0xe4>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	3b01      	subs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <HAL_InitTick+0xe8>)
 800135c:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <HAL_InitTick+0xec>)
 800135e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <HAL_InitTick+0xe8>)
 8001362:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001368:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <HAL_InitTick+0xe8>)
 800136a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <HAL_InitTick+0xe8>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_InitTick+0xe8>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_InitTick+0xe8>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001380:	4817      	ldr	r0, [pc, #92]	@ (80013e0 <HAL_InitTick+0xe8>)
 8001382:	f003 fa19 	bl	80047b8 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800138c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001390:	2b00      	cmp	r3, #0
 8001392:	d11b      	bne.n	80013cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001394:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <HAL_InitTick+0xe8>)
 8001396:	f003 fa71 	bl	800487c <HAL_TIM_Base_Start_IT>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d111      	bne.n	80013cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013a8:	2036      	movs	r0, #54	@ 0x36
 80013aa:	f000 fb8b 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d808      	bhi.n	80013c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	2036      	movs	r0, #54	@ 0x36
 80013ba:	f000 fb67 	bl	8001a8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_InitTick+0xf0>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e002      	b.n	80013cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3738      	adds	r7, #56	@ 0x38
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	20000570 	.word	0x20000570
 80013e4:	40001000 	.word	0x40001000
 80013e8:	20000004 	.word	0x20000004

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <NMI_Handler+0x4>

080013f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <MemManage_Handler+0x4>

08001404 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <UsageFault_Handler+0x4>

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <TIM6_DAC_IRQHandler+0x10>)
 800142a:	f003 fa9f 	bl	800496c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000570 	.word	0x20000570

08001438 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <ETH_IRQHandler+0x10>)
 800143e:	f000 fedd 	bl	80021fc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20004fa4 	.word	0x20004fa4

0800144c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_kill>:

int _kill(int pid, int sig)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <_kill+0x20>)
 8001468:	2216      	movs	r2, #22
 800146a:	601a      	str	r2, [r3, #0]
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	2000c840 	.word	0x2000c840

08001480 <_exit>:

void _exit (int status)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffe5 	bl	800145c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001492:	bf00      	nop
 8001494:	e7fd      	b.n	8001492 <_exit+0x12>

08001496 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e00a      	b.n	80014be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a8:	f3af 8000 	nop.w
 80014ac:	4601      	mov	r1, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	b2ca      	uxtb	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbf0      	blt.n	80014a8 <_read+0x12>
  }

  return len;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e009      	b.n	80014f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ba      	str	r2, [r7, #8]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf1      	blt.n	80014e2 <_write+0x12>
  }
  return len;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_close>:

int _close(int file)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001530:	605a      	str	r2, [r3, #4]
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_isatty>:

int _isatty(int file)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d205      	bcs.n	80015ac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <_sbrk+0x6c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20050000 	.word	0x20050000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200005bc 	.word	0x200005bc
 80015d8:	2000c850 	.word	0x2000c850
 80015dc:	2000c840 	.word	0x2000c840

080015e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800163c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001608:	f7ff ffea 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	@ (8001640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	@ (8001644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	@ (8001650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001632:	f015 fa61 	bl	8016af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff f84f 	bl	80006d8 <main>
  bx  lr    
 800163a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800163c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001648:	0801afa0 	.word	0x0801afa0
  ldr r2, =_sbss
 800164c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001650:	2000c850 	.word	0x2000c850

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>

08001656 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <LAN8742_RegisterBusIO+0x28>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <LAN8742_RegisterBusIO+0x28>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <LAN8742_RegisterBusIO+0x28>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e014      	b.n	80016ae <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d139      	bne.n	800174a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2220      	movs	r2, #32
 80016e8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e01c      	b.n	800172a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f107 020c 	add.w	r2, r7, #12
 80016f8:	2112      	movs	r1, #18
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	4798      	blx	r3
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	da03      	bge.n	800170c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001704:	f06f 0304 	mvn.w	r3, #4
 8001708:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800170a:	e00b      	b.n	8001724 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	d105      	bne.n	8001724 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
         break;
 8001722:	e005      	b.n	8001730 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b1f      	cmp	r3, #31
 800172e:	d9df      	bls.n	80016f0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b1f      	cmp	r3, #31
 8001736:	d902      	bls.n	800173e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001738:	f06f 0302 	mvn.w	r3, #2
 800173c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800174a:	693b      	ldr	r3, [r7, #16]
 }
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6810      	ldr	r0, [r2, #0]
 8001768:	f107 020c 	add.w	r2, r7, #12
 800176c:	2101      	movs	r1, #1
 800176e:	4798      	blx	r3
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	da02      	bge.n	800177c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001776:	f06f 0304 	mvn.w	r3, #4
 800177a:	e06e      	b.n	800185a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6810      	ldr	r0, [r2, #0]
 8001784:	f107 020c 	add.w	r2, r7, #12
 8001788:	2101      	movs	r1, #1
 800178a:	4798      	blx	r3
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	da02      	bge.n	8001798 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001792:	f06f 0304 	mvn.w	r3, #4
 8001796:	e060      	b.n	800185a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e059      	b.n	800185a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6810      	ldr	r0, [r2, #0]
 80017ae:	f107 020c 	add.w	r2, r7, #12
 80017b2:	2100      	movs	r1, #0
 80017b4:	4798      	blx	r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da02      	bge.n	80017c2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017bc:	f06f 0304 	mvn.w	r3, #4
 80017c0:	e04b      	b.n	800185a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11b      	bne.n	8001804 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <LAN8742_GetLinkState+0x90>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017e0:	2302      	movs	r3, #2
 80017e2:	e03a      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e033      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017fc:	2304      	movs	r3, #4
 80017fe:	e02c      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001800:	2305      	movs	r3, #5
 8001802:	e02a      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	f107 020c 	add.w	r2, r7, #12
 8001810:	211f      	movs	r1, #31
 8001812:	4798      	blx	r3
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	da02      	bge.n	8001820 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800181a:	f06f 0304 	mvn.w	r3, #4
 800181e:	e01c      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800182a:	2306      	movs	r3, #6
 800182c:	e015      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 031c 	and.w	r3, r3, #28
 8001834:	2b18      	cmp	r3, #24
 8001836:	d101      	bne.n	800183c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001838:	2302      	movs	r3, #2
 800183a:	e00e      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 031c 	and.w	r3, r3, #28
 8001842:	2b08      	cmp	r3, #8
 8001844:	d101      	bne.n	800184a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001846:	2303      	movs	r3, #3
 8001848:	e007      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f003 031c 	and.w	r3, r3, #28
 8001850:	2b14      	cmp	r3, #20
 8001852:	d101      	bne.n	8001858 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001854:	2304      	movs	r3, #4
 8001856:	e000      	b.n	800185a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001858:	2305      	movs	r3, #5
    }
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
 8001868:	f000 f905 	bl	8001a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186c:	200f      	movs	r0, #15
 800186e:	f7ff fd43 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001872:	f7ff fc59 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	200005c0 	.word	0x200005c0

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200005c0 	.word	0x200005c0

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff ffee 	bl	80018a4 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffde 	bl	80018a4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008

08001904 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetREVID+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0c1b      	lsrs	r3, r3, #16
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e0042000 	.word	0xe0042000

0800191c <__NVIC_SetPriorityGrouping>:
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <__NVIC_SetPriorityGrouping+0x40>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	4313      	orrs	r3, r2
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	@ (800195c <__NVIC_SetPriorityGrouping+0x40>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	05fa0000 	.word	0x05fa0000

08001964 <__NVIC_GetPriorityGrouping>:
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	@ (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff4c 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9e:	f7ff ff61 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001aa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	6978      	ldr	r0, [r7, #20]
 8001aaa:	f7ff ffb1 	bl	8001a10 <NVIC_EncodePriority>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff80 	bl	80019bc <__NVIC_SetPriority>
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff54 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e086      	b.n	8001c00 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d106      	bne.n	8001b0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2223      	movs	r2, #35	@ 0x23
 8001b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f004 fa8b 	bl	8006020 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c08 <HAL_ETH_Init+0x128>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c08 <HAL_ETH_Init+0x128>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b3c      	ldr	r3, [pc, #240]	@ (8001c08 <HAL_ETH_Init+0x128>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b22:	4b3a      	ldr	r3, [pc, #232]	@ (8001c0c <HAL_ETH_Init+0x12c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a39      	ldr	r2, [pc, #228]	@ (8001c0c <HAL_ETH_Init+0x12c>)
 8001b28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b2c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <HAL_ETH_Init+0x12c>)
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4935      	ldr	r1, [pc, #212]	@ (8001c0c <HAL_ETH_Init+0x12c>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b3c:	4b33      	ldr	r3, [pc, #204]	@ (8001c0c <HAL_ETH_Init+0x12c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b58:	f7ff fea4 	bl	80018a4 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b5e:	e011      	b.n	8001b84 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b60:	f7ff fea0 	bl	80018a4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b6e:	d909      	bls.n	8001b84 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2204      	movs	r2, #4
 8001b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	22e0      	movs	r2, #224	@ 0xe0
 8001b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e03d      	b.n	8001c00 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1e4      	bne.n	8001b60 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 ff5c 	bl	8002a54 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f001 f807 	bl	8002bb0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f001 f85d 	bl	8002c62 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	461a      	mov	r2, r3
 8001bae:	2100      	movs	r1, #0
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 ffc5 	bl	8002b40 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_ETH_Init+0x130>)
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001bea:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40013800 	.word	0x40013800
 8001c10:	00020060 	.word	0x00020060

08001c14 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d15f      	bne.n	8001ce6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2223      	movs	r2, #35	@ 0x23
 8001c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2204      	movs	r2, #4
 8001c38:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f9f6 	bl	800202c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff fe37 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c6c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c84:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fd80 	bl	800278c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0208 	orr.w	r2, r2, #8
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff fe09 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0204 	orr.w	r2, r2, #4
 8001cc0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cca:	69d9      	ldr	r1, [r3, #28]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_ETH_Start_IT+0xdc>)
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cd8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2223      	movs	r2, #35	@ 0x23
 8001cde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	0001a0c1 	.word	0x0001a0c1

08001cf4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d02:	2b23      	cmp	r3, #35	@ 0x23
 8001d04:	d16e      	bne.n	8001de4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2223      	movs	r2, #35	@ 0x23
 8001d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d16:	69d9      	ldr	r1, [r3, #28]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <HAL_ETH_Stop_IT+0xfc>)
 8001d1e:	400b      	ands	r3, r1
 8001d20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d24:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001d38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d3c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	f023 0302 	bic.w	r3, r3, #2
 8001d50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d54:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0204 	bic.w	r2, r2, #4
 8001d64:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7ff fda4 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fd05 	bl	800278c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0208 	bic.w	r2, r2, #8
 8001d90:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fd8e 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00e      	b.n	8001dcc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	3212      	adds	r2, #18
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d9ed      	bls.n	8001dae <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2210      	movs	r2, #16
 8001ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	fffe5f3e 	.word	0xfffe5f3e

08001df4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e045      	b.n	8001ea4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e1e:	2b23      	cmp	r3, #35	@ 0x23
 8001e20:	d13f      	bne.n	8001ea2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 ff86 	bl	8002d40 <ETH_Prepare_Tx_Descriptors>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e40:	f043 0202 	orr.w	r2, r3, #2
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e02a      	b.n	8001ea4 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4e:	f3bf 8f4f 	dsb	sy
}
 8001e52:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d904      	bls.n	8001e70 <HAL_ETH_Transmit_IT+0x7c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	1f1a      	subs	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0a4      	b.n	8002022 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ede:	2b23      	cmp	r3, #35	@ 0x23
 8001ee0:	d001      	beq.n	8001ee6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e09d      	b.n	8002022 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	3212      	adds	r2, #18
 8001ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001efc:	f1c3 0304 	rsb	r3, r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f02:	e066      	b.n	8001fd2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <HAL_ETH_ReadData+0x88>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03c      	beq.n	8001fae <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f56:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f004 fa13 	bl	80063b8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	441a      	add	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d902      	bls.n	8001fc0 <HAL_ETH_ReadData+0x114>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b04      	subs	r3, #4
 8001fbe:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	3212      	adds	r2, #18
 8001fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db06      	blt.n	8001fe8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d202      	bcs.n	8001fe8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d08d      	beq.n	8001f04 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	441a      	add	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f815 	bl	800202c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d108      	bne.n	8002020 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002038:	2301      	movs	r3, #1
 800203a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002040:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	3212      	adds	r2, #18
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002052:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002054:	e042      	b.n	80020dc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d112      	bne.n	8002084 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4618      	mov	r0, r3
 8002064:	f004 f978 	bl	8006358 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	74fb      	strb	r3, [r7, #19]
 8002072:	e007      	b.n	8002084 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	461a      	mov	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	461a      	mov	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d028      	beq.n	80020dc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <ETH_UpdateDescriptor+0x104>)
 8002098:	4313      	orrs	r3, r2
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	6053      	str	r3, [r2, #4]
 800209e:	e005      	b.n	80020ac <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d902      	bls.n	80020ca <ETH_UpdateDescriptor+0x9e>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3b04      	subs	r3, #4
 80020c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	3212      	adds	r2, #18
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3b01      	subs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <ETH_UpdateDescriptor+0xbc>
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1b6      	bne.n	8002056 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d01a      	beq.n	8002128 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020fc:	f3bf 8f5f 	dmb	sy
}
 8002100:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6919      	ldr	r1, [r3, #16]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	18ca      	adds	r2, r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	80004000 	.word	0x80004000

08002134 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3318      	adds	r3, #24
 8002140:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002152:	e047      	b.n	80021e4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002154:	2301      	movs	r3, #1
 8002156:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3b01      	subs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	3304      	adds	r3, #4
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3301      	adds	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d902      	bls.n	8002180 <HAL_ETH_ReleaseTxPacket+0x4c>
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	3b04      	subs	r3, #4
 800217e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d02c      	beq.n	80021e4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68d9      	ldr	r1, [r3, #12]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db1f      	blt.n	80021e0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3304      	adds	r3, #4
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f004 f945 	bl	800643c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	3304      	adds	r3, #4
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3301      	adds	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d902      	bls.n	80021d2 <HAL_ETH_ReleaseTxPacket+0x9e>
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	3b04      	subs	r3, #4
 80021d0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021de:	e001      	b.n	80021e4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_ETH_ReleaseTxPacket+0xbc>
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1b1      	bne.n	8002154 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002224:	4b4b      	ldr	r3, [pc, #300]	@ (8002354 <HAL_ETH_IRQHandler+0x158>)
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <HAL_ETH_IRQHandler+0x56>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002246:	461a      	mov	r2, r3
 8002248:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_ETH_IRQHandler+0x15c>)
 800224a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f003 fbfb 	bl	8005a48 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00f      	beq.n	800227c <HAL_ETH_IRQHandler+0x80>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226e:	461a      	mov	r2, r3
 8002270:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002274:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f003 fbf6 	bl	8005a68 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d042      	beq.n	800230c <HAL_ETH_IRQHandler+0x110>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d03d      	beq.n	800230c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	f043 0208 	orr.w	r2, r3, #8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01a      	beq.n	80022e0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_ETH_IRQHandler+0x160>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80022d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022d4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	22e0      	movs	r2, #224	@ 0xe0
 80022da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80022de:	e012      	b.n	8002306 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	f248 6380 	movw	r3, #34432	@ 0x8680
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fe:	461a      	mov	r2, r3
 8002300:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002304:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f003 fbbe 	bl	8005a88 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00e      	beq.n	8002334 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f81a 	bl	8002360 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800233e:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_ETH_IRQHandler+0x158>)
 8002340:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002344:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f814 	bl	8002374 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800234c:	bf00      	nop
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40013c00 	.word	0x40013c00
 8002358:	00010040 	.word	0x00010040
 800235c:	007e2000 	.word	0x007e2000

08002360 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 031c 	and.w	r3, r3, #28
 80023a4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	02db      	lsls	r3, r3, #11
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f023 0302 	bic.w	r3, r3, #2
 80023c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80023d8:	f7ff fa64 	bl	80018a4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023de:	e00d      	b.n	80023fc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80023e0:	f7ff fa60 	bl	80018a4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ee:	d301      	bcc.n	80023f4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e010      	b.n	8002416 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ec      	bne.n	80023e0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 031c 	and.w	r3, r3, #28
 800243a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	02db      	lsls	r3, r3, #11
 8002440:	b29b      	uxth	r3, r3
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	019b      	lsls	r3, r3, #6
 800244c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002478:	f7ff fa14 	bl	80018a4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800247e:	e00d      	b.n	800249c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002480:	f7ff fa10 	bl	80018a4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800248e:	d301      	bcc.n	8002494 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e009      	b.n	80024a8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ec      	bne.n	8002480 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0e6      	b.n	8002692 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf14      	ite	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	2300      	moveq	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf0c      	ite	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	2300      	movne	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf0c      	ite	eq
 800262e:	2301      	moveq	r3, #1
 8002630:	2300      	movne	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	b29a      	uxth	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf14      	ite	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2300      	moveq	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00b      	b.n	80026ca <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d105      	bne.n	80026c8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f88a 	bl	80027d8 <ETH_SetMACConfig>

    return HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 031c 	bic.w	r3, r3, #28
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026ec:	f001 fc0e 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 80026f0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <HAL_ETH_SetMDIOClockRange+0x74>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d804      	bhi.n	8002704 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e019      	b.n	8002738 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4a11      	ldr	r2, [pc, #68]	@ (800274c <HAL_ETH_SetMDIOClockRange+0x78>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d204      	bcs.n	8002716 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f043 030c 	orr.w	r3, r3, #12
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e010      	b.n	8002738 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d90c      	bls.n	8002738 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4a0c      	ldr	r2, [pc, #48]	@ (8002754 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d804      	bhi.n	8002730 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	e003      	b.n	8002738 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f043 0310 	orr.w	r3, r3, #16
 8002736:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	611a      	str	r2, [r3, #16]
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	02160ebf 	.word	0x02160ebf
 800274c:	03938700 	.word	0x03938700
 8002750:	05f5e0ff 	.word	0x05f5e0ff
 8002754:	08f0d17f 	.word	0x08f0d17f

08002758 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027ae:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff f87d 	bl	80018bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027cc:	6193      	str	r3, [r2, #24]
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4b53      	ldr	r3, [pc, #332]	@ (800293c <ETH_SetMACConfig+0x164>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7b9b      	ldrb	r3, [r3, #14]
 80027f6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	7c12      	ldrb	r2, [r2, #16]
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	d102      	bne.n	8002806 <ETH_SetMACConfig+0x2e>
 8002800:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002804:	e000      	b.n	8002808 <ETH_SetMACConfig+0x30>
 8002806:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002808:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	7c52      	ldrb	r2, [r2, #17]
 800280e:	2a00      	cmp	r2, #0
 8002810:	d102      	bne.n	8002818 <ETH_SetMACConfig+0x40>
 8002812:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002816:	e000      	b.n	800281a <ETH_SetMACConfig+0x42>
 8002818:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800281a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002820:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7fdb      	ldrb	r3, [r3, #31]
 8002826:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002828:	431a      	orrs	r2, r3
                        macconf->Speed |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800282e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	7f92      	ldrb	r2, [r2, #30]
 8002834:	2a00      	cmp	r2, #0
 8002836:	d102      	bne.n	800283e <ETH_SetMACConfig+0x66>
 8002838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800283c:	e000      	b.n	8002840 <ETH_SetMACConfig+0x68>
 800283e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002840:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	7f1b      	ldrb	r3, [r3, #28]
 8002846:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002848:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800284e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	791b      	ldrb	r3, [r3, #4]
 8002854:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002856:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800285e:	2a00      	cmp	r2, #0
 8002860:	d102      	bne.n	8002868 <ETH_SetMACConfig+0x90>
 8002862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002866:	e000      	b.n	800286a <ETH_SetMACConfig+0x92>
 8002868:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800286a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	7bdb      	ldrb	r3, [r3, #15]
 8002870:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002872:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002878:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002880:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002882:	4313      	orrs	r3, r2
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800289a:	2001      	movs	r0, #1
 800289c:	f7ff f80e 	bl	80018bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	d101      	bne.n	80028ce <ETH_SetMACConfig+0xf6>
 80028ca:	2280      	movs	r2, #128	@ 0x80
 80028cc:	e000      	b.n	80028d0 <ETH_SetMACConfig+0xf8>
 80028ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80028de:	2a01      	cmp	r2, #1
 80028e0:	d101      	bne.n	80028e6 <ETH_SetMACConfig+0x10e>
 80028e2:	2208      	movs	r2, #8
 80028e4:	e000      	b.n	80028e8 <ETH_SetMACConfig+0x110>
 80028e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80028f0:	2a01      	cmp	r2, #1
 80028f2:	d101      	bne.n	80028f8 <ETH_SetMACConfig+0x120>
 80028f4:	2204      	movs	r2, #4
 80028f6:	e000      	b.n	80028fa <ETH_SetMACConfig+0x122>
 80028f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002902:	2a01      	cmp	r2, #1
 8002904:	d101      	bne.n	800290a <ETH_SetMACConfig+0x132>
 8002906:	2202      	movs	r2, #2
 8002908:	e000      	b.n	800290c <ETH_SetMACConfig+0x134>
 800290a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800290c:	4313      	orrs	r3, r2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002924:	2001      	movs	r0, #1
 8002926:	f7fe ffc9 	bl	80018bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	fd20810f 	.word	0xfd20810f

08002940 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4b3d      	ldr	r3, [pc, #244]	@ (8002a50 <ETH_SetDMAConfig+0x110>)
 800295a:	4013      	ands	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	7b1b      	ldrb	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <ETH_SetDMAConfig+0x2c>
 8002966:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800296a:	e000      	b.n	800296e <ETH_SetDMAConfig+0x2e>
 800296c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	7b5b      	ldrb	r3, [r3, #13]
 8002972:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002974:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	7f52      	ldrb	r2, [r2, #29]
 800297a:	2a00      	cmp	r2, #0
 800297c:	d102      	bne.n	8002984 <ETH_SetDMAConfig+0x44>
 800297e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002982:	e000      	b.n	8002986 <ETH_SetDMAConfig+0x46>
 8002984:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002986:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	7b9b      	ldrb	r3, [r3, #14]
 800298c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800298e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002994:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7f1b      	ldrb	r3, [r3, #28]
 800299a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800299c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	7f9b      	ldrb	r3, [r3, #30]
 80029a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029b4:	4313      	orrs	r3, r2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c4:	461a      	mov	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fe ff70 	bl	80018bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e4:	461a      	mov	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	791b      	ldrb	r3, [r3, #4]
 80029ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a00:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a08:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a0a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a12:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a18:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a26:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a34:	2001      	movs	r0, #1
 8002a36:	f7fe ff41 	bl	80018bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	f8de3f23 	.word	0xf8de3f23

08002a54 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0a6      	sub	sp, #152	@ 0x98
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a96:	2300      	movs	r3, #0
 8002a98:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002abc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ac2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ace:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fe7f 	bl	80027d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b06:	2301      	movs	r3, #1
 8002b08:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b14:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b1a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff05 	bl	8002940 <ETH_SetDMAConfig>
}
 8002b36:	bf00      	nop
 8002b38:	3798      	adds	r7, #152	@ 0x98
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3305      	adds	r3, #5
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	3204      	adds	r2, #4
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <ETH_MACAddressConfig+0x68>)
 8002b62:	4413      	add	r3, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	061a      	lsls	r2, r3, #24
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3302      	adds	r3, #2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	4313      	orrs	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <ETH_MACAddressConfig+0x6c>)
 8002b92:	4413      	add	r3, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	6013      	str	r3, [r2, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40028040 	.word	0x40028040
 8002bac:	40028044 	.word	0x40028044

08002bb0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e03e      	b.n	8002c3c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	3206      	adds	r2, #6
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d80c      	bhi.n	8002c20 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	e004      	b.n	8002c2a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d9bd      	bls.n	8002bbe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c54:	611a      	str	r2, [r3, #16]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e048      	b.n	8002d02 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6919      	ldr	r1, [r3, #16]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002cac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	3212      	adds	r2, #18
 8002cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d80c      	bhi.n	8002cf2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6919      	ldr	r1, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e004      	b.n	8002cfc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d9b3      	bls.n	8002c70 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d32:	60da      	str	r2, [r3, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b091      	sub	sp, #68	@ 0x44
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3318      	adds	r3, #24
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d82:	d007      	beq.n	8002d94 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d88:	3304      	adds	r3, #4
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d94:	2302      	movs	r3, #2
 8002d96:	e111      	b.n	8002fbc <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4b86      	ldr	r3, [pc, #536]	@ (8002fc8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db2:	6852      	ldr	r2, [r2, #4]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e1a:	e082      	b.n	8002f22 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e005      	b.n	8002e48 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d902      	bls.n	8002e5a <ETH_Prepare_Tx_Descriptors+0x11a>
 8002e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e56:	3b04      	subs	r3, #4
 8002e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e62:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e70:	d007      	beq.n	8002e82 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e76:	3304      	adds	r3, #4
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d029      	beq.n	8002ed6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e94:	e019      	b.n	8002eca <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e96:	f3bf 8f5f 	dmb	sy
}
 8002e9a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eaa:	3301      	adds	r3, #1
 8002eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d902      	bls.n	8002eba <ETH_Prepare_Tx_Descriptors+0x17a>
 8002eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d3e1      	bcc.n	8002e96 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e072      	b.n	8002fbc <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4b32      	ldr	r3, [pc, #200]	@ (8002fc8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f02:	6852      	ldr	r2, [r2, #4]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002f10:	f3bf 8f5f 	dmb	sy
}
 8002f14:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f20:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f47f af78 	bne.w	8002e1c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e005      	b.n	8002f4c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f56:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f60:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002f62:	f3bf 8f5f 	dmb	sy
}
 8002f66:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f72:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f88:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8e:	613b      	str	r3, [r7, #16]
  return(result);
 8002f90:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	2301      	movs	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f383 8810 	msr	PRIMASK, r3
}
 8002f9e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	4413      	add	r3, r2
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f383 8810 	msr	PRIMASK, r3
}
 8002fb8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3744      	adds	r7, #68	@ 0x44
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	ffffe000 	.word	0xffffe000

08002fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	@ 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e175      	b.n	80032d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	f040 8164 	bne.w	80032d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d005      	beq.n	8003022 <HAL_GPIO_Init+0x56>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d130      	bne.n	8003084 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80be 	beq.w	80032d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	4b66      	ldr	r3, [pc, #408]	@ (80032f0 <HAL_GPIO_Init+0x324>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	4a65      	ldr	r2, [pc, #404]	@ (80032f0 <HAL_GPIO_Init+0x324>)
 800315c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003160:	6453      	str	r3, [r2, #68]	@ 0x44
 8003162:	4b63      	ldr	r3, [pc, #396]	@ (80032f0 <HAL_GPIO_Init+0x324>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800316e:	4a61      	ldr	r2, [pc, #388]	@ (80032f4 <HAL_GPIO_Init+0x328>)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a58      	ldr	r2, [pc, #352]	@ (80032f8 <HAL_GPIO_Init+0x32c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d037      	beq.n	800320a <HAL_GPIO_Init+0x23e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a57      	ldr	r2, [pc, #348]	@ (80032fc <HAL_GPIO_Init+0x330>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d031      	beq.n	8003206 <HAL_GPIO_Init+0x23a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a56      	ldr	r2, [pc, #344]	@ (8003300 <HAL_GPIO_Init+0x334>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <HAL_GPIO_Init+0x236>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a55      	ldr	r2, [pc, #340]	@ (8003304 <HAL_GPIO_Init+0x338>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d025      	beq.n	80031fe <HAL_GPIO_Init+0x232>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a54      	ldr	r2, [pc, #336]	@ (8003308 <HAL_GPIO_Init+0x33c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <HAL_GPIO_Init+0x22e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a53      	ldr	r2, [pc, #332]	@ (800330c <HAL_GPIO_Init+0x340>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_GPIO_Init+0x22a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	@ (8003310 <HAL_GPIO_Init+0x344>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_Init+0x226>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a51      	ldr	r2, [pc, #324]	@ (8003314 <HAL_GPIO_Init+0x348>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_GPIO_Init+0x222>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a50      	ldr	r2, [pc, #320]	@ (8003318 <HAL_GPIO_Init+0x34c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_Init+0x21e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4f      	ldr	r2, [pc, #316]	@ (800331c <HAL_GPIO_Init+0x350>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_GPIO_Init+0x21a>
 80031e2:	2309      	movs	r3, #9
 80031e4:	e012      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031e6:	230a      	movs	r3, #10
 80031e8:	e010      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031ea:	2308      	movs	r3, #8
 80031ec:	e00e      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031f2:	2306      	movs	r3, #6
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x240>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x240>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x240>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	@ (80032f4 <HAL_GPIO_Init+0x328>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <HAL_GPIO_Init+0x354>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324e:	4a34      	ldr	r2, [pc, #208]	@ (8003320 <HAL_GPIO_Init+0x354>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003254:	4b32      	ldr	r3, [pc, #200]	@ (8003320 <HAL_GPIO_Init+0x354>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003278:	4a29      	ldr	r2, [pc, #164]	@ (8003320 <HAL_GPIO_Init+0x354>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327e:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <HAL_GPIO_Init+0x354>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <HAL_GPIO_Init+0x354>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <HAL_GPIO_Init+0x354>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032cc:	4a14      	ldr	r2, [pc, #80]	@ (8003320 <HAL_GPIO_Init+0x354>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f ae86 	bls.w	8002fec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40021400 	.word	0x40021400
 8003310:	40021800 	.word	0x40021800
 8003314:	40021c00 	.word	0x40021c00
 8003318:	40022000 	.word	0x40022000
 800331c:	40022400 	.word	0x40022400
 8003320:	40013c00 	.word	0x40013c00

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003340:	e003      	b.n	800334a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e08b      	b.n	8003482 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fefa 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	@ 0x24
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e006      	b.n	80033e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d108      	bne.n	80033fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	e007      	b.n	800340a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_I2C_Init+0x134>)
 8003416:	430b      	orrs	r3, r1
 8003418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	02008000 	.word	0x02008000

08003490 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d138      	bne.n	8003518 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e032      	b.n	800351a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	@ 0x24
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	d139      	bne.n	80035b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003546:	2302      	movs	r3, #2
 8003548:	e033      	b.n	80035b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2224      	movs	r2, #36	@ 0x24
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003578:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40007000 	.word	0x40007000

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e291      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8087 	beq.w	8003712 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003604:	4b96      	ldr	r3, [pc, #600]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b04      	cmp	r3, #4
 800360e:	d00c      	beq.n	800362a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003610:	4b93      	ldr	r3, [pc, #588]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	d112      	bne.n	8003642 <HAL_RCC_OscConfig+0x62>
 800361c:	4b90      	ldr	r3, [pc, #576]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003628:	d10b      	bne.n	8003642 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362a:	4b8d      	ldr	r3, [pc, #564]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d06c      	beq.n	8003710 <HAL_RCC_OscConfig+0x130>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d168      	bne.n	8003710 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e26b      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x7a>
 800364c:	4b84      	ldr	r3, [pc, #528]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a83      	ldr	r2, [pc, #524]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e02e      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x9c>
 8003662:	4b7f      	ldr	r3, [pc, #508]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a7e      	ldr	r2, [pc, #504]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b7c      	ldr	r3, [pc, #496]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7b      	ldr	r2, [pc, #492]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003674:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 8003686:	4b76      	ldr	r3, [pc, #472]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a75      	ldr	r2, [pc, #468]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b73      	ldr	r3, [pc, #460]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a72      	ldr	r2, [pc, #456]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xd8>
 80036a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe f8f0 	bl	80018a4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe f8ec 	bl	80018a4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e21f      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b61      	ldr	r3, [pc, #388]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe f8dc 	bl	80018a4 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fe f8d8 	bl	80018a4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e20b      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	4b57      	ldr	r3, [pc, #348]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x110>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d069      	beq.n	80037f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371e:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372a:	4b4d      	ldr	r3, [pc, #308]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d11c      	bne.n	8003770 <HAL_RCC_OscConfig+0x190>
 8003736:	4b4a      	ldr	r3, [pc, #296]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x17a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e1df      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	4b41      	ldr	r3, [pc, #260]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	493d      	ldr	r1, [pc, #244]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	e040      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d023      	beq.n	80037c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003778:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a38      	ldr	r2, [pc, #224]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe f88e 	bl	80018a4 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378c:	f7fe f88a 	bl	80018a4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1bd      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b30      	ldr	r3, [pc, #192]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4929      	ldr	r1, [pc, #164]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
 80037be:	e018      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a26      	ldr	r2, [pc, #152]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe f86a 	bl	80018a4 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fe f866 	bl	80018a4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e199      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d038      	beq.n	8003870 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d019      	beq.n	800383a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b16      	ldr	r3, [pc, #88]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380a:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fe f847 	bl	80018a4 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381a:	f7fe f843 	bl	80018a4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e176      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800382e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x23a>
 8003838:	e01a      	b.n	8003870 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 800383c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383e:	4a08      	ldr	r2, [pc, #32]	@ (8003860 <HAL_RCC_OscConfig+0x280>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fe f82d 	bl	80018a4 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384e:	f7fe f829 	bl	80018a4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d903      	bls.n	8003864 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e15c      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
 8003860:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	4b91      	ldr	r3, [pc, #580]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ee      	bne.n	800384e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a4 	beq.w	80039c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b8b      	ldr	r3, [pc, #556]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	4b88      	ldr	r3, [pc, #544]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	4a87      	ldr	r2, [pc, #540]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	@ 0x40
 8003896:	4b85      	ldr	r3, [pc, #532]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a6:	4b82      	ldr	r3, [pc, #520]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038b2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7fd fff1 	bl	80018a4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fd ffed 	bl	80018a4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	@ 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e120      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d8:	4b75      	ldr	r3, [pc, #468]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x31a>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f8:	e02d      	b.n	8003956 <HAL_RCC_OscConfig+0x376>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x33c>
 8003902:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	4a69      	ldr	r2, [pc, #420]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	@ 0x70
 800390e:	4b67      	ldr	r3, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6713      	str	r3, [r2, #112]	@ 0x70
 800391a:	e01c      	b.n	8003956 <HAL_RCC_OscConfig+0x376>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0x35e>
 8003924:	4b61      	ldr	r3, [pc, #388]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	4a60      	ldr	r2, [pc, #384]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003930:	4b5e      	ldr	r3, [pc, #376]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003934:	4a5d      	ldr	r2, [pc, #372]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	@ 0x70
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0x376>
 800393e:	4b5b      	ldr	r3, [pc, #364]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a5a      	ldr	r2, [pc, #360]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
 800394a:	4b58      	ldr	r3, [pc, #352]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394e:	4a57      	ldr	r2, [pc, #348]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fd ffa1 	bl	80018a4 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd ff9d 	bl	80018a4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0ce      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b4b      	ldr	r3, [pc, #300]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCC_OscConfig+0x386>
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fd ff8b 	bl	80018a4 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fd ff87 	bl	80018a4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0b8      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4b3c      	ldr	r3, [pc, #240]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	4a3b      	ldr	r2, [pc, #236]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a4 	beq.w	8003b18 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d06b      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d149      	bne.n	8003a78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b31      	ldr	r3, [pc, #196]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a30      	ldr	r2, [pc, #192]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd ff58 	bl	80018a4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fd ff54 	bl	80018a4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e087      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b28      	ldr	r3, [pc, #160]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fd ff28 	bl	80018a4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fd ff24 	bl	80018a4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e057      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x478>
 8003a76:	e04f      	b.n	8003b18 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd ff0e 	bl	80018a4 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fd ff0a 	bl	80018a4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e03d      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <HAL_RCC_OscConfig+0x4cc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4ac>
 8003aaa:	e035      	b.n	8003b18 <HAL_RCC_OscConfig+0x538>
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_OscConfig+0x544>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d028      	beq.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d121      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d11a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0d0      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d910      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b67      	ldr	r3, [pc, #412]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 020f 	bic.w	r2, r3, #15
 8003b56:	4965      	ldr	r1, [pc, #404]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d040      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d115      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bea:	4b41      	ldr	r3, [pc, #260]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e073      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06b      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0a:	4b39      	ldr	r3, [pc, #228]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4936      	ldr	r1, [pc, #216]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fd fe42 	bl	80018a4 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fd fe3e 	bl	80018a4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e053      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1eb      	bne.n	8003c24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d210      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b24      	ldr	r3, [pc, #144]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	4922      	ldr	r1, [pc, #136]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1d4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fb0c 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	0801ad5c 	.word	0x0801ad5c
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000004 	.word	0x20000004

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b094      	sub	sp, #80	@ 0x50
 8003d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d10:	2300      	movs	r3, #0
 8003d12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d18:	4b79      	ldr	r3, [pc, #484]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d00d      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x40>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	f200 80e1 	bhi.w	8003eec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d32:	e0db      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d38:	e0db      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3a:	4b73      	ldr	r3, [pc, #460]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d3e:	e0d8      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d40:	4b6f      	ldr	r3, [pc, #444]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b6a      	ldr	r3, [pc, #424]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	0159      	lsls	r1, r3, #5
 8003d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d84:	0150      	lsls	r0, r2, #5
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	1a51      	subs	r1, r2, r1
 8003d8e:	6139      	str	r1, [r7, #16]
 8003d90:	4629      	mov	r1, r5
 8003d92:	eb63 0301 	sbc.w	r3, r3, r1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da4:	4659      	mov	r1, fp
 8003da6:	018b      	lsls	r3, r1, #6
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dae:	4651      	mov	r1, sl
 8003db0:	018a      	lsls	r2, r1, #6
 8003db2:	4651      	mov	r1, sl
 8003db4:	ebb2 0801 	subs.w	r8, r2, r1
 8003db8:	4659      	mov	r1, fp
 8003dba:	eb63 0901 	sbc.w	r9, r3, r1
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	eb18 0303 	adds.w	r3, r8, r3
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	462b      	mov	r3, r5
 8003de0:	eb49 0303 	adc.w	r3, r9, r3
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003df2:	4629      	mov	r1, r5
 8003df4:	024b      	lsls	r3, r1, #9
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	024a      	lsls	r2, r1, #9
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e10:	f7fc fa56 	bl	80002c0 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1c:	e058      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1e:	4b38      	ldr	r3, [pc, #224]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	2200      	movs	r2, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	4611      	mov	r1, r2
 8003e2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	f04f 0000 	mov.w	r0, #0
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	0159      	lsls	r1, r3, #5
 8003e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e4a:	0150      	lsls	r0, r2, #5
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4641      	mov	r1, r8
 8003e52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e56:	4649      	mov	r1, r9
 8003e58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e70:	ebb2 040a 	subs.w	r4, r2, sl
 8003e74:	eb63 050b 	sbc.w	r5, r3, fp
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	00eb      	lsls	r3, r5, #3
 8003e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e86:	00e2      	lsls	r2, r4, #3
 8003e88:	4614      	mov	r4, r2
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	18e3      	adds	r3, r4, r3
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	464b      	mov	r3, r9
 8003e94:	eb45 0303 	adc.w	r3, r5, r3
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	028b      	lsls	r3, r1, #10
 8003eaa:	4621      	mov	r1, r4
 8003eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	028a      	lsls	r2, r1, #10
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eba:	2200      	movs	r2, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	61fa      	str	r2, [r7, #28]
 8003ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec4:	f7fc f9fc 	bl	80002c0 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ee0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3750      	adds	r7, #80	@ 0x50
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	00f42400 	.word	0x00f42400
 8003f08:	007a1200 	.word	0x007a1200

08003f0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f10:	4b03      	ldr	r3, [pc, #12]	@ (8003f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000000 	.word	0x20000000

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f28:	f7ff fff0 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0a9b      	lsrs	r3, r3, #10
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	0801ad6c 	.word	0x0801ad6c

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f50:	f7ff ffdc 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0b5b      	lsrs	r3, r3, #13
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4903      	ldr	r1, [pc, #12]	@ (8003f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	0801ad6c 	.word	0x0801ad6c

08003f74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	220f      	movs	r2, #15
 8003f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f84:	4b12      	ldr	r3, [pc, #72]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fb6:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <HAL_RCC_GetClockConfig+0x60>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40023c00 	.word	0x40023c00

08003fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004000:	4b69      	ldr	r3, [pc, #420]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a68      	ldr	r2, [pc, #416]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800400a:	6093      	str	r3, [r2, #8]
 800400c:	4b66      	ldr	r3, [pc, #408]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004014:	4964      	ldr	r1, [pc, #400]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d017      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004032:	4b5d      	ldr	r3, [pc, #372]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004038:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	4959      	ldr	r1, [pc, #356]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004050:	d101      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800405e:	2301      	movs	r3, #1
 8004060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d017      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800406e:	4b4e      	ldr	r3, [pc, #312]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004074:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	494a      	ldr	r1, [pc, #296]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800408c:	d101      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800408e:	2301      	movs	r3, #1
 8004090:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 808b 	beq.w	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b3a      	ldr	r3, [pc, #232]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	4a39      	ldr	r2, [pc, #228]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c8:	4b37      	ldr	r3, [pc, #220]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040d4:	4b35      	ldr	r3, [pc, #212]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a34      	ldr	r2, [pc, #208]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e0:	f7fd fbe0 	bl	80018a4 <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e8:	f7fd fbdc 	bl	80018a4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	@ 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e357      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040fa:	4b2c      	ldr	r3, [pc, #176]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004106:	4b28      	ldr	r3, [pc, #160]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d035      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	429a      	cmp	r2, r3
 8004122:	d02e      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004124:	4b20      	ldr	r3, [pc, #128]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800412e:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004138:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413a:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	4a1a      	ldr	r2, [pc, #104]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004144:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004146:	4a18      	ldr	r2, [pc, #96]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800414c:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d114      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fba4 	bl	80018a4 <HAL_GetTick>
 800415c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd fba0 	bl	80018a4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e319      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ee      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800418e:	d111      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800419c:	4b04      	ldr	r3, [pc, #16]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800419e:	400b      	ands	r3, r1
 80041a0:	4901      	ldr	r1, [pc, #4]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
 80041a6:	e00b      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
 80041b0:	0ffffcff 	.word	0x0ffffcff
 80041b4:	4baa      	ldr	r3, [pc, #680]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4aa9      	ldr	r2, [pc, #676]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80041be:	6093      	str	r3, [r2, #8]
 80041c0:	4ba7      	ldr	r3, [pc, #668]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	49a4      	ldr	r1, [pc, #656]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041de:	4ba0      	ldr	r3, [pc, #640]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041e4:	4a9e      	ldr	r2, [pc, #632]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80041ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	4999      	ldr	r1, [pc, #612]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800420c:	4b94      	ldr	r3, [pc, #592]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800421a:	4991      	ldr	r1, [pc, #580]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800422e:	4b8c      	ldr	r3, [pc, #560]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004234:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800423c:	4988      	ldr	r1, [pc, #544]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004250:	4b83      	ldr	r3, [pc, #524]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425e:	4980      	ldr	r1, [pc, #512]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004272:	4b7b      	ldr	r3, [pc, #492]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004278:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004280:	4977      	ldr	r1, [pc, #476]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004294:	4b72      	ldr	r3, [pc, #456]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	496f      	ldr	r1, [pc, #444]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042bc:	f023 020c 	bic.w	r2, r3, #12
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c4:	4966      	ldr	r1, [pc, #408]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042d8:	4b61      	ldr	r3, [pc, #388]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	495e      	ldr	r1, [pc, #376]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042fa:	4b59      	ldr	r3, [pc, #356]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004300:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	4955      	ldr	r1, [pc, #340]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800431c:	4b50      	ldr	r3, [pc, #320]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	494d      	ldr	r1, [pc, #308]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800433e:	4b48      	ldr	r3, [pc, #288]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004344:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	4944      	ldr	r1, [pc, #272]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004360:	4b3f      	ldr	r3, [pc, #252]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	493c      	ldr	r1, [pc, #240]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004382:	4b37      	ldr	r3, [pc, #220]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004388:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004390:	4933      	ldr	r1, [pc, #204]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b2:	492b      	ldr	r1, [pc, #172]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043c6:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043cc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d4:	4922      	ldr	r1, [pc, #136]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004406:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004414:	4912      	ldr	r1, [pc, #72]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004428:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004438:	4909      	ldr	r1, [pc, #36]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d006      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80d9 	beq.w	8004606 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004454:	4b02      	ldr	r3, [pc, #8]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a01      	ldr	r2, [pc, #4]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800445e:	e001      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004460:	40023800 	.word	0x40023800
 8004464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004466:	f7fd fa1d 	bl	80018a4 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800446e:	f7fd fa19 	bl	80018a4 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b64      	cmp	r3, #100	@ 0x64
 800447a:	d901      	bls.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e194      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004480:	4b6c      	ldr	r3, [pc, #432]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d021      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044a0:	4b64      	ldr	r3, [pc, #400]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ae:	4b61      	ldr	r3, [pc, #388]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	019a      	lsls	r2, r3, #6
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	071b      	lsls	r3, r3, #28
 80044d4:	4957      	ldr	r1, [pc, #348]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02e      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004506:	d129      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004508:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004516:	4b47      	ldr	r3, [pc, #284]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451c:	0f1b      	lsrs	r3, r3, #28
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	019a      	lsls	r2, r3, #6
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	071b      	lsls	r3, r3, #28
 800453c:	493d      	ldr	r1, [pc, #244]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004544:	4b3b      	ldr	r3, [pc, #236]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800454a:	f023 021f 	bic.w	r2, r3, #31
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	3b01      	subs	r3, #1
 8004554:	4937      	ldr	r1, [pc, #220]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01d      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004568:	4b32      	ldr	r3, [pc, #200]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456e:	0e1b      	lsrs	r3, r3, #24
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004576:	4b2f      	ldr	r3, [pc, #188]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457c:	0f1b      	lsrs	r3, r3, #28
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	019a      	lsls	r2, r3, #6
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	431a      	orrs	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	071b      	lsls	r3, r3, #28
 800459c:	4925      	ldr	r1, [pc, #148]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d011      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	019a      	lsls	r2, r3, #6
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	071b      	lsls	r3, r3, #28
 80045cc:	4919      	ldr	r1, [pc, #100]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045d4:	4b17      	ldr	r3, [pc, #92]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a16      	ldr	r2, [pc, #88]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fd f960 	bl	80018a4 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045e8:	f7fd f95c 	bl	80018a4 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	@ 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0d7      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b01      	cmp	r3, #1
 800460a:	f040 80cd 	bne.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800460e:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a08      	ldr	r2, [pc, #32]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461a:	f7fd f943 	bl	80018a4 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004622:	f7fd f93f 	bl	80018a4 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b64      	cmp	r3, #100	@ 0x64
 800462e:	d903      	bls.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0ba      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004634:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004638:	4b5e      	ldr	r3, [pc, #376]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004644:	d0ed      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004662:	2b00      	cmp	r3, #0
 8004664:	d02e      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d12a      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800466e:	4b51      	ldr	r3, [pc, #324]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800467c:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	0f1b      	lsrs	r3, r3, #28
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	019a      	lsls	r2, r3, #6
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	071b      	lsls	r3, r3, #28
 80046a2:	4944      	ldr	r1, [pc, #272]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046aa:	4b42      	ldr	r3, [pc, #264]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	493d      	ldr	r1, [pc, #244]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d022      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d8:	d11d      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046da:	4b36      	ldr	r3, [pc, #216]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e0:	0e1b      	lsrs	r3, r3, #24
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046e8:	4b32      	ldr	r3, [pc, #200]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ee:	0f1b      	lsrs	r3, r3, #28
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	019a      	lsls	r2, r3, #6
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	071b      	lsls	r3, r3, #28
 800470e:	4929      	ldr	r1, [pc, #164]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d028      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004728:	0e1b      	lsrs	r3, r3, #24
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004730:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	019a      	lsls	r2, r3, #6
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	431a      	orrs	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	071b      	lsls	r3, r3, #28
 8004756:	4917      	ldr	r1, [pc, #92]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004764:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4911      	ldr	r1, [pc, #68]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0e      	ldr	r2, [pc, #56]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fd f890 	bl	80018a4 <HAL_GetTick>
 8004784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004788:	f7fd f88c 	bl	80018a4 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e007      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a6:	d1ef      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800

080047b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e049      	b.n	800485e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f841 	bl	8004866 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f000 f9e8 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d001      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e054      	b.n	800493e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a26      	ldr	r2, [pc, #152]	@ (800494c <HAL_TIM_Base_Start_IT+0xd0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d022      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x80>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048be:	d01d      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x80>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a22      	ldr	r2, [pc, #136]	@ (8004950 <HAL_TIM_Base_Start_IT+0xd4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d018      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x80>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a21      	ldr	r2, [pc, #132]	@ (8004954 <HAL_TIM_Base_Start_IT+0xd8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x80>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <HAL_TIM_Base_Start_IT+0xdc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x80>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <HAL_TIM_Base_Start_IT+0xe0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x80>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <HAL_TIM_Base_Start_IT+0xe4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x80>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <HAL_TIM_Base_Start_IT+0xe8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d115      	bne.n	8004928 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	4b19      	ldr	r3, [pc, #100]	@ (8004968 <HAL_TIM_Base_Start_IT+0xec>)
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b06      	cmp	r3, #6
 800490c:	d015      	beq.n	800493a <HAL_TIM_Base_Start_IT+0xbe>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004914:	d011      	beq.n	800493a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	e008      	b.n	800493a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e000      	b.n	800493c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40001800 	.word	0x40001800
 8004968:	00010007 	.word	0x00010007

0800496c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0202 	mvn.w	r2, #2
 80049a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8e9 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8db 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f8ec 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d020      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01b      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0204 	mvn.w	r2, #4
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8c3 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8b5 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8c6 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d020      	beq.n	8004a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0208 	mvn.w	r2, #8
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f89d 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f88f 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8a0 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0210 	mvn.w	r2, #16
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f877 	bl	8004b8e <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f869 	bl	8004b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f87a 	bl	8004ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0201 	mvn.w	r2, #1
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc f922 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00c      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f919 	bl	8004d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00c      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f911 	bl	8004d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00c      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f834 	bl	8004bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00c      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f06f 0220 	mvn.w	r2, #32
 8004b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f8d9 	bl	8004d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a46      	ldr	r2, [pc, #280]	@ (8004cf8 <TIM_Base_SetConfig+0x12c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bea:	d00f      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a43      	ldr	r2, [pc, #268]	@ (8004cfc <TIM_Base_SetConfig+0x130>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a42      	ldr	r2, [pc, #264]	@ (8004d00 <TIM_Base_SetConfig+0x134>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a41      	ldr	r2, [pc, #260]	@ (8004d04 <TIM_Base_SetConfig+0x138>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a40      	ldr	r2, [pc, #256]	@ (8004d08 <TIM_Base_SetConfig+0x13c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a35      	ldr	r2, [pc, #212]	@ (8004cf8 <TIM_Base_SetConfig+0x12c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d02b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2c:	d027      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a32      	ldr	r2, [pc, #200]	@ (8004cfc <TIM_Base_SetConfig+0x130>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d023      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a31      	ldr	r2, [pc, #196]	@ (8004d00 <TIM_Base_SetConfig+0x134>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01f      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a30      	ldr	r2, [pc, #192]	@ (8004d04 <TIM_Base_SetConfig+0x138>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2f      	ldr	r2, [pc, #188]	@ (8004d08 <TIM_Base_SetConfig+0x13c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d017      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2e      	ldr	r2, [pc, #184]	@ (8004d0c <TIM_Base_SetConfig+0x140>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	@ (8004d10 <TIM_Base_SetConfig+0x144>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00f      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <TIM_Base_SetConfig+0x148>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	@ (8004d18 <TIM_Base_SetConfig+0x14c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2a      	ldr	r2, [pc, #168]	@ (8004d1c <TIM_Base_SetConfig+0x150>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a29      	ldr	r2, [pc, #164]	@ (8004d20 <TIM_Base_SetConfig+0x154>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d108      	bne.n	8004c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a10      	ldr	r2, [pc, #64]	@ (8004cf8 <TIM_Base_SetConfig+0x12c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0xf8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	@ (8004d08 <TIM_Base_SetConfig+0x13c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d103      	bne.n	8004ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]
  }
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40010400 	.word	0x40010400
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800
 8004d18:	40001800 	.word	0x40001800
 8004d1c:	40001c00 	.word	0x40001c00
 8004d20:	40002000 	.word	0x40002000

08004d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e040      	b.n	8004df4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc fa58 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2224      	movs	r2, #36	@ 0x24
 8004d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fb16 	bl	80053d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8af 	bl	8004f10 <UART_SetConfig>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01b      	b.n	8004df4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fb95 	bl	800551c <UART_CheckIdleState>
 8004df2:	4603      	mov	r3, r0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	@ 0x28
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d177      	bne.n	8004f04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_UART_Transmit+0x24>
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e070      	b.n	8004f06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2221      	movs	r2, #33	@ 0x21
 8004e30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e32:	f7fc fd37 	bl	80018a4 <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e50:	d108      	bne.n	8004e64 <HAL_UART_Transmit+0x68>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e003      	b.n	8004e6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e6c:	e02f      	b.n	8004ece <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2180      	movs	r1, #128	@ 0x80
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fba6 	bl	80055ca <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e03b      	b.n	8004f06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e007      	b.n	8004ebc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1c9      	bne.n	8004e6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2140      	movs	r1, #64	@ 0x40
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fb70 	bl	80055ca <UART_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e005      	b.n	8004f06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4ba6      	ldr	r3, [pc, #664]	@ (80051d4 <UART_SetConfig+0x2c4>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	6979      	ldr	r1, [r7, #20]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a94      	ldr	r2, [pc, #592]	@ (80051d8 <UART_SetConfig+0x2c8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d120      	bne.n	8004fce <UART_SetConfig+0xbe>
 8004f8c:	4b93      	ldr	r3, [pc, #588]	@ (80051dc <UART_SetConfig+0x2cc>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d816      	bhi.n	8004fc8 <UART_SetConfig+0xb8>
 8004f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <UART_SetConfig+0x90>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fbd 	.word	0x08004fbd
 8004fa8:	08004fb7 	.word	0x08004fb7
 8004fac:	08004fc3 	.word	0x08004fc3
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e150      	b.n	8005258 <UART_SetConfig+0x348>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e14d      	b.n	8005258 <UART_SetConfig+0x348>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e14a      	b.n	8005258 <UART_SetConfig+0x348>
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e147      	b.n	8005258 <UART_SetConfig+0x348>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e144      	b.n	8005258 <UART_SetConfig+0x348>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a83      	ldr	r2, [pc, #524]	@ (80051e0 <UART_SetConfig+0x2d0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d132      	bne.n	800503e <UART_SetConfig+0x12e>
 8004fd8:	4b80      	ldr	r3, [pc, #512]	@ (80051dc <UART_SetConfig+0x2cc>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d828      	bhi.n	8005038 <UART_SetConfig+0x128>
 8004fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fec <UART_SetConfig+0xdc>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	08005039 	.word	0x08005039
 8004ff4:	08005039 	.word	0x08005039
 8004ff8:	08005039 	.word	0x08005039
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	08005039 	.word	0x08005039
 8005004:	08005039 	.word	0x08005039
 8005008:	08005039 	.word	0x08005039
 800500c:	08005027 	.word	0x08005027
 8005010:	08005039 	.word	0x08005039
 8005014:	08005039 	.word	0x08005039
 8005018:	08005039 	.word	0x08005039
 800501c:	08005033 	.word	0x08005033
 8005020:	2300      	movs	r3, #0
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e118      	b.n	8005258 <UART_SetConfig+0x348>
 8005026:	2302      	movs	r3, #2
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e115      	b.n	8005258 <UART_SetConfig+0x348>
 800502c:	2304      	movs	r3, #4
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e112      	b.n	8005258 <UART_SetConfig+0x348>
 8005032:	2308      	movs	r3, #8
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e10f      	b.n	8005258 <UART_SetConfig+0x348>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e10c      	b.n	8005258 <UART_SetConfig+0x348>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a68      	ldr	r2, [pc, #416]	@ (80051e4 <UART_SetConfig+0x2d4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d120      	bne.n	800508a <UART_SetConfig+0x17a>
 8005048:	4b64      	ldr	r3, [pc, #400]	@ (80051dc <UART_SetConfig+0x2cc>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005052:	2b30      	cmp	r3, #48	@ 0x30
 8005054:	d013      	beq.n	800507e <UART_SetConfig+0x16e>
 8005056:	2b30      	cmp	r3, #48	@ 0x30
 8005058:	d814      	bhi.n	8005084 <UART_SetConfig+0x174>
 800505a:	2b20      	cmp	r3, #32
 800505c:	d009      	beq.n	8005072 <UART_SetConfig+0x162>
 800505e:	2b20      	cmp	r3, #32
 8005060:	d810      	bhi.n	8005084 <UART_SetConfig+0x174>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <UART_SetConfig+0x15c>
 8005066:	2b10      	cmp	r3, #16
 8005068:	d006      	beq.n	8005078 <UART_SetConfig+0x168>
 800506a:	e00b      	b.n	8005084 <UART_SetConfig+0x174>
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e0f2      	b.n	8005258 <UART_SetConfig+0x348>
 8005072:	2302      	movs	r3, #2
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e0ef      	b.n	8005258 <UART_SetConfig+0x348>
 8005078:	2304      	movs	r3, #4
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e0ec      	b.n	8005258 <UART_SetConfig+0x348>
 800507e:	2308      	movs	r3, #8
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e0e9      	b.n	8005258 <UART_SetConfig+0x348>
 8005084:	2310      	movs	r3, #16
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e0e6      	b.n	8005258 <UART_SetConfig+0x348>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a56      	ldr	r2, [pc, #344]	@ (80051e8 <UART_SetConfig+0x2d8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d120      	bne.n	80050d6 <UART_SetConfig+0x1c6>
 8005094:	4b51      	ldr	r3, [pc, #324]	@ (80051dc <UART_SetConfig+0x2cc>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800509e:	2bc0      	cmp	r3, #192	@ 0xc0
 80050a0:	d013      	beq.n	80050ca <UART_SetConfig+0x1ba>
 80050a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80050a4:	d814      	bhi.n	80050d0 <UART_SetConfig+0x1c0>
 80050a6:	2b80      	cmp	r3, #128	@ 0x80
 80050a8:	d009      	beq.n	80050be <UART_SetConfig+0x1ae>
 80050aa:	2b80      	cmp	r3, #128	@ 0x80
 80050ac:	d810      	bhi.n	80050d0 <UART_SetConfig+0x1c0>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <UART_SetConfig+0x1a8>
 80050b2:	2b40      	cmp	r3, #64	@ 0x40
 80050b4:	d006      	beq.n	80050c4 <UART_SetConfig+0x1b4>
 80050b6:	e00b      	b.n	80050d0 <UART_SetConfig+0x1c0>
 80050b8:	2300      	movs	r3, #0
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e0cc      	b.n	8005258 <UART_SetConfig+0x348>
 80050be:	2302      	movs	r3, #2
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e0c9      	b.n	8005258 <UART_SetConfig+0x348>
 80050c4:	2304      	movs	r3, #4
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e0c6      	b.n	8005258 <UART_SetConfig+0x348>
 80050ca:	2308      	movs	r3, #8
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e0c3      	b.n	8005258 <UART_SetConfig+0x348>
 80050d0:	2310      	movs	r3, #16
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e0c0      	b.n	8005258 <UART_SetConfig+0x348>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a44      	ldr	r2, [pc, #272]	@ (80051ec <UART_SetConfig+0x2dc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d125      	bne.n	800512c <UART_SetConfig+0x21c>
 80050e0:	4b3e      	ldr	r3, [pc, #248]	@ (80051dc <UART_SetConfig+0x2cc>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ee:	d017      	beq.n	8005120 <UART_SetConfig+0x210>
 80050f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050f4:	d817      	bhi.n	8005126 <UART_SetConfig+0x216>
 80050f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050fa:	d00b      	beq.n	8005114 <UART_SetConfig+0x204>
 80050fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005100:	d811      	bhi.n	8005126 <UART_SetConfig+0x216>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <UART_SetConfig+0x1fe>
 8005106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800510a:	d006      	beq.n	800511a <UART_SetConfig+0x20a>
 800510c:	e00b      	b.n	8005126 <UART_SetConfig+0x216>
 800510e:	2300      	movs	r3, #0
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e0a1      	b.n	8005258 <UART_SetConfig+0x348>
 8005114:	2302      	movs	r3, #2
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e09e      	b.n	8005258 <UART_SetConfig+0x348>
 800511a:	2304      	movs	r3, #4
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e09b      	b.n	8005258 <UART_SetConfig+0x348>
 8005120:	2308      	movs	r3, #8
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e098      	b.n	8005258 <UART_SetConfig+0x348>
 8005126:	2310      	movs	r3, #16
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e095      	b.n	8005258 <UART_SetConfig+0x348>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2f      	ldr	r2, [pc, #188]	@ (80051f0 <UART_SetConfig+0x2e0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d125      	bne.n	8005182 <UART_SetConfig+0x272>
 8005136:	4b29      	ldr	r3, [pc, #164]	@ (80051dc <UART_SetConfig+0x2cc>)
 8005138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005140:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005144:	d017      	beq.n	8005176 <UART_SetConfig+0x266>
 8005146:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800514a:	d817      	bhi.n	800517c <UART_SetConfig+0x26c>
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005150:	d00b      	beq.n	800516a <UART_SetConfig+0x25a>
 8005152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005156:	d811      	bhi.n	800517c <UART_SetConfig+0x26c>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <UART_SetConfig+0x254>
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005160:	d006      	beq.n	8005170 <UART_SetConfig+0x260>
 8005162:	e00b      	b.n	800517c <UART_SetConfig+0x26c>
 8005164:	2301      	movs	r3, #1
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e076      	b.n	8005258 <UART_SetConfig+0x348>
 800516a:	2302      	movs	r3, #2
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e073      	b.n	8005258 <UART_SetConfig+0x348>
 8005170:	2304      	movs	r3, #4
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e070      	b.n	8005258 <UART_SetConfig+0x348>
 8005176:	2308      	movs	r3, #8
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e06d      	b.n	8005258 <UART_SetConfig+0x348>
 800517c:	2310      	movs	r3, #16
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e06a      	b.n	8005258 <UART_SetConfig+0x348>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1b      	ldr	r2, [pc, #108]	@ (80051f4 <UART_SetConfig+0x2e4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d138      	bne.n	80051fe <UART_SetConfig+0x2ee>
 800518c:	4b13      	ldr	r3, [pc, #76]	@ (80051dc <UART_SetConfig+0x2cc>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005192:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005196:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800519a:	d017      	beq.n	80051cc <UART_SetConfig+0x2bc>
 800519c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051a0:	d82a      	bhi.n	80051f8 <UART_SetConfig+0x2e8>
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a6:	d00b      	beq.n	80051c0 <UART_SetConfig+0x2b0>
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ac:	d824      	bhi.n	80051f8 <UART_SetConfig+0x2e8>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <UART_SetConfig+0x2aa>
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b6:	d006      	beq.n	80051c6 <UART_SetConfig+0x2b6>
 80051b8:	e01e      	b.n	80051f8 <UART_SetConfig+0x2e8>
 80051ba:	2300      	movs	r3, #0
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e04b      	b.n	8005258 <UART_SetConfig+0x348>
 80051c0:	2302      	movs	r3, #2
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e048      	b.n	8005258 <UART_SetConfig+0x348>
 80051c6:	2304      	movs	r3, #4
 80051c8:	77fb      	strb	r3, [r7, #31]
 80051ca:	e045      	b.n	8005258 <UART_SetConfig+0x348>
 80051cc:	2308      	movs	r3, #8
 80051ce:	77fb      	strb	r3, [r7, #31]
 80051d0:	e042      	b.n	8005258 <UART_SetConfig+0x348>
 80051d2:	bf00      	nop
 80051d4:	efff69f3 	.word	0xefff69f3
 80051d8:	40011000 	.word	0x40011000
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40004400 	.word	0x40004400
 80051e4:	40004800 	.word	0x40004800
 80051e8:	40004c00 	.word	0x40004c00
 80051ec:	40005000 	.word	0x40005000
 80051f0:	40011400 	.word	0x40011400
 80051f4:	40007800 	.word	0x40007800
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e02c      	b.n	8005258 <UART_SetConfig+0x348>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a72      	ldr	r2, [pc, #456]	@ (80053cc <UART_SetConfig+0x4bc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d125      	bne.n	8005254 <UART_SetConfig+0x344>
 8005208:	4b71      	ldr	r3, [pc, #452]	@ (80053d0 <UART_SetConfig+0x4c0>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005212:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005216:	d017      	beq.n	8005248 <UART_SetConfig+0x338>
 8005218:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800521c:	d817      	bhi.n	800524e <UART_SetConfig+0x33e>
 800521e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005222:	d00b      	beq.n	800523c <UART_SetConfig+0x32c>
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005228:	d811      	bhi.n	800524e <UART_SetConfig+0x33e>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <UART_SetConfig+0x326>
 800522e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005232:	d006      	beq.n	8005242 <UART_SetConfig+0x332>
 8005234:	e00b      	b.n	800524e <UART_SetConfig+0x33e>
 8005236:	2300      	movs	r3, #0
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e00d      	b.n	8005258 <UART_SetConfig+0x348>
 800523c:	2302      	movs	r3, #2
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e00a      	b.n	8005258 <UART_SetConfig+0x348>
 8005242:	2304      	movs	r3, #4
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e007      	b.n	8005258 <UART_SetConfig+0x348>
 8005248:	2308      	movs	r3, #8
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e004      	b.n	8005258 <UART_SetConfig+0x348>
 800524e:	2310      	movs	r3, #16
 8005250:	77fb      	strb	r3, [r7, #31]
 8005252:	e001      	b.n	8005258 <UART_SetConfig+0x348>
 8005254:	2310      	movs	r3, #16
 8005256:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005260:	d15b      	bne.n	800531a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	2b08      	cmp	r3, #8
 8005266:	d828      	bhi.n	80052ba <UART_SetConfig+0x3aa>
 8005268:	a201      	add	r2, pc, #4	@ (adr r2, 8005270 <UART_SetConfig+0x360>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	08005295 	.word	0x08005295
 8005274:	0800529d 	.word	0x0800529d
 8005278:	080052a5 	.word	0x080052a5
 800527c:	080052bb 	.word	0x080052bb
 8005280:	080052ab 	.word	0x080052ab
 8005284:	080052bb 	.word	0x080052bb
 8005288:	080052bb 	.word	0x080052bb
 800528c:	080052bb 	.word	0x080052bb
 8005290:	080052b3 	.word	0x080052b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005294:	f7fe fe46 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 8005298:	61b8      	str	r0, [r7, #24]
        break;
 800529a:	e013      	b.n	80052c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800529c:	f7fe fe56 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 80052a0:	61b8      	str	r0, [r7, #24]
        break;
 80052a2:	e00f      	b.n	80052c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a4:	4b4b      	ldr	r3, [pc, #300]	@ (80053d4 <UART_SetConfig+0x4c4>)
 80052a6:	61bb      	str	r3, [r7, #24]
        break;
 80052a8:	e00c      	b.n	80052c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052aa:	f7fe fd29 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 80052ae:	61b8      	str	r0, [r7, #24]
        break;
 80052b0:	e008      	b.n	80052c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052b6:	61bb      	str	r3, [r7, #24]
        break;
 80052b8:	e004      	b.n	80052c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	77bb      	strb	r3, [r7, #30]
        break;
 80052c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d074      	beq.n	80053b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	441a      	add	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d916      	bls.n	8005314 <UART_SetConfig+0x404>
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ec:	d212      	bcs.n	8005314 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f023 030f 	bic.w	r3, r3, #15
 80052f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	b29a      	uxth	r2, r3
 8005304:	89fb      	ldrh	r3, [r7, #14]
 8005306:	4313      	orrs	r3, r2
 8005308:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	89fa      	ldrh	r2, [r7, #14]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	e04f      	b.n	80053b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	77bb      	strb	r3, [r7, #30]
 8005318:	e04c      	b.n	80053b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d828      	bhi.n	8005372 <UART_SetConfig+0x462>
 8005320:	a201      	add	r2, pc, #4	@ (adr r2, 8005328 <UART_SetConfig+0x418>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800534d 	.word	0x0800534d
 800532c:	08005355 	.word	0x08005355
 8005330:	0800535d 	.word	0x0800535d
 8005334:	08005373 	.word	0x08005373
 8005338:	08005363 	.word	0x08005363
 800533c:	08005373 	.word	0x08005373
 8005340:	08005373 	.word	0x08005373
 8005344:	08005373 	.word	0x08005373
 8005348:	0800536b 	.word	0x0800536b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800534c:	f7fe fdea 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 8005350:	61b8      	str	r0, [r7, #24]
        break;
 8005352:	e013      	b.n	800537c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005354:	f7fe fdfa 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8005358:	61b8      	str	r0, [r7, #24]
        break;
 800535a:	e00f      	b.n	800537c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800535c:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <UART_SetConfig+0x4c4>)
 800535e:	61bb      	str	r3, [r7, #24]
        break;
 8005360:	e00c      	b.n	800537c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005362:	f7fe fccd 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8005366:	61b8      	str	r0, [r7, #24]
        break;
 8005368:	e008      	b.n	800537c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800536e:	61bb      	str	r3, [r7, #24]
        break;
 8005370:	e004      	b.n	800537c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	77bb      	strb	r3, [r7, #30]
        break;
 800537a:	bf00      	nop
    }

    if (pclk != 0U)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d018      	beq.n	80053b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	085a      	lsrs	r2, r3, #1
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	441a      	add	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b0f      	cmp	r3, #15
 800539a:	d909      	bls.n	80053b0 <UART_SetConfig+0x4a0>
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a2:	d205      	bcs.n	80053b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60da      	str	r2, [r3, #12]
 80053ae:	e001      	b.n	80053b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40007c00 	.word	0x40007c00
 80053d0:	40023800 	.word	0x40023800
 80053d4:	00f42400 	.word	0x00f42400

080053d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01a      	beq.n	80054ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054d6:	d10a      	bne.n	80054ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08c      	sub	sp, #48	@ 0x30
 8005520:	af02      	add	r7, sp, #8
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800552c:	f7fc f9ba 	bl	80018a4 <HAL_GetTick>
 8005530:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b08      	cmp	r3, #8
 800553e:	d12e      	bne.n	800559e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005540:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	2200      	movs	r2, #0
 800554a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f83b 	bl	80055ca <UART_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d021      	beq.n	800559e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	60fb      	str	r3, [r7, #12]
   return(result);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	69b9      	ldr	r1, [r7, #24]
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	617b      	str	r3, [r7, #20]
   return(result);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e6      	bne.n	800555a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e011      	b.n	80055c2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3728      	adds	r7, #40	@ 0x28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	603b      	str	r3, [r7, #0]
 80055d6:	4613      	mov	r3, r2
 80055d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055da:	e04f      	b.n	800567c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d04b      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e4:	f7fc f95e 	bl	80018a4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <UART_WaitOnFlagUntilTimeout+0x30>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e04e      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d037      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0xb2>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b80      	cmp	r3, #128	@ 0x80
 8005610:	d034      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0xb2>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b40      	cmp	r3, #64	@ 0x40
 8005616:	d031      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b08      	cmp	r3, #8
 8005624:	d110      	bne.n	8005648 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2208      	movs	r2, #8
 800562c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f838 	bl	80056a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2208      	movs	r2, #8
 8005638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e029      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005656:	d111      	bne.n	800567c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005660:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f81e 	bl	80056a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e00f      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	429a      	cmp	r2, r3
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	429a      	cmp	r2, r3
 8005698:	d0a0      	beq.n	80055dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b095      	sub	sp, #84	@ 0x54
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80056cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e6      	bne.n	80056ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005700:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005716:	2b01      	cmp	r3, #1
 8005718:	d118      	bne.n	800574c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	60bb      	str	r3, [r7, #8]
   return(result);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6979      	ldr	r1, [r7, #20]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	613b      	str	r3, [r7, #16]
   return(result);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005760:	bf00      	nop
 8005762:	3754      	adds	r7, #84	@ 0x54
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800576c:	b5b0      	push	{r4, r5, r7, lr}
 800576e:	b08c      	sub	sp, #48	@ 0x30
 8005770:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005772:	4b8f      	ldr	r3, [pc, #572]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005774:	22c0      	movs	r2, #192	@ 0xc0
 8005776:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005778:	4b8d      	ldr	r3, [pc, #564]	@ (80059b0 <MX_LWIP_Init+0x244>)
 800577a:	22a8      	movs	r2, #168	@ 0xa8
 800577c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800577e:	4b8c      	ldr	r3, [pc, #560]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005780:	2201      	movs	r2, #1
 8005782:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 120;
 8005784:	4b8a      	ldr	r3, [pc, #552]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005786:	2278      	movs	r2, #120	@ 0x78
 8005788:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800578a:	4b8a      	ldr	r3, [pc, #552]	@ (80059b4 <MX_LWIP_Init+0x248>)
 800578c:	22ff      	movs	r2, #255	@ 0xff
 800578e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005790:	4b88      	ldr	r3, [pc, #544]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005792:	22ff      	movs	r2, #255	@ 0xff
 8005794:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005796:	4b87      	ldr	r3, [pc, #540]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005798:	22ff      	movs	r2, #255	@ 0xff
 800579a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800579c:	4b85      	ldr	r3, [pc, #532]	@ (80059b4 <MX_LWIP_Init+0x248>)
 800579e:	2200      	movs	r2, #0
 80057a0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80057a2:	4b85      	ldr	r3, [pc, #532]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80057a4:	22c0      	movs	r2, #192	@ 0xc0
 80057a6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80057a8:	4b83      	ldr	r3, [pc, #524]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80057aa:	22a8      	movs	r2, #168	@ 0xa8
 80057ac:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80057ae:	4b82      	ldr	r3, [pc, #520]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80057b4:	4b80      	ldr	r3, [pc, #512]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80057ba:	2100      	movs	r1, #0
 80057bc:	2000      	movs	r0, #0
 80057be:	f005 ff05 	bl	800b5cc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057c2:	4b7b      	ldr	r3, [pc, #492]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	061a      	lsls	r2, r3, #24
 80057c8:	4b79      	ldr	r3, [pc, #484]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	431a      	orrs	r2, r3
 80057d0:	4b77      	ldr	r3, [pc, #476]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057d2:	789b      	ldrb	r3, [r3, #2]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	4313      	orrs	r3, r2
 80057d8:	4a75      	ldr	r2, [pc, #468]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057da:	78d2      	ldrb	r2, [r2, #3]
 80057dc:	4313      	orrs	r3, r2
 80057de:	061a      	lsls	r2, r3, #24
 80057e0:	4b73      	ldr	r3, [pc, #460]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	0619      	lsls	r1, r3, #24
 80057e6:	4b72      	ldr	r3, [pc, #456]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	4319      	orrs	r1, r3
 80057ee:	4b70      	ldr	r3, [pc, #448]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057f0:	789b      	ldrb	r3, [r3, #2]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	430b      	orrs	r3, r1
 80057f6:	496e      	ldr	r1, [pc, #440]	@ (80059b0 <MX_LWIP_Init+0x244>)
 80057f8:	78c9      	ldrb	r1, [r1, #3]
 80057fa:	430b      	orrs	r3, r1
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005802:	431a      	orrs	r2, r3
 8005804:	4b6a      	ldr	r3, [pc, #424]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	0619      	lsls	r1, r3, #24
 800580a:	4b69      	ldr	r3, [pc, #420]	@ (80059b0 <MX_LWIP_Init+0x244>)
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	4319      	orrs	r1, r3
 8005812:	4b67      	ldr	r3, [pc, #412]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005814:	789b      	ldrb	r3, [r3, #2]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	430b      	orrs	r3, r1
 800581a:	4965      	ldr	r1, [pc, #404]	@ (80059b0 <MX_LWIP_Init+0x244>)
 800581c:	78c9      	ldrb	r1, [r1, #3]
 800581e:	430b      	orrs	r3, r1
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005826:	431a      	orrs	r2, r3
 8005828:	4b61      	ldr	r3, [pc, #388]	@ (80059b0 <MX_LWIP_Init+0x244>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	0619      	lsls	r1, r3, #24
 800582e:	4b60      	ldr	r3, [pc, #384]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	4319      	orrs	r1, r3
 8005836:	4b5e      	ldr	r3, [pc, #376]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005838:	789b      	ldrb	r3, [r3, #2]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	430b      	orrs	r3, r1
 800583e:	495c      	ldr	r1, [pc, #368]	@ (80059b0 <MX_LWIP_Init+0x244>)
 8005840:	78c9      	ldrb	r1, [r1, #3]
 8005842:	430b      	orrs	r3, r1
 8005844:	0e1b      	lsrs	r3, r3, #24
 8005846:	4313      	orrs	r3, r2
 8005848:	4a5c      	ldr	r2, [pc, #368]	@ (80059bc <MX_LWIP_Init+0x250>)
 800584a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800584c:	4b59      	ldr	r3, [pc, #356]	@ (80059b4 <MX_LWIP_Init+0x248>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	061a      	lsls	r2, r3, #24
 8005852:	4b58      	ldr	r3, [pc, #352]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	4b56      	ldr	r3, [pc, #344]	@ (80059b4 <MX_LWIP_Init+0x248>)
 800585c:	789b      	ldrb	r3, [r3, #2]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	4313      	orrs	r3, r2
 8005862:	4a54      	ldr	r2, [pc, #336]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005864:	78d2      	ldrb	r2, [r2, #3]
 8005866:	4313      	orrs	r3, r2
 8005868:	061a      	lsls	r2, r3, #24
 800586a:	4b52      	ldr	r3, [pc, #328]	@ (80059b4 <MX_LWIP_Init+0x248>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	0619      	lsls	r1, r3, #24
 8005870:	4b50      	ldr	r3, [pc, #320]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	4319      	orrs	r1, r3
 8005878:	4b4e      	ldr	r3, [pc, #312]	@ (80059b4 <MX_LWIP_Init+0x248>)
 800587a:	789b      	ldrb	r3, [r3, #2]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	430b      	orrs	r3, r1
 8005880:	494c      	ldr	r1, [pc, #304]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005882:	78c9      	ldrb	r1, [r1, #3]
 8005884:	430b      	orrs	r3, r1
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800588c:	431a      	orrs	r2, r3
 800588e:	4b49      	ldr	r3, [pc, #292]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	0619      	lsls	r1, r3, #24
 8005894:	4b47      	ldr	r3, [pc, #284]	@ (80059b4 <MX_LWIP_Init+0x248>)
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	4319      	orrs	r1, r3
 800589c:	4b45      	ldr	r3, [pc, #276]	@ (80059b4 <MX_LWIP_Init+0x248>)
 800589e:	789b      	ldrb	r3, [r3, #2]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	430b      	orrs	r3, r1
 80058a4:	4943      	ldr	r1, [pc, #268]	@ (80059b4 <MX_LWIP_Init+0x248>)
 80058a6:	78c9      	ldrb	r1, [r1, #3]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058b0:	431a      	orrs	r2, r3
 80058b2:	4b40      	ldr	r3, [pc, #256]	@ (80059b4 <MX_LWIP_Init+0x248>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	0619      	lsls	r1, r3, #24
 80058b8:	4b3e      	ldr	r3, [pc, #248]	@ (80059b4 <MX_LWIP_Init+0x248>)
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	4319      	orrs	r1, r3
 80058c0:	4b3c      	ldr	r3, [pc, #240]	@ (80059b4 <MX_LWIP_Init+0x248>)
 80058c2:	789b      	ldrb	r3, [r3, #2]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	430b      	orrs	r3, r1
 80058c8:	493a      	ldr	r1, [pc, #232]	@ (80059b4 <MX_LWIP_Init+0x248>)
 80058ca:	78c9      	ldrb	r1, [r1, #3]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	0e1b      	lsrs	r3, r3, #24
 80058d0:	4313      	orrs	r3, r2
 80058d2:	4a3b      	ldr	r2, [pc, #236]	@ (80059c0 <MX_LWIP_Init+0x254>)
 80058d4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80058d6:	4b38      	ldr	r3, [pc, #224]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	061a      	lsls	r2, r3, #24
 80058dc:	4b36      	ldr	r3, [pc, #216]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	4b34      	ldr	r3, [pc, #208]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80058e6:	789b      	ldrb	r3, [r3, #2]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	4313      	orrs	r3, r2
 80058ec:	4a32      	ldr	r2, [pc, #200]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80058ee:	78d2      	ldrb	r2, [r2, #3]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	061a      	lsls	r2, r3, #24
 80058f4:	4b30      	ldr	r3, [pc, #192]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	0619      	lsls	r1, r3, #24
 80058fa:	4b2f      	ldr	r3, [pc, #188]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	4319      	orrs	r1, r3
 8005902:	4b2d      	ldr	r3, [pc, #180]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 8005904:	789b      	ldrb	r3, [r3, #2]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	430b      	orrs	r3, r1
 800590a:	492b      	ldr	r1, [pc, #172]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 800590c:	78c9      	ldrb	r1, [r1, #3]
 800590e:	430b      	orrs	r3, r1
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005916:	431a      	orrs	r2, r3
 8005918:	4b27      	ldr	r3, [pc, #156]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	0619      	lsls	r1, r3, #24
 800591e:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	4319      	orrs	r1, r3
 8005926:	4b24      	ldr	r3, [pc, #144]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 8005928:	789b      	ldrb	r3, [r3, #2]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	430b      	orrs	r3, r1
 800592e:	4922      	ldr	r1, [pc, #136]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 8005930:	78c9      	ldrb	r1, [r1, #3]
 8005932:	430b      	orrs	r3, r1
 8005934:	0a1b      	lsrs	r3, r3, #8
 8005936:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800593a:	431a      	orrs	r2, r3
 800593c:	4b1e      	ldr	r3, [pc, #120]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	0619      	lsls	r1, r3, #24
 8005942:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	4319      	orrs	r1, r3
 800594a:	4b1b      	ldr	r3, [pc, #108]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 800594c:	789b      	ldrb	r3, [r3, #2]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	430b      	orrs	r3, r1
 8005952:	4919      	ldr	r1, [pc, #100]	@ (80059b8 <MX_LWIP_Init+0x24c>)
 8005954:	78c9      	ldrb	r1, [r1, #3]
 8005956:	430b      	orrs	r3, r1
 8005958:	0e1b      	lsrs	r3, r3, #24
 800595a:	4313      	orrs	r3, r2
 800595c:	4a19      	ldr	r2, [pc, #100]	@ (80059c4 <MX_LWIP_Init+0x258>)
 800595e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005960:	4b19      	ldr	r3, [pc, #100]	@ (80059c8 <MX_LWIP_Init+0x25c>)
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	4b19      	ldr	r3, [pc, #100]	@ (80059cc <MX_LWIP_Init+0x260>)
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4b15      	ldr	r3, [pc, #84]	@ (80059c4 <MX_LWIP_Init+0x258>)
 800596e:	4a14      	ldr	r2, [pc, #80]	@ (80059c0 <MX_LWIP_Init+0x254>)
 8005970:	4912      	ldr	r1, [pc, #72]	@ (80059bc <MX_LWIP_Init+0x250>)
 8005972:	4817      	ldr	r0, [pc, #92]	@ (80059d0 <MX_LWIP_Init+0x264>)
 8005974:	f006 fbf4 	bl	800c160 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005978:	4815      	ldr	r0, [pc, #84]	@ (80059d0 <MX_LWIP_Init+0x264>)
 800597a:	f006 fda3 	bl	800c4c4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800597e:	4814      	ldr	r0, [pc, #80]	@ (80059d0 <MX_LWIP_Init+0x264>)
 8005980:	f006 fdb0 	bl	800c4e4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005984:	4913      	ldr	r1, [pc, #76]	@ (80059d4 <MX_LWIP_Init+0x268>)
 8005986:	4812      	ldr	r0, [pc, #72]	@ (80059d0 <MX_LWIP_Init+0x264>)
 8005988:	f006 feae 	bl	800c6e8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800598c:	4b12      	ldr	r3, [pc, #72]	@ (80059d8 <MX_LWIP_Init+0x26c>)
 800598e:	1d3c      	adds	r4, r7, #4
 8005990:	461d      	mov	r5, r3
 8005992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800599a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	490b      	ldr	r1, [pc, #44]	@ (80059d0 <MX_LWIP_Init+0x264>)
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fdcb 	bl	800653e <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80059a8:	bf00      	nop
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bdb0      	pop	{r4, r5, r7, pc}
 80059b0:	20000604 	.word	0x20000604
 80059b4:	20000608 	.word	0x20000608
 80059b8:	2000060c 	.word	0x2000060c
 80059bc:	200005f8 	.word	0x200005f8
 80059c0:	200005fc 	.word	0x200005fc
 80059c4:	20000600 	.word	0x20000600
 80059c8:	0800b4dd 	.word	0x0800b4dd
 80059cc:	08005f75 	.word	0x08005f75
 80059d0:	200005c4 	.word	0x200005c4
 80059d4:	080059dd 	.word	0x080059dd
 80059d8:	0801795c 	.word	0x0801795c

080059dc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005a02:	2320      	movs	r3, #32
 8005a04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a06:	f3bf 8f4f 	dsb	sy
}
 8005a0a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005a0c:	e00b      	b.n	8005a26 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a44 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dcf0      	bgt.n	8005a0e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005a2c:	f3bf 8f4f 	dsb	sy
}
 8005a30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a32:	f3bf 8f6f 	isb	sy
}
 8005a36:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	e000ed00 	.word	0xe000ed00

08005a48 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005a50:	4b04      	ldr	r3, [pc, #16]	@ (8005a64 <HAL_ETH_RxCpltCallback+0x1c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fefb 	bl	8006850 <osSemaphoreRelease>
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20004f9c 	.word	0x20004f9c

08005a68 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <HAL_ETH_TxCpltCallback+0x1c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 feeb 	bl	8006850 <osSemaphoreRelease>
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20004fa0 	.word	0x20004fa0

08005a88 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fc fe6e 	bl	8002772 <HAL_ETH_GetDMAError>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9c:	2b80      	cmp	r3, #128	@ 0x80
 8005a9e:	d104      	bne.n	8005aaa <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005aa0:	4b04      	ldr	r3, [pc, #16]	@ (8005ab4 <HAL_ETH_ErrorCallback+0x2c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fed3 	bl	8006850 <osSemaphoreRelease>
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20004f9c 	.word	0x20004f9c

08005ab8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005ab8:	b5b0      	push	{r4, r5, r7, lr}
 8005aba:	b0b4      	sub	sp, #208	@ 0xd0
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8005ad2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005ad6:	2264      	movs	r2, #100	@ 0x64
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f010 ff67 	bl	80169ae <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005ae0:	4b9f      	ldr	r3, [pc, #636]	@ (8005d60 <low_level_init+0x2a8>)
 8005ae2:	4aa0      	ldr	r2, [pc, #640]	@ (8005d64 <low_level_init+0x2ac>)
 8005ae4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x80;
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x34;
 8005aec:	2334      	movs	r3, #52	@ 0x34
 8005aee:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0x28;
 8005af2:	2328      	movs	r3, #40	@ 0x28
 8005af4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x74;
 8005af8:	2374      	movs	r3, #116	@ 0x74
 8005afa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0xA5;
 8005afe:	23a5      	movs	r3, #165	@ 0xa5
 8005b00:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0xCB;
 8005b04:	23cb      	movs	r3, #203	@ 0xcb
 8005b06:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8005b0a:	4a95      	ldr	r2, [pc, #596]	@ (8005d60 <low_level_init+0x2a8>)
 8005b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005b10:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005b12:	4b93      	ldr	r3, [pc, #588]	@ (8005d60 <low_level_init+0x2a8>)
 8005b14:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005b18:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005b1a:	4b91      	ldr	r3, [pc, #580]	@ (8005d60 <low_level_init+0x2a8>)
 8005b1c:	4a92      	ldr	r2, [pc, #584]	@ (8005d68 <low_level_init+0x2b0>)
 8005b1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005b20:	4b8f      	ldr	r3, [pc, #572]	@ (8005d60 <low_level_init+0x2a8>)
 8005b22:	4a92      	ldr	r2, [pc, #584]	@ (8005d6c <low_level_init+0x2b4>)
 8005b24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8005b26:	4b8e      	ldr	r3, [pc, #568]	@ (8005d60 <low_level_init+0x2a8>)
 8005b28:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005b2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b2e:	488c      	ldr	r0, [pc, #560]	@ (8005d60 <low_level_init+0x2a8>)
 8005b30:	f7fb ffd6 	bl	8001ae0 <HAL_ETH_Init>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005b3a:	2238      	movs	r2, #56	@ 0x38
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	488c      	ldr	r0, [pc, #560]	@ (8005d70 <low_level_init+0x2b8>)
 8005b40:	f010 ff35 	bl	80169ae <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005b44:	4b8a      	ldr	r3, [pc, #552]	@ (8005d70 <low_level_init+0x2b8>)
 8005b46:	2221      	movs	r2, #33	@ 0x21
 8005b48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005b4a:	4b89      	ldr	r3, [pc, #548]	@ (8005d70 <low_level_init+0x2b8>)
 8005b4c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005b50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005b52:	4b87      	ldr	r3, [pc, #540]	@ (8005d70 <low_level_init+0x2b8>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005b58:	4886      	ldr	r0, [pc, #536]	@ (8005d74 <low_level_init+0x2bc>)
 8005b5a:	f006 f9bb 	bl	800bed4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2206      	movs	r2, #6
 8005b62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b66:	4b7e      	ldr	r3, [pc, #504]	@ (8005d60 <low_level_init+0x2a8>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005b72:	4b7b      	ldr	r3, [pc, #492]	@ (8005d60 <low_level_init+0x2a8>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	785a      	ldrb	r2, [r3, #1]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005b7e:	4b78      	ldr	r3, [pc, #480]	@ (8005d60 <low_level_init+0x2a8>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	789a      	ldrb	r2, [r3, #2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005b8a:	4b75      	ldr	r3, [pc, #468]	@ (8005d60 <low_level_init+0x2a8>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	78da      	ldrb	r2, [r3, #3]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005b96:	4b72      	ldr	r3, [pc, #456]	@ (8005d60 <low_level_init+0x2a8>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	791a      	ldrb	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d60 <low_level_init+0x2a8>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	795a      	ldrb	r2, [r3, #5]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005bb4:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bbc:	f043 030a 	orr.w	r3, r3, #10
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bcc:	2300      	movs	r3, #0
 8005bce:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8005bd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fdba 	bl	8006750 <osSemaphoreCreate>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4a66      	ldr	r2, [pc, #408]	@ (8005d78 <low_level_init+0x2c0>)
 8005be0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005be2:	2300      	movs	r3, #0
 8005be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be6:	2300      	movs	r3, #0
 8005be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8005bea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fdad 	bl	8006750 <osSemaphoreCreate>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4a60      	ldr	r2, [pc, #384]	@ (8005d7c <low_level_init+0x2c4>)
 8005bfa:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8005bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8005d78 <low_level_init+0x2c0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fdd6 	bl	80067b4 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8005c08:	4b5c      	ldr	r3, [pc, #368]	@ (8005d7c <low_level_init+0x2c4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fdd0 	bl	80067b4 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005c14:	4b5a      	ldr	r3, [pc, #360]	@ (8005d80 <low_level_init+0x2c8>)
 8005c16:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005c28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fc85 	bl	800653e <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005c34:	4953      	ldr	r1, [pc, #332]	@ (8005d84 <low_level_init+0x2cc>)
 8005c36:	4854      	ldr	r0, [pc, #336]	@ (8005d88 <low_level_init+0x2d0>)
 8005c38:	f7fb fd0d 	bl	8001656 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005c3c:	4852      	ldr	r0, [pc, #328]	@ (8005d88 <low_level_init+0x2d0>)
 8005c3e:	f7fb fd3c 	bl	80016ba <LAN8742_Init>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d006      	beq.n	8005c56 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f006 fd1d 	bl	800c688 <netif_set_link_down>
    netif_set_down(netif);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f006 fcb4 	bl	800c5bc <netif_set_down>
 8005c54:	e081      	b.n	8005d5a <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005c56:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d165      	bne.n	8005d2a <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005c5e:	484a      	ldr	r0, [pc, #296]	@ (8005d88 <low_level_init+0x2d0>)
 8005c60:	f7fb fd78 	bl	8001754 <LAN8742_GetLinkState>
 8005c64:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	dc06      	bgt.n	8005c7e <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f006 fd09 	bl	800c688 <netif_set_link_down>
      netif_set_down(netif);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f006 fca0 	bl	800c5bc <netif_set_down>
 8005c7c:	e057      	b.n	8005d2e <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8005c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c82:	3b02      	subs	r3, #2
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d82b      	bhi.n	8005ce0 <low_level_init+0x228>
 8005c88:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <low_level_init+0x1d8>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005ca1 	.word	0x08005ca1
 8005c94:	08005cb3 	.word	0x08005cb3
 8005c98:	08005cc3 	.word	0x08005cc3
 8005c9c:	08005cd3 	.word	0x08005cd3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005ca0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005ca8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005cb0:	e01f      	b.n	8005cf2 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005cb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005cc0:	e017      	b.n	8005cf2 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005cc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005cd0:	e00f      	b.n	8005cf2 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005cde:	e008      	b.n	8005cf2 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8005ce0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8005ce8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8005cf0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005cf2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4819      	ldr	r0, [pc, #100]	@ (8005d60 <low_level_init+0x2a8>)
 8005cfa:	f7fc fbd9 	bl	80024b0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d02:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8005d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d08:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005d0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4813      	ldr	r0, [pc, #76]	@ (8005d60 <low_level_init+0x2a8>)
 8005d12:	f7fc fcc4 	bl	800269e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8005d16:	4812      	ldr	r0, [pc, #72]	@ (8005d60 <low_level_init+0x2a8>)
 8005d18:	f7fb ff7c 	bl	8001c14 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f006 fbe1 	bl	800c4e4 <netif_set_up>
    netif_set_link_up(netif);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f006 fc7c 	bl	800c620 <netif_set_link_up>
 8005d28:	e001      	b.n	8005d2e <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8005d2a:	f7fb f809 	bl	8000d40 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8005d2e:	f7fb fde9 	bl	8001904 <HAL_GetREVID>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d38:	d10f      	bne.n	8005d5a <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8005d3a:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <low_level_init+0x2d4>)
 8005d3c:	f107 040c 	add.w	r4, r7, #12
 8005d40:	461d      	mov	r5, r3
 8005d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8005d4e:	f107 030c 	add.w	r3, r7, #12
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fbf2 	bl	800653e <osThreadCreate>
  }
}
 8005d5a:	37d0      	adds	r7, #208	@ 0xd0
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d60:	20004fa4 	.word	0x20004fa4
 8005d64:	40028000 	.word	0x40028000
 8005d68:	2000012c 	.word	0x2000012c
 8005d6c:	2000008c 	.word	0x2000008c
 8005d70:	20005054 	.word	0x20005054
 8005d74:	0801ad74 	.word	0x0801ad74
 8005d78:	20004f9c 	.word	0x20004f9c
 8005d7c:	20004fa0 	.word	0x20004fa0
 8005d80:	08017980 	.word	0x08017980
 8005d84:	2000000c 	.word	0x2000000c
 8005d88:	2000508c 	.word	0x2000508c
 8005d8c:	080179ac 	.word	0x080179ac

08005d90 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b092      	sub	sp, #72	@ 0x48
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005da8:	f107 030c 	add.w	r3, r7, #12
 8005dac:	2230      	movs	r2, #48	@ 0x30
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f010 fdfc 	bl	80169ae <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	2230      	movs	r2, #48	@ 0x30
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f010 fdf5 	bl	80169ae <memset>

  for(q = p; q != NULL; q = q->next)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dc8:	e045      	b.n	8005e56 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d902      	bls.n	8005dd6 <low_level_output+0x46>
      return ERR_IF;
 8005dd0:	f06f 030b 	mvn.w	r3, #11
 8005dd4:	e07f      	b.n	8005ed6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8005dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd8:	6859      	ldr	r1, [r3, #4]
 8005dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	3348      	adds	r3, #72	@ 0x48
 8005de6:	443b      	add	r3, r7
 8005de8:	3b3c      	subs	r3, #60	@ 0x3c
 8005dea:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dee:	895b      	ldrh	r3, [r3, #10]
 8005df0:	4619      	mov	r1, r3
 8005df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005df4:	4613      	mov	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3348      	adds	r3, #72	@ 0x48
 8005dfe:	443b      	add	r3, r7
 8005e00:	3b38      	subs	r3, #56	@ 0x38
 8005e02:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d011      	beq.n	8005e2e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	f107 000c 	add.w	r0, r7, #12
 8005e12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e14:	460b      	mov	r3, r1
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	440b      	add	r3, r1
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	18c1      	adds	r1, r0, r3
 8005e1e:	4613      	mov	r3, r2
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	3348      	adds	r3, #72	@ 0x48
 8005e28:	443b      	add	r3, r7
 8005e2a:	3b34      	subs	r3, #52	@ 0x34
 8005e2c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e38:	4613      	mov	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	3348      	adds	r3, #72	@ 0x48
 8005e42:	443b      	add	r3, r7
 8005e44:	3b34      	subs	r3, #52	@ 0x34
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1b6      	bne.n	8005dca <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	891b      	ldrh	r3, [r3, #8]
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee0 <low_level_output+0x150>)
 8005e64:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005e66:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee0 <low_level_output+0x150>)
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee0 <low_level_output+0x150>)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005e74:	6838      	ldr	r0, [r7, #0]
 8005e76:	f007 f88b 	bl	800cf90 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8005e7a:	4919      	ldr	r1, [pc, #100]	@ (8005ee0 <low_level_output+0x150>)
 8005e7c:	4819      	ldr	r0, [pc, #100]	@ (8005ee4 <low_level_output+0x154>)
 8005e7e:	f7fb ffb9 	bl	8001df4 <HAL_ETH_Transmit_IT>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005e8e:	e01b      	b.n	8005ec8 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8005e90:	4814      	ldr	r0, [pc, #80]	@ (8005ee4 <low_level_output+0x154>)
 8005e92:	f7fc fc61 	bl	8002758 <HAL_ETH_GetError>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8005ea0:	4b11      	ldr	r3, [pc, #68]	@ (8005ee8 <low_level_output+0x158>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fc83 	bl	80067b4 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005eae:	480d      	ldr	r0, [pc, #52]	@ (8005ee4 <low_level_output+0x154>)
 8005eb0:	f7fc f940 	bl	8002134 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8005eb4:	23fe      	movs	r3, #254	@ 0xfe
 8005eb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005eba:	e005      	b.n	8005ec8 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005ebc:	6838      	ldr	r0, [r7, #0]
 8005ebe:	f006 ffc1 	bl	800ce44 <pbuf_free>
        errval =  ERR_IF;
 8005ec2:	23f4      	movs	r3, #244	@ 0xf4
 8005ec4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8005ec8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005ecc:	f113 0f02 	cmn.w	r3, #2
 8005ed0:	d0d3      	beq.n	8005e7a <low_level_output+0xea>

  return errval;
 8005ed2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3748      	adds	r7, #72	@ 0x48
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20005054 	.word	0x20005054
 8005ee4:	20004fa4 	.word	0x20004fa4
 8005ee8:	20004fa0 	.word	0x20004fa0

08005eec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ef8:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <low_level_input+0x2c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d105      	bne.n	8005f0c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	4619      	mov	r1, r3
 8005f06:	4805      	ldr	r0, [pc, #20]	@ (8005f1c <low_level_input+0x30>)
 8005f08:	f7fb ffd0 	bl	8001eac <HAL_ETH_ReadData>
  }

  return p;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20004f98 	.word	0x20004f98
 8005f1c:	20004fa4 	.word	0x20004fa4

08005f20 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f30:	4b0f      	ldr	r3, [pc, #60]	@ (8005f70 <ethernetif_input+0x50>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f04f 31ff 	mov.w	r1, #4294967295
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fc3b 	bl	80067b4 <osSemaphoreWait>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f5      	bne.n	8005f30 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005f44:	68b8      	ldr	r0, [r7, #8]
 8005f46:	f7ff ffd1 	bl	8005eec <low_level_input>
 8005f4a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	4798      	blx	r3
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f006 ff6e 	bl	800ce44 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1ea      	bne.n	8005f44 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f6e:	e7df      	b.n	8005f30 <ethernetif_input+0x10>
 8005f70:	20004f9c 	.word	0x20004f9c

08005f74 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <ethernetif_init+0x1c>
 8005f82:	4b0e      	ldr	r3, [pc, #56]	@ (8005fbc <ethernetif_init+0x48>)
 8005f84:	f240 2217 	movw	r2, #535	@ 0x217
 8005f88:	490d      	ldr	r1, [pc, #52]	@ (8005fc0 <ethernetif_init+0x4c>)
 8005f8a:	480e      	ldr	r0, [pc, #56]	@ (8005fc4 <ethernetif_init+0x50>)
 8005f8c:	f7fb f8a0 	bl	80010d0 <printf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2273      	movs	r2, #115	@ 0x73
 8005f94:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2274      	movs	r2, #116	@ 0x74
 8005f9c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <ethernetif_init+0x54>)
 8005fa4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a08      	ldr	r2, [pc, #32]	@ (8005fcc <ethernetif_init+0x58>)
 8005faa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff fd83 	bl	8005ab8 <low_level_init>

  return ERR_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	080179c8 	.word	0x080179c8
 8005fc0:	080179e4 	.word	0x080179e4
 8005fc4:	080179f4 	.word	0x080179f4
 8005fc8:	08014651 	.word	0x08014651
 8005fcc:	08005d91 	.word	0x08005d91

08005fd0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005fdc:	68f9      	ldr	r1, [r7, #12]
 8005fde:	4809      	ldr	r0, [pc, #36]	@ (8006004 <pbuf_free_custom+0x34>)
 8005fe0:	f006 f868 	bl	800c0b4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005fe4:	4b08      	ldr	r3, [pc, #32]	@ (8006008 <pbuf_free_custom+0x38>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d107      	bne.n	8005ffc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <pbuf_free_custom+0x38>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005ff2:	4b06      	ldr	r3, [pc, #24]	@ (800600c <pbuf_free_custom+0x3c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fc2a 	bl	8006850 <osSemaphoreRelease>
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	0801ad74 	.word	0x0801ad74
 8006008:	20004f98 	.word	0x20004f98
 800600c:	20004f9c 	.word	0x20004f9c

08006010 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006014:	f7fb fc46 	bl	80018a4 <HAL_GetTick>
 8006018:	4603      	mov	r3, r0
}
 800601a:	4618      	mov	r0, r3
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08e      	sub	sp, #56	@ 0x38
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a52      	ldr	r2, [pc, #328]	@ (8006188 <HAL_ETH_MspInit+0x168>)
 800603e:	4293      	cmp	r3, r2
 8006040:	f040 809e 	bne.w	8006180 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006044:	4b51      	ldr	r3, [pc, #324]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 8006046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006048:	4a50      	ldr	r2, [pc, #320]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 800604a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800604e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006050:	4b4e      	ldr	r3, [pc, #312]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 8006052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	4b4b      	ldr	r3, [pc, #300]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006060:	4a4a      	ldr	r2, [pc, #296]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 8006062:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006066:	6313      	str	r3, [r2, #48]	@ 0x30
 8006068:	4b48      	ldr	r3, [pc, #288]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 800606a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4b45      	ldr	r3, [pc, #276]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	4a44      	ldr	r2, [pc, #272]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 800607a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800607e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006080:	4b42      	ldr	r3, [pc, #264]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800608c:	4b3f      	ldr	r3, [pc, #252]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	4a3e      	ldr	r2, [pc, #248]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 8006092:	f043 0304 	orr.w	r3, r3, #4
 8006096:	6313      	str	r3, [r2, #48]	@ 0x30
 8006098:	4b3c      	ldr	r3, [pc, #240]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060a4:	4b39      	ldr	r3, [pc, #228]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a8:	4a38      	ldr	r2, [pc, #224]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80060b0:	4b36      	ldr	r3, [pc, #216]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060bc:	4b33      	ldr	r3, [pc, #204]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	4a32      	ldr	r2, [pc, #200]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060c2:	f043 0302 	orr.w	r3, r3, #2
 80060c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c8:	4b30      	ldr	r3, [pc, #192]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060d4:	4b2d      	ldr	r3, [pc, #180]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d8:	4a2c      	ldr	r2, [pc, #176]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060de:	6313      	str	r3, [r2, #48]	@ 0x30
 80060e0:	4b2a      	ldr	r3, [pc, #168]	@ (800618c <HAL_ETH_MspInit+0x16c>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060ec:	2332      	movs	r3, #50	@ 0x32
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f0:	2302      	movs	r3, #2
 80060f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f8:	2303      	movs	r3, #3
 80060fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060fc:	230b      	movs	r3, #11
 80060fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006104:	4619      	mov	r1, r3
 8006106:	4822      	ldr	r0, [pc, #136]	@ (8006190 <HAL_ETH_MspInit+0x170>)
 8006108:	f7fc ff60 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800610c:	2386      	movs	r3, #134	@ 0x86
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006110:	2302      	movs	r3, #2
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006114:	2300      	movs	r3, #0
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006118:	2303      	movs	r3, #3
 800611a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800611c:	230b      	movs	r3, #11
 800611e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006124:	4619      	mov	r1, r3
 8006126:	481b      	ldr	r0, [pc, #108]	@ (8006194 <HAL_ETH_MspInit+0x174>)
 8006128:	f7fc ff50 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800612c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006132:	2302      	movs	r3, #2
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006136:	2300      	movs	r3, #0
 8006138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800613a:	2303      	movs	r3, #3
 800613c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800613e:	230b      	movs	r3, #11
 8006140:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006146:	4619      	mov	r1, r3
 8006148:	4813      	ldr	r0, [pc, #76]	@ (8006198 <HAL_ETH_MspInit+0x178>)
 800614a:	f7fc ff3f 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800614e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006154:	2302      	movs	r3, #2
 8006156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006158:	2300      	movs	r3, #0
 800615a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800615c:	2303      	movs	r3, #3
 800615e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006160:	230b      	movs	r3, #11
 8006162:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006168:	4619      	mov	r1, r3
 800616a:	480c      	ldr	r0, [pc, #48]	@ (800619c <HAL_ETH_MspInit+0x17c>)
 800616c:	f7fc ff2e 	bl	8002fcc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006170:	2200      	movs	r2, #0
 8006172:	2105      	movs	r1, #5
 8006174:	203d      	movs	r0, #61	@ 0x3d
 8006176:	f7fb fc89 	bl	8001a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800617a:	203d      	movs	r0, #61	@ 0x3d
 800617c:	f7fb fca2 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006180:	bf00      	nop
 8006182:	3738      	adds	r7, #56	@ 0x38
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40028000 	.word	0x40028000
 800618c:	40023800 	.word	0x40023800
 8006190:	40020800 	.word	0x40020800
 8006194:	40020000 	.word	0x40020000
 8006198:	40020400 	.word	0x40020400
 800619c:	40021800 	.word	0x40021800

080061a0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80061a4:	4802      	ldr	r0, [pc, #8]	@ (80061b0 <ETH_PHY_IO_Init+0x10>)
 80061a6:	f7fc fa95 	bl	80026d4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20004fa4 	.word	0x20004fa4

080061b4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  return 0;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	68f9      	ldr	r1, [r7, #12]
 80061d6:	4807      	ldr	r0, [pc, #28]	@ (80061f4 <ETH_PHY_IO_ReadReg+0x30>)
 80061d8:	f7fc f8d6 	bl	8002388 <HAL_ETH_ReadPHYRegister>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295
 80061e6:	e000      	b.n	80061ea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20004fa4 	.word	0x20004fa4

080061f8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	68f9      	ldr	r1, [r7, #12]
 800620a:	4807      	ldr	r0, [pc, #28]	@ (8006228 <ETH_PHY_IO_WriteReg+0x30>)
 800620c:	f7fc f907 	bl	800241e <HAL_ETH_WritePHYRegister>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	e000      	b.n	800621e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20004fa4 	.word	0x20004fa4

0800622c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006230:	f7fb fb38 	bl	80018a4 <HAL_GetTick>
 8006234:	4603      	mov	r3, r0
}
 8006236:	4618      	mov	r0, r3
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b0a0      	sub	sp, #128	@ 0x80
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006244:	f107 0308 	add.w	r3, r7, #8
 8006248:	2264      	movs	r2, #100	@ 0x64
 800624a:	2100      	movs	r1, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f010 fbae 	bl	80169ae <memset>
  int32_t PHYLinkState = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800625a:	2300      	movs	r3, #0
 800625c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800625e:	2300      	movs	r3, #0
 8006260:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006266:	483a      	ldr	r0, [pc, #232]	@ (8006350 <ethernet_link_thread+0x114>)
 8006268:	f7fb fa74 	bl	8001754 <LAN8742_GetLinkState>
 800626c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800626e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006270:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006274:	089b      	lsrs	r3, r3, #2
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <ethernet_link_thread+0x5e>
 8006280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006282:	2b01      	cmp	r3, #1
 8006284:	dc09      	bgt.n	800629a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006286:	4833      	ldr	r0, [pc, #204]	@ (8006354 <ethernet_link_thread+0x118>)
 8006288:	f7fb fd34 	bl	8001cf4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800628c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800628e:	f006 f995 	bl	800c5bc <netif_set_down>
    netif_set_link_down(netif);
 8006292:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006294:	f006 f9f8 	bl	800c688 <netif_set_link_down>
 8006298:	e055      	b.n	8006346 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800629a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800629c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d14e      	bne.n	8006346 <ethernet_link_thread+0x10a>
 80062a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	dd4b      	ble.n	8006346 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80062ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062b0:	3b02      	subs	r3, #2
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d82a      	bhi.n	800630c <ethernet_link_thread+0xd0>
 80062b6:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <ethernet_link_thread+0x80>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062df 	.word	0x080062df
 80062c4:	080062ef 	.word	0x080062ef
 80062c8:	080062ff 	.word	0x080062ff
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80062cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80062d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062d8:	2301      	movs	r3, #1
 80062da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062dc:	e017      	b.n	800630e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80062de:	2300      	movs	r3, #0
 80062e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80062e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062e8:	2301      	movs	r3, #1
 80062ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062ec:	e00f      	b.n	800630e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80062ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062f2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80062f4:	2300      	movs	r3, #0
 80062f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80062f8:	2301      	movs	r3, #1
 80062fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80062fc:	e007      	b.n	800630e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80062fe:	2300      	movs	r3, #0
 8006300:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006302:	2300      	movs	r3, #0
 8006304:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006306:	2301      	movs	r3, #1
 8006308:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800630a:	e000      	b.n	800630e <ethernet_link_thread+0xd2>
    default:
      break;
 800630c:	bf00      	nop
    }

    if(linkchanged)
 800630e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d018      	beq.n	8006346 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006314:	f107 0308 	add.w	r3, r7, #8
 8006318:	4619      	mov	r1, r3
 800631a:	480e      	ldr	r0, [pc, #56]	@ (8006354 <ethernet_link_thread+0x118>)
 800631c:	f7fc f8c8 	bl	80024b0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006320:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006322:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006326:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006328:	f107 0308 	add.w	r3, r7, #8
 800632c:	4619      	mov	r1, r3
 800632e:	4809      	ldr	r0, [pc, #36]	@ (8006354 <ethernet_link_thread+0x118>)
 8006330:	f7fc f9b5 	bl	800269e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006334:	4807      	ldr	r0, [pc, #28]	@ (8006354 <ethernet_link_thread+0x118>)
 8006336:	f7fb fc6d 	bl	8001c14 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800633a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800633c:	f006 f8d2 	bl	800c4e4 <netif_set_up>
      netif_set_link_up(netif);
 8006340:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006342:	f006 f96d 	bl	800c620 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006346:	2064      	movs	r0, #100	@ 0x64
 8006348:	f000 f951 	bl	80065ee <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800634c:	e78b      	b.n	8006266 <ethernet_link_thread+0x2a>
 800634e:	bf00      	nop
 8006350:	2000508c 	.word	0x2000508c
 8006354:	20004fa4 	.word	0x20004fa4

08006358 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006360:	4812      	ldr	r0, [pc, #72]	@ (80063ac <HAL_ETH_RxAllocateCallback+0x54>)
 8006362:	f005 fe33 	bl	800bfcc <memp_malloc_pool>
 8006366:	60f8      	str	r0, [r7, #12]
  if (p)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d014      	beq.n	8006398 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f103 0220 	add.w	r2, r3, #32
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a0d      	ldr	r2, [pc, #52]	@ (80063b0 <HAL_ETH_RxAllocateCallback+0x58>)
 800637c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006386:	9201      	str	r2, [sp, #4]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2241      	movs	r2, #65	@ 0x41
 800638e:	2100      	movs	r1, #0
 8006390:	2000      	movs	r0, #0
 8006392:	f006 fb9d 	bl	800cad0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006396:	e005      	b.n	80063a4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006398:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	0801ad74 	.word	0x0801ad74
 80063b0:	08005fd1 	.word	0x08005fd1
 80063b4:	20004f98 	.word	0x20004f98

080063b8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3b20      	subs	r3, #32
 80063d6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2200      	movs	r2, #0
 80063e2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	887a      	ldrh	r2, [r7, #2]
 80063e8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	e003      	b.n	8006402 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	e009      	b.n	8006424 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	891a      	ldrh	r2, [r3, #8]
 8006414:	887b      	ldrh	r3, [r7, #2]
 8006416:	4413      	add	r3, r2
 8006418:	b29a      	uxth	r2, r3
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f2      	bne.n	8006410 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fade 	bl	80059f0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006434:	bf00      	nop
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f006 fcfd 	bl	800ce44 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 800645c:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <RMII_Thread+0x60>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8006468:	2000      	movs	r0, #0
 800646a:	f000 f8b4 	bl	80065d6 <osThreadTerminate>
 800646e:	e7f5      	b.n	800645c <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8006470:	4b10      	ldr	r3, [pc, #64]	@ (80064b4 <RMII_Thread+0x60>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8006478:	2b0a      	cmp	r3, #10
 800647a:	d916      	bls.n	80064aa <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800647c:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <RMII_Thread+0x64>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a0d      	ldr	r2, [pc, #52]	@ (80064b8 <RMII_Thread+0x64>)
 8006482:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006486:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8006488:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <RMII_Thread+0x64>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4a0a      	ldr	r2, [pc, #40]	@ (80064b8 <RMII_Thread+0x64>)
 800648e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006492:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8006494:	4b07      	ldr	r3, [pc, #28]	@ (80064b4 <RMII_Thread+0x60>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800649c:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <RMII_Thread+0x60>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80064a8:	e7d8      	b.n	800645c <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80064aa:	20c8      	movs	r0, #200	@ 0xc8
 80064ac:	f000 f89f 	bl	80065ee <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80064b0:	e7d4      	b.n	800645c <RMII_Thread+0x8>
 80064b2:	bf00      	nop
 80064b4:	20004fa4 	.word	0x20004fa4
 80064b8:	40013800 	.word	0x40013800

080064bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ce:	2b84      	cmp	r3, #132	@ 0x84
 80064d0:	d005      	beq.n	80064de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	3303      	adds	r3, #3
 80064dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064de:	68fb      	ldr	r3, [r7, #12]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f2:	f3ef 8305 	mrs	r3, IPSR
 80064f6:	607b      	str	r3, [r7, #4]
  return(result);
 80064f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bf14      	ite	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	2300      	moveq	r3, #0
 8006502:	b2db      	uxtb	r3, r3
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006514:	f001 fe52 	bl	80081bc <vTaskStartScheduler>
  
  return osOK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	bd80      	pop	{r7, pc}

0800651e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006522:	f7ff ffe3 	bl	80064ec <inHandlerMode>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800652c:	f001 ff74 	bl	8008418 <xTaskGetTickCountFromISR>
 8006530:	4603      	mov	r3, r0
 8006532:	e002      	b.n	800653a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006534:	f001 ff60 	bl	80083f8 <xTaskGetTickCount>
 8006538:	4603      	mov	r3, r0
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	bd80      	pop	{r7, pc}

0800653e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800653e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006540:	b089      	sub	sp, #36	@ 0x24
 8006542:	af04      	add	r7, sp, #16
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d020      	beq.n	8006592 <osThreadCreate+0x54>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01c      	beq.n	8006592 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685c      	ldr	r4, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691e      	ldr	r6, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff ffa6 	bl	80064bc <makeFreeRtosPriority>
 8006570:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800657a:	9202      	str	r2, [sp, #8]
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	9100      	str	r1, [sp, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4632      	mov	r2, r6
 8006584:	4629      	mov	r1, r5
 8006586:	4620      	mov	r0, r4
 8006588:	f001 fb90 	bl	8007cac <xTaskCreateStatic>
 800658c:	4603      	mov	r3, r0
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e01c      	b.n	80065cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685c      	ldr	r4, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800659e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ff88 	bl	80064bc <makeFreeRtosPriority>
 80065ac:	4602      	mov	r2, r0
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	9200      	str	r2, [sp, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	4632      	mov	r2, r6
 80065ba:	4629      	mov	r1, r5
 80065bc:	4620      	mov	r0, r4
 80065be:	f001 fbdb 	bl	8007d78 <xTaskCreate>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065d6 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fd22 	bl	8008028 <vTaskDelete>
  return osOK;
 80065e4:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <osDelay+0x16>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	e000      	b.n	8006606 <osDelay+0x18>
 8006604:	2301      	movs	r3, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f001 fda0 	bl	800814c <vTaskDelay>
  
  return osOK;
 800660c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4619      	mov	r1, r3
 800662c:	2001      	movs	r0, #1
 800662e:	f000 fc9a 	bl	8006f66 <xQueueCreateMutexStatic>
 8006632:	4603      	mov	r3, r0
 8006634:	e003      	b.n	800663e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006636:	2001      	movs	r0, #1
 8006638:	f000 fc7d 	bl	8006f36 <xQueueCreateMutex>
 800663c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <osMutexWait+0x18>
    return osErrorParameter;
 800665c:	2380      	movs	r3, #128	@ 0x80
 800665e:	e03a      	b.n	80066d6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d103      	bne.n	8006674 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800666c:	f04f 33ff 	mov.w	r3, #4294967295
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e009      	b.n	8006688 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <osMutexWait+0x40>
      ticks = 1;
 8006684:	2301      	movs	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006688:	f7ff ff30 	bl	80064ec <inHandlerMode>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d017      	beq.n	80066c2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	461a      	mov	r2, r3
 8006698:	2100      	movs	r1, #0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 f8c4 	bl	8007828 <xQueueReceiveFromISR>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d001      	beq.n	80066aa <osMutexWait+0x62>
      return osErrorOS;
 80066a6:	23ff      	movs	r3, #255	@ 0xff
 80066a8:	e015      	b.n	80066d6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d011      	beq.n	80066d4 <osMutexWait+0x8c>
 80066b0:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <osMutexWait+0x98>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	e008      	b.n	80066d4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 ff97 	bl	80075f8 <xQueueSemaphoreTake>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d001      	beq.n	80066d4 <osMutexWait+0x8c>
    return osErrorOS;
 80066d0:	23ff      	movs	r3, #255	@ 0xff
 80066d2:	e000      	b.n	80066d6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80066f4:	f7ff fefa 	bl	80064ec <inHandlerMode>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fdf6 	bl	80072f6 <xQueueGiveFromISR>
 800670a:	4603      	mov	r3, r0
 800670c:	2b01      	cmp	r3, #1
 800670e:	d001      	beq.n	8006714 <osMutexRelease+0x30>
      return osErrorOS;
 8006710:	23ff      	movs	r3, #255	@ 0xff
 8006712:	e017      	b.n	8006744 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d013      	beq.n	8006742 <osMutexRelease+0x5e>
 800671a:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <osMutexRelease+0x68>)
 800671c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	e00a      	b.n	8006742 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800672c:	2300      	movs	r3, #0
 800672e:	2200      	movs	r2, #0
 8006730:	2100      	movs	r1, #0
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fc32 	bl	8006f9c <xQueueGenericSend>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d001      	beq.n	8006742 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800673e:	23ff      	movs	r3, #255	@ 0xff
 8006740:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00f      	beq.n	8006782 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10a      	bne.n	800677e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2203      	movs	r2, #3
 800676e:	9200      	str	r2, [sp, #0]
 8006770:	2200      	movs	r2, #0
 8006772:	2100      	movs	r1, #0
 8006774:	2001      	movs	r0, #1
 8006776:	f000 fadb 	bl	8006d30 <xQueueGenericCreateStatic>
 800677a:	4603      	mov	r3, r0
 800677c:	e016      	b.n	80067ac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	e014      	b.n	80067ac <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d110      	bne.n	80067aa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006788:	2203      	movs	r2, #3
 800678a:	2100      	movs	r1, #0
 800678c:	2001      	movs	r0, #1
 800678e:	f000 fb56 	bl	8006e3e <xQueueGenericCreate>
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <osSemaphoreCreate+0x56>
 800679a:	2300      	movs	r3, #0
 800679c:	2200      	movs	r2, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fbfb 	bl	8006f9c <xQueueGenericSend>
      return sema;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	e000      	b.n	80067ac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80067aa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	e03a      	b.n	8006842 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d103      	bne.n	80067e0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80067d8:	f04f 33ff 	mov.w	r3, #4294967295
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	e009      	b.n	80067f4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <osSemaphoreWait+0x40>
      ticks = 1;
 80067f0:	2301      	movs	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80067f4:	f7ff fe7a 	bl	80064ec <inHandlerMode>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d017      	beq.n	800682e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80067fe:	f107 0308 	add.w	r3, r7, #8
 8006802:	461a      	mov	r2, r3
 8006804:	2100      	movs	r1, #0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 f80e 	bl	8007828 <xQueueReceiveFromISR>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d001      	beq.n	8006816 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006812:	23ff      	movs	r3, #255	@ 0xff
 8006814:	e015      	b.n	8006842 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d011      	beq.n	8006840 <osSemaphoreWait+0x8c>
 800681c:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <osSemaphoreWait+0x98>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	e008      	b.n	8006840 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fee1 	bl	80075f8 <xQueueSemaphoreTake>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d001      	beq.n	8006840 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800683c:	23ff      	movs	r3, #255	@ 0xff
 800683e:	e000      	b.n	8006842 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006860:	f7ff fe44 	bl	80064ec <inHandlerMode>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d016      	beq.n	8006898 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd40 	bl	80072f6 <xQueueGiveFromISR>
 8006876:	4603      	mov	r3, r0
 8006878:	2b01      	cmp	r3, #1
 800687a:	d001      	beq.n	8006880 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800687c:	23ff      	movs	r3, #255	@ 0xff
 800687e:	e017      	b.n	80068b0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d013      	beq.n	80068ae <osSemaphoreRelease+0x5e>
 8006886:	4b0c      	ldr	r3, [pc, #48]	@ (80068b8 <osSemaphoreRelease+0x68>)
 8006888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	e00a      	b.n	80068ae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006898:	2300      	movs	r3, #0
 800689a:	2200      	movs	r2, #0
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb7c 	bl	8006f9c <xQueueGenericSend>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d001      	beq.n	80068ae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80068aa:	23ff      	movs	r3, #255	@ 0xff
 80068ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80068c4:	f7ff fe12 	bl	80064ec <inHandlerMode>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80068ce:	2382      	movs	r3, #130	@ 0x82
 80068d0:	e003      	b.n	80068da <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 f872 	bl	80079bc <vQueueDelete>

  return osOK; 
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80068e2:	b590      	push	{r4, r7, lr}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af02      	add	r7, sp, #8
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d011      	beq.n	8006918 <osMessageCreate+0x36>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00d      	beq.n	8006918 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6859      	ldr	r1, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2400      	movs	r4, #0
 800690e:	9400      	str	r4, [sp, #0]
 8006910:	f000 fa0e 	bl	8006d30 <xQueueGenericCreateStatic>
 8006914:	4603      	mov	r3, r0
 8006916:	e008      	b.n	800692a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	4619      	mov	r1, r3
 8006924:	f000 fa8b 	bl	8006e3e <xQueueGenericCreate>
 8006928:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	bd90      	pop	{r4, r7, pc}
	...

08006934 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006940:	2300      	movs	r3, #0
 8006942:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <osMessagePut+0x1e>
    ticks = 1;
 800694e:	2301      	movs	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006952:	f7ff fdcb 	bl	80064ec <inHandlerMode>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d018      	beq.n	800698e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800695c:	f107 0210 	add.w	r2, r7, #16
 8006960:	f107 0108 	add.w	r1, r7, #8
 8006964:	2300      	movs	r3, #0
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fc22 	bl	80071b0 <xQueueGenericSendFromISR>
 800696c:	4603      	mov	r3, r0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d001      	beq.n	8006976 <osMessagePut+0x42>
      return osErrorOS;
 8006972:	23ff      	movs	r3, #255	@ 0xff
 8006974:	e018      	b.n	80069a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d014      	beq.n	80069a6 <osMessagePut+0x72>
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <osMessagePut+0x7c>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	e00b      	b.n	80069a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800698e:	f107 0108 	add.w	r1, r7, #8
 8006992:	2300      	movs	r3, #0
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fb00 	bl	8006f9c <xQueueGenericSend>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d001      	beq.n	80069a6 <osMessagePut+0x72>
      return osErrorOS;
 80069a2:	23ff      	movs	r3, #255	@ 0xff
 80069a4:	e000      	b.n	80069a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b08b      	sub	sp, #44	@ 0x2c
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80069ce:	2380      	movs	r3, #128	@ 0x80
 80069d0:	617b      	str	r3, [r7, #20]
    return event;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	461c      	mov	r4, r3
 80069d6:	f107 0314 	add.w	r3, r7, #20
 80069da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80069e2:	e054      	b.n	8006a8e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d103      	bne.n	80069fc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80069f4:	f04f 33ff 	mov.w	r3, #4294967295
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fa:	e009      	b.n	8006a10 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d006      	beq.n	8006a10 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <osMessageGet+0x5c>
      ticks = 1;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006a10:	f7ff fd6c 	bl	80064ec <inHandlerMode>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01c      	beq.n	8006a54 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006a1a:	f107 0220 	add.w	r2, r7, #32
 8006a1e:	f107 0314 	add.w	r3, r7, #20
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	68b8      	ldr	r0, [r7, #8]
 8006a28:	f000 fefe 	bl	8007828 <xQueueReceiveFromISR>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d102      	bne.n	8006a38 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006a32:	2310      	movs	r3, #16
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	e001      	b.n	8006a3c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01d      	beq.n	8006a7e <osMessageGet+0xca>
 8006a42:	4b15      	ldr	r3, [pc, #84]	@ (8006a98 <osMessageGet+0xe4>)
 8006a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	e014      	b.n	8006a7e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	3304      	adds	r3, #4
 8006a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	68b8      	ldr	r0, [r7, #8]
 8006a60:	f000 fce2 	bl	8007428 <xQueueReceive>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d102      	bne.n	8006a70 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006a6a:	2310      	movs	r3, #16
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e006      	b.n	8006a7e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <osMessageGet+0xc6>
 8006a76:	2300      	movs	r3, #0
 8006a78:	e000      	b.n	8006a7c <osMessageGet+0xc8>
 8006a7a:	2340      	movs	r3, #64	@ 0x40
 8006a7c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	461c      	mov	r4, r3
 8006a82:	f107 0314 	add.w	r3, r7, #20
 8006a86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	372c      	adds	r7, #44	@ 0x2c
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}
 8006a96:	bf00      	nop
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006aa4:	f7ff fd22 	bl	80064ec <inHandlerMode>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 ff63 	bl	800797a <uxQueueMessagesWaitingFromISR>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	e003      	b.n	8006ac0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 ff3d 	bl	8007938 <uxQueueMessagesWaiting>
 8006abe:	4603      	mov	r3, r0
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006ad0:	f7ff fd0c 	bl	80064ec <inHandlerMode>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <osMessageDelete+0x16>
    return osErrorISR;
 8006ada:	2382      	movs	r3, #130	@ 0x82
 8006adc:	e003      	b.n	8006ae6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 ff6c 	bl	80079bc <vQueueDelete>

  return osOK; 
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f103 0208 	add.w	r2, r3, #8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f103 0208 	add.w	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f103 0208 	add.w	r2, r3, #8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	601a      	str	r2, [r3, #0]
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d103      	bne.n	8006bb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e00c      	b.n	8006bca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e002      	b.n	8006bbe <vListInsert+0x2e>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d2f6      	bcs.n	8006bb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6892      	ldr	r2, [r2, #8]
 8006c18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6852      	ldr	r2, [r2, #4]
 8006c22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d103      	bne.n	8006c36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	1e5a      	subs	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10d      	bne.n	8006c88 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c70:	b672      	cpsid	i
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	b662      	cpsie	i
 8006c80:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006c88:	f002 fa60 	bl	800914c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c94:	68f9      	ldr	r1, [r7, #12]
 8006c96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	441a      	add	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	22ff      	movs	r2, #255	@ 0xff
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	22ff      	movs	r2, #255	@ 0xff
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d114      	bne.n	8006d08 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01a      	beq.n	8006d1c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3310      	adds	r3, #16
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 fd0a 	bl	8008704 <xTaskRemoveFromEventList>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d012      	beq.n	8006d1c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <xQueueGenericReset+0xd4>)
 8006cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	e009      	b.n	8006d1c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3310      	adds	r3, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff feee 	bl	8006aee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3324      	adds	r3, #36	@ 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fee9 	bl	8006aee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d1c:	f002 fa4c 	bl	80091b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d20:	2301      	movs	r3, #1
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08e      	sub	sp, #56	@ 0x38
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10d      	bne.n	8006d60 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	b672      	cpsid	i
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	b662      	cpsie	i
 8006d58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <xQueueGenericCreateStatic+0x5e>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <xQueueGenericCreateStatic+0x62>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericCreateStatic+0x64>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10d      	bne.n	8006db4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	b672      	cpsid	i
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	b662      	cpsie	i
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <xQueueGenericCreateStatic+0x90>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <xQueueGenericCreateStatic+0x94>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <xQueueGenericCreateStatic+0x96>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10d      	bne.n	8006de6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	b672      	cpsid	i
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	b662      	cpsie	i
 8006dde:	61fb      	str	r3, [r7, #28]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006de6:	2348      	movs	r3, #72	@ 0x48
 8006de8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b48      	cmp	r3, #72	@ 0x48
 8006dee:	d00d      	beq.n	8006e0c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	b672      	cpsid	i
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	b662      	cpsie	i
 8006e04:	61bb      	str	r3, [r7, #24]
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f848 	bl	8006ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3730      	adds	r7, #48	@ 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b08a      	sub	sp, #40	@ 0x28
 8006e42:	af02      	add	r7, sp, #8
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10d      	bne.n	8006e6e <xQueueGenericCreate+0x30>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e56:	b672      	cpsid	i
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	b662      	cpsie	i
 8006e66:	613b      	str	r3, [r7, #16]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	e004      	b.n	8006e84 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3348      	adds	r3, #72	@ 0x48
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f002 fa8d 	bl	80093a8 <pvPortMalloc>
 8006e8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d011      	beq.n	8006eba <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3348      	adds	r3, #72	@ 0x48
 8006e9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ea8:	79fa      	ldrb	r2, [r7, #7]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f805 	bl	8006ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eba:	69bb      	ldr	r3, [r7, #24]
	}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e002      	b.n	8006ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	69b8      	ldr	r0, [r7, #24]
 8006ef6:	f7ff feaf 	bl	8006c58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00e      	beq.n	8006f2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006f22:	2300      	movs	r3, #0
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f837 	bl	8006f9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f40:	2301      	movs	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6939      	ldr	r1, [r7, #16]
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff ff75 	bl	8006e3e <xQueueGenericCreate>
 8006f54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff ffd3 	bl	8006f02 <prvInitialiseMutex>

		return xNewQueue;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
	}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b088      	sub	sp, #32
 8006f6a:	af02      	add	r7, sp, #8
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	6039      	str	r1, [r7, #0]
 8006f70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f72:	2301      	movs	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	2300      	movs	r3, #0
 8006f78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2200      	movs	r2, #0
 8006f82:	6939      	ldr	r1, [r7, #16]
 8006f84:	6978      	ldr	r0, [r7, #20]
 8006f86:	f7ff fed3 	bl	8006d30 <xQueueGenericCreateStatic>
 8006f8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff ffb8 	bl	8006f02 <prvInitialiseMutex>

		return xNewQueue;
 8006f92:	68fb      	ldr	r3, [r7, #12]
	}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08e      	sub	sp, #56	@ 0x38
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006faa:	2300      	movs	r3, #0
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10d      	bne.n	8006fd4 <xQueueGenericSend+0x38>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <xQueueGenericSend+0x46>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <xQueueGenericSend+0x4a>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <xQueueGenericSend+0x4c>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10d      	bne.n	8007008 <xQueueGenericSend+0x6c>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d103      	bne.n	8007016 <xQueueGenericSend+0x7a>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <xQueueGenericSend+0x7e>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <xQueueGenericSend+0x80>
 800701a:	2300      	movs	r3, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <xQueueGenericSend+0xa0>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007024:	b672      	cpsid	i
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	b662      	cpsie	i
 8007034:	623b      	str	r3, [r7, #32]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800703c:	f001 fd30 	bl	8008aa0 <xTaskGetSchedulerState>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <xQueueGenericSend+0xb0>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <xQueueGenericSend+0xb4>
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <xQueueGenericSend+0xb6>
 8007050:	2300      	movs	r3, #0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10d      	bne.n	8007072 <xQueueGenericSend+0xd6>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	b672      	cpsid	i
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	b662      	cpsie	i
 800706a:	61fb      	str	r3, [r7, #28]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007072:	f002 f86b 	bl	800914c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707e:	429a      	cmp	r2, r3
 8007080:	d302      	bcc.n	8007088 <xQueueGenericSend+0xec>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d129      	bne.n	80070dc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800708e:	f000 fcd3 	bl	8007a38 <prvCopyDataToQueue>
 8007092:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d010      	beq.n	80070be <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	3324      	adds	r3, #36	@ 0x24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fb2f 	bl	8008704 <xTaskRemoveFromEventList>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d013      	beq.n	80070d4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070ac:	4b3f      	ldr	r3, [pc, #252]	@ (80071ac <xQueueGenericSend+0x210>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	e00a      	b.n	80070d4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070c4:	4b39      	ldr	r3, [pc, #228]	@ (80071ac <xQueueGenericSend+0x210>)
 80070c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070d4:	f002 f870 	bl	80091b8 <vPortExitCritical>
				return pdPASS;
 80070d8:	2301      	movs	r3, #1
 80070da:	e063      	b.n	80071a4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d103      	bne.n	80070ea <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070e2:	f002 f869 	bl	80091b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e05c      	b.n	80071a4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070f0:	f107 0314 	add.w	r3, r7, #20
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fb6b 	bl	80087d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070fe:	f002 f85b 	bl	80091b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007102:	f001 f8cb 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007106:	f002 f821 	bl	800914c <vPortEnterCritical>
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007110:	b25b      	sxtb	r3, r3
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007116:	d103      	bne.n	8007120 <xQueueGenericSend+0x184>
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007126:	b25b      	sxtb	r3, r3
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712c:	d103      	bne.n	8007136 <xQueueGenericSend+0x19a>
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007136:	f002 f83f 	bl	80091b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800713a:	1d3a      	adds	r2, r7, #4
 800713c:	f107 0314 	add.w	r3, r7, #20
 8007140:	4611      	mov	r1, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fb5a 	bl	80087fc <xTaskCheckForTimeOut>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d124      	bne.n	8007198 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800714e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007150:	f000 fd6a 	bl	8007c28 <prvIsQueueFull>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	3310      	adds	r3, #16
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4611      	mov	r1, r2
 8007162:	4618      	mov	r0, r3
 8007164:	f001 faa6 	bl	80086b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800716a:	f000 fcf5 	bl	8007b58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800716e:	f001 f8a3 	bl	80082b8 <xTaskResumeAll>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f af7c 	bne.w	8007072 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800717a:	4b0c      	ldr	r3, [pc, #48]	@ (80071ac <xQueueGenericSend+0x210>)
 800717c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	e772      	b.n	8007072 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800718c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800718e:	f000 fce3 	bl	8007b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007192:	f001 f891 	bl	80082b8 <xTaskResumeAll>
 8007196:	e76c      	b.n	8007072 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800719a:	f000 fcdd 	bl	8007b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800719e:	f001 f88b 	bl	80082b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3738      	adds	r7, #56	@ 0x38
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	@ 0x38
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	b672      	cpsid	i
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	b662      	cpsie	i
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <xQueueGenericSendFromISR+0x42>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <xQueueGenericSendFromISR+0x46>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <xQueueGenericSendFromISR+0x48>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10d      	bne.n	8007218 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	b672      	cpsid	i
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	b662      	cpsie	i
 8007210:	623b      	str	r3, [r7, #32]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d103      	bne.n	8007226 <xQueueGenericSendFromISR+0x76>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <xQueueGenericSendFromISR+0x7a>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueGenericSendFromISR+0x7c>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	b672      	cpsid	i
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	b662      	cpsie	i
 8007244:	61fb      	str	r3, [r7, #28]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800724c:	f002 f866 	bl	800931c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007250:	f3ef 8211 	mrs	r2, BASEPRI
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	b672      	cpsid	i
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	b662      	cpsie	i
 8007268:	61ba      	str	r2, [r7, #24]
 800726a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800726c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007278:	429a      	cmp	r2, r3
 800727a:	d302      	bcc.n	8007282 <xQueueGenericSendFromISR+0xd2>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d12c      	bne.n	80072dc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007292:	f000 fbd1 	bl	8007a38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007296:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729e:	d112      	bne.n	80072c6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d016      	beq.n	80072d6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	3324      	adds	r3, #36	@ 0x24
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fa29 	bl	8008704 <xTaskRemoveFromEventList>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00e      	beq.n	80072d6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	e007      	b.n	80072d6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	b25a      	sxtb	r2, r3
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80072d6:	2301      	movs	r3, #1
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80072da:	e001      	b.n	80072e0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3738      	adds	r7, #56	@ 0x38
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b08e      	sub	sp, #56	@ 0x38
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10d      	bne.n	8007326 <xQueueGiveFromISR+0x30>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730e:	b672      	cpsid	i
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	b662      	cpsie	i
 800731e:	623b      	str	r3, [r7, #32]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <xQueueGiveFromISR+0x54>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	b672      	cpsid	i
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	b662      	cpsie	i
 8007342:	61fb      	str	r3, [r7, #28]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d103      	bne.n	800735a <xQueueGiveFromISR+0x64>
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <xQueueGiveFromISR+0x68>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <xQueueGiveFromISR+0x6a>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10d      	bne.n	8007380 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	b672      	cpsid	i
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	b662      	cpsie	i
 8007378:	61bb      	str	r3, [r7, #24]
}
 800737a:	bf00      	nop
 800737c:	bf00      	nop
 800737e:	e7fd      	b.n	800737c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007380:	f001 ffcc 	bl	800931c <vPortValidateInterruptPriority>
	__asm volatile
 8007384:	f3ef 8211 	mrs	r2, BASEPRI
 8007388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738c:	b672      	cpsid	i
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	b662      	cpsie	i
 800739c:	617a      	str	r2, [r7, #20]
 800739e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80073a0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d22b      	bcs.n	800740c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d112      	bne.n	80073f6 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d016      	beq.n	8007406 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	3324      	adds	r3, #36	@ 0x24
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 f991 	bl	8008704 <xTaskRemoveFromEventList>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00b      	beq.n	8007406 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e007      	b.n	8007406 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073fa:	3301      	adds	r3, #1
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	b25a      	sxtb	r2, r3
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007406:	2301      	movs	r3, #1
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
 800740a:	e001      	b.n	8007410 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800740c:	2300      	movs	r3, #0
 800740e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f383 8811 	msr	BASEPRI, r3
}
 800741a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800741e:	4618      	mov	r0, r3
 8007420:	3738      	adds	r7, #56	@ 0x38
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08c      	sub	sp, #48	@ 0x30
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007434:	2300      	movs	r3, #0
 8007436:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800743c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <xQueueReceive+0x36>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	b672      	cpsid	i
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	b662      	cpsie	i
 8007456:	623b      	str	r3, [r7, #32]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <xQueueReceive+0x44>
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <xQueueReceive+0x48>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <xQueueReceive+0x4a>
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10d      	bne.n	8007492 <xQueueReceive+0x6a>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	b672      	cpsid	i
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	b662      	cpsie	i
 800748a:	61fb      	str	r3, [r7, #28]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007492:	f001 fb05 	bl	8008aa0 <xTaskGetSchedulerState>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <xQueueReceive+0x7a>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <xQueueReceive+0x7e>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <xQueueReceive+0x80>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10d      	bne.n	80074c8 <xQueueReceive+0xa0>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	b672      	cpsid	i
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	b662      	cpsie	i
 80074c0:	61bb      	str	r3, [r7, #24]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074c8:	f001 fe40 	bl	800914c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01f      	beq.n	8007518 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074dc:	f000 fb16 	bl	8007b0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	1e5a      	subs	r2, r3, #1
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00f      	beq.n	8007510 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f2:	3310      	adds	r3, #16
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 f905 	bl	8008704 <xTaskRemoveFromEventList>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007500:	4b3c      	ldr	r3, [pc, #240]	@ (80075f4 <xQueueReceive+0x1cc>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007510:	f001 fe52 	bl	80091b8 <vPortExitCritical>
				return pdPASS;
 8007514:	2301      	movs	r3, #1
 8007516:	e069      	b.n	80075ec <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800751e:	f001 fe4b 	bl	80091b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007522:	2300      	movs	r3, #0
 8007524:	e062      	b.n	80075ec <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800752c:	f107 0310 	add.w	r3, r7, #16
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f94d 	bl	80087d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007536:	2301      	movs	r3, #1
 8007538:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800753a:	f001 fe3d 	bl	80091b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800753e:	f000 fead 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007542:	f001 fe03 	bl	800914c <vPortEnterCritical>
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800754c:	b25b      	sxtb	r3, r3
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d103      	bne.n	800755c <xQueueReceive+0x134>
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007562:	b25b      	sxtb	r3, r3
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d103      	bne.n	8007572 <xQueueReceive+0x14a>
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007572:	f001 fe21 	bl	80091b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007576:	1d3a      	adds	r2, r7, #4
 8007578:	f107 0310 	add.w	r3, r7, #16
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f93c 	bl	80087fc <xTaskCheckForTimeOut>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d123      	bne.n	80075d2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800758a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800758c:	f000 fb36 	bl	8007bfc <prvIsQueueEmpty>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d017      	beq.n	80075c6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	3324      	adds	r3, #36	@ 0x24
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 f888 	bl	80086b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075a6:	f000 fad7 	bl	8007b58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075aa:	f000 fe85 	bl	80082b8 <xTaskResumeAll>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d189      	bne.n	80074c8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80075b4:	4b0f      	ldr	r3, [pc, #60]	@ (80075f4 <xQueueReceive+0x1cc>)
 80075b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	e780      	b.n	80074c8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c8:	f000 fac6 	bl	8007b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075cc:	f000 fe74 	bl	80082b8 <xTaskResumeAll>
 80075d0:	e77a      	b.n	80074c8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d4:	f000 fac0 	bl	8007b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075d8:	f000 fe6e 	bl	80082b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075de:	f000 fb0d 	bl	8007bfc <prvIsQueueEmpty>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f43f af6f 	beq.w	80074c8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3730      	adds	r7, #48	@ 0x30
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	e000ed04 	.word	0xe000ed04

080075f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08e      	sub	sp, #56	@ 0x38
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007602:	2300      	movs	r3, #0
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800760a:	2300      	movs	r3, #0
 800760c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10d      	bne.n	8007630 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	b672      	cpsid	i
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	b662      	cpsie	i
 8007628:	623b      	str	r3, [r7, #32]
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00d      	beq.n	8007654 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	61fb      	str	r3, [r7, #28]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007654:	f001 fa24 	bl	8008aa0 <xTaskGetSchedulerState>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <xQueueSemaphoreTake+0x6c>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <xQueueSemaphoreTake+0x70>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <xQueueSemaphoreTake+0x72>
 8007668:	2300      	movs	r3, #0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10d      	bne.n	800768a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	b672      	cpsid	i
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	b662      	cpsie	i
 8007682:	61bb      	str	r3, [r7, #24]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800768a:	f001 fd5f 	bl	800914c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007692:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d024      	beq.n	80076e4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	1e5a      	subs	r2, r3, #1
 800769e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076aa:	f001 fbc3 	bl	8008e34 <pvTaskIncrementMutexHeldCount>
 80076ae:	4602      	mov	r2, r0
 80076b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00f      	beq.n	80076dc <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076be:	3310      	adds	r3, #16
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 f81f 	bl	8008704 <xTaskRemoveFromEventList>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076cc:	4b55      	ldr	r3, [pc, #340]	@ (8007824 <xQueueSemaphoreTake+0x22c>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076dc:	f001 fd6c 	bl	80091b8 <vPortExitCritical>
				return pdPASS;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e09a      	b.n	800781a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d114      	bne.n	8007714 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00d      	beq.n	800770c <xQueueSemaphoreTake+0x114>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	b672      	cpsid	i
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	b662      	cpsie	i
 8007704:	617b      	str	r3, [r7, #20]
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	e7fd      	b.n	8007708 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800770c:	f001 fd54 	bl	80091b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007710:	2300      	movs	r3, #0
 8007712:	e082      	b.n	800781a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800771a:	f107 030c 	add.w	r3, r7, #12
 800771e:	4618      	mov	r0, r3
 8007720:	f001 f856 	bl	80087d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007728:	f001 fd46 	bl	80091b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800772c:	f000 fdb6 	bl	800829c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007730:	f001 fd0c 	bl	800914c <vPortEnterCritical>
 8007734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007736:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800773a:	b25b      	sxtb	r3, r3
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d103      	bne.n	800774a <xQueueSemaphoreTake+0x152>
 8007742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007750:	b25b      	sxtb	r3, r3
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d103      	bne.n	8007760 <xQueueSemaphoreTake+0x168>
 8007758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007760:	f001 fd2a 	bl	80091b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007764:	463a      	mov	r2, r7
 8007766:	f107 030c 	add.w	r3, r7, #12
 800776a:	4611      	mov	r1, r2
 800776c:	4618      	mov	r0, r3
 800776e:	f001 f845 	bl	80087fc <xTaskCheckForTimeOut>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d132      	bne.n	80077de <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007778:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800777a:	f000 fa3f 	bl	8007bfc <prvIsQueueEmpty>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d026      	beq.n	80077d2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800778c:	f001 fcde 	bl	800914c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f001 f9a1 	bl	8008adc <xTaskPriorityInherit>
 800779a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800779c:	f001 fd0c 	bl	80091b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	3324      	adds	r3, #36	@ 0x24
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 ff83 	bl	80086b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077b0:	f000 f9d2 	bl	8007b58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077b4:	f000 fd80 	bl	80082b8 <xTaskResumeAll>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f47f af65 	bne.w	800768a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80077c0:	4b18      	ldr	r3, [pc, #96]	@ (8007824 <xQueueSemaphoreTake+0x22c>)
 80077c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	e75b      	b.n	800768a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077d4:	f000 f9c0 	bl	8007b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077d8:	f000 fd6e 	bl	80082b8 <xTaskResumeAll>
 80077dc:	e755      	b.n	800768a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077e0:	f000 f9ba 	bl	8007b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077e4:	f000 fd68 	bl	80082b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077ea:	f000 fa07 	bl	8007bfc <prvIsQueueEmpty>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f43f af4a 	beq.w	800768a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80077fc:	f001 fca6 	bl	800914c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007802:	f000 f901 	bl	8007a08 <prvGetDisinheritPriorityAfterTimeout>
 8007806:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f001 fa70 	bl	8008cf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007814:	f001 fcd0 	bl	80091b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800781a:	4618      	mov	r0, r3
 800781c:	3738      	adds	r7, #56	@ 0x38
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	e000ed04 	.word	0xe000ed04

08007828 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08e      	sub	sp, #56	@ 0x38
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10d      	bne.n	800785a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	b672      	cpsid	i
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	b662      	cpsie	i
 8007852:	623b      	str	r3, [r7, #32]
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	e7fd      	b.n	8007856 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <xQueueReceiveFromISR+0x40>
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <xQueueReceiveFromISR+0x44>
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <xQueueReceiveFromISR+0x46>
 800786c:	2300      	movs	r3, #0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10d      	bne.n	800788e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	b672      	cpsid	i
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	b662      	cpsie	i
 8007886:	61fb      	str	r3, [r7, #28]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800788e:	f001 fd45 	bl	800931c <vPortValidateInterruptPriority>
	__asm volatile
 8007892:	f3ef 8211 	mrs	r2, BASEPRI
 8007896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
 80078aa:	61ba      	str	r2, [r7, #24]
 80078ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d02f      	beq.n	800791e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078cc:	f000 f91e 	bl	8007b0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d2:	1e5a      	subs	r2, r3, #1
 80078d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80078d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d112      	bne.n	8007908 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	3310      	adds	r3, #16
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 ff08 	bl	8008704 <xTaskRemoveFromEventList>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00e      	beq.n	8007918 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e007      	b.n	8007918 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800790c:	3301      	adds	r3, #1
 800790e:	b2db      	uxtb	r3, r3
 8007910:	b25a      	sxtb	r2, r3
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007918:	2301      	movs	r3, #1
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
 800791c:	e001      	b.n	8007922 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800791e:	2300      	movs	r3, #0
 8007920:	637b      	str	r3, [r7, #52]	@ 0x34
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f383 8811 	msr	BASEPRI, r3
}
 800792c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800792e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007930:	4618      	mov	r0, r3
 8007932:	3738      	adds	r7, #56	@ 0x38
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10d      	bne.n	8007962 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794a:	b672      	cpsid	i
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	b662      	cpsie	i
 800795a:	60bb      	str	r3, [r7, #8]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007962:	f001 fbf3 	bl	800914c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800796c:	f001 fc24 	bl	80091b8 <vPortExitCritical>

	return uxReturn;
 8007970:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800797a:	b480      	push	{r7}
 800797c:	b087      	sub	sp, #28
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	b672      	cpsid	i
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	b662      	cpsie	i
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ac:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80079ae:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80079b0:	4618      	mov	r0, r3
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10d      	bne.n	80079ea <vQueueDelete+0x2e>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	b672      	cpsid	i
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	b662      	cpsie	i
 80079e2:	60bb      	str	r3, [r7, #8]
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f934 	bl	8007c58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f001 fda2 	bl	8009544 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007a00:	bf00      	nop
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d006      	beq.n	8007a26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1c3 0307 	rsb	r3, r3, #7
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e001      	b.n	8007a2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
	}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10d      	bne.n	8007a72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d14d      	bne.n	8007afa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 f8ba 	bl	8008bdc <xTaskPriorityDisinherit>
 8007a68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	609a      	str	r2, [r3, #8]
 8007a70:	e043      	b.n	8007afa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d119      	bne.n	8007aac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6858      	ldr	r0, [r3, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a80:	461a      	mov	r2, r3
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	f00f f85f 	bl	8016b46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d32b      	bcc.n	8007afa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	e026      	b.n	8007afa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68d8      	ldr	r0, [r3, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	f00f f845 	bl	8016b46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac4:	425b      	negs	r3, r3
 8007ac6:	441a      	add	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d207      	bcs.n	8007ae8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae0:	425b      	negs	r3, r3
 8007ae2:	441a      	add	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d105      	bne.n	8007afa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007b02:	697b      	ldr	r3, [r7, #20]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d018      	beq.n	8007b50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	441a      	add	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d303      	bcc.n	8007b40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68d9      	ldr	r1, [r3, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6838      	ldr	r0, [r7, #0]
 8007b4c:	f00e fffb 	bl	8016b46 <memcpy>
	}
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b60:	f001 faf4 	bl	800914c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b6c:	e011      	b.n	8007b92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d012      	beq.n	8007b9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3324      	adds	r3, #36	@ 0x24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 fdc2 	bl	8008704 <xTaskRemoveFromEventList>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b86:	f000 fea1 	bl	80088cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dce9      	bgt.n	8007b6e <prvUnlockQueue+0x16>
 8007b9a:	e000      	b.n	8007b9e <prvUnlockQueue+0x46>
					break;
 8007b9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	22ff      	movs	r2, #255	@ 0xff
 8007ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ba6:	f001 fb07 	bl	80091b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007baa:	f001 facf 	bl	800914c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bb6:	e011      	b.n	8007bdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d012      	beq.n	8007be6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fd9d 	bl	8008704 <xTaskRemoveFromEventList>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bd0:	f000 fe7c 	bl	80088cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dce9      	bgt.n	8007bb8 <prvUnlockQueue+0x60>
 8007be4:	e000      	b.n	8007be8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007be6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	22ff      	movs	r2, #255	@ 0xff
 8007bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007bf0:	f001 fae2 	bl	80091b8 <vPortExitCritical>
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c04:	f001 faa2 	bl	800914c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c10:	2301      	movs	r3, #1
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e001      	b.n	8007c1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c1a:	f001 facd 	bl	80091b8 <vPortExitCritical>

	return xReturn;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c30:	f001 fa8c 	bl	800914c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d102      	bne.n	8007c46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c40:	2301      	movs	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e001      	b.n	8007c4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c4a:	f001 fab5 	bl	80091b8 <vPortExitCritical>

	return xReturn;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e016      	b.n	8007c94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007c66:	4a10      	ldr	r2, [pc, #64]	@ (8007ca8 <vQueueUnregisterQueue+0x50>)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d10b      	bne.n	8007c8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007c76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca8 <vQueueUnregisterQueue+0x50>)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007c80:	4a09      	ldr	r2, [pc, #36]	@ (8007ca8 <vQueueUnregisterQueue+0x50>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	605a      	str	r2, [r3, #4]
				break;
 8007c8c:	e006      	b.n	8007c9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b07      	cmp	r3, #7
 8007c98:	d9e5      	bls.n	8007c66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007c9a:	bf00      	nop
 8007c9c:	bf00      	nop
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	200050ac 	.word	0x200050ac

08007cac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08e      	sub	sp, #56	@ 0x38
 8007cb0:	af04      	add	r7, sp, #16
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10d      	bne.n	8007cdc <xTaskCreateStatic+0x30>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc4:	b672      	cpsid	i
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	b662      	cpsie	i
 8007cd4:	623b      	str	r3, [r7, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	e7fd      	b.n	8007cd8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <xTaskCreateStatic+0x52>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	61fb      	str	r3, [r7, #28]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cfe:	23a8      	movs	r3, #168	@ 0xa8
 8007d00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2ba8      	cmp	r3, #168	@ 0xa8
 8007d06:	d00d      	beq.n	8007d24 <xTaskCreateStatic+0x78>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0c:	b672      	cpsid	i
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	b662      	cpsie	i
 8007d1c:	61bb      	str	r3, [r7, #24]
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	e7fd      	b.n	8007d20 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01e      	beq.n	8007d6a <xTaskCreateStatic+0xbe>
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01b      	beq.n	8007d6a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d44:	2300      	movs	r3, #0
 8007d46:	9303      	str	r3, [sp, #12]
 8007d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4a:	9302      	str	r3, [sp, #8]
 8007d4c:	f107 0314 	add.w	r3, r7, #20
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f851 	bl	8007e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d64:	f000 f8f6 	bl	8007f54 <prvAddNewTaskToReadyList>
 8007d68:	e001      	b.n	8007d6e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d6e:	697b      	ldr	r3, [r7, #20]
	}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3728      	adds	r7, #40	@ 0x28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08c      	sub	sp, #48	@ 0x30
 8007d7c:	af04      	add	r7, sp, #16
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	4613      	mov	r3, r2
 8007d86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 fb0b 	bl	80093a8 <pvPortMalloc>
 8007d92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00e      	beq.n	8007db8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d9a:	20a8      	movs	r0, #168	@ 0xa8
 8007d9c:	f001 fb04 	bl	80093a8 <pvPortMalloc>
 8007da0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	631a      	str	r2, [r3, #48]	@ 0x30
 8007dae:	e005      	b.n	8007dbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007db0:	6978      	ldr	r0, [r7, #20]
 8007db2:	f001 fbc7 	bl	8009544 <vPortFree>
 8007db6:	e001      	b.n	8007dbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d017      	beq.n	8007df2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9303      	str	r3, [sp, #12]
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	9302      	str	r3, [sp, #8]
 8007dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f80f 	bl	8007e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007de6:	69f8      	ldr	r0, [r7, #28]
 8007de8:	f000 f8b4 	bl	8007f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dec:	2301      	movs	r3, #1
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	e002      	b.n	8007df8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007df2:	f04f 33ff 	mov.w	r3, #4294967295
 8007df6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007df8:	69bb      	ldr	r3, [r7, #24]
	}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007e1c:	440b      	add	r3, r1
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00d      	beq.n	8007e52 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	b672      	cpsid	i
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	b662      	cpsie	i
 8007e4a:	617b      	str	r3, [r7, #20]
}
 8007e4c:	bf00      	nop
 8007e4e:	bf00      	nop
 8007e50:	e7fd      	b.n	8007e4e <prvInitialiseNewTask+0x4a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01f      	beq.n	8007e9e <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e012      	b.n	8007e8a <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	7819      	ldrb	r1, [r3, #0]
 8007e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	3334      	adds	r3, #52	@ 0x34
 8007e74:	460a      	mov	r2, r1
 8007e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	2b0f      	cmp	r3, #15
 8007e8e:	d9e9      	bls.n	8007e64 <prvInitialiseNewTask+0x60>
 8007e90:	e000      	b.n	8007e94 <prvInitialiseNewTask+0x90>
			{
				break;
 8007e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e9c:	e003      	b.n	8007ea6 <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	2b06      	cmp	r3, #6
 8007eaa:	d901      	bls.n	8007eb0 <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007eac:	2306      	movs	r3, #6
 8007eae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eba:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fe31 	bl	8006b2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	3318      	adds	r3, #24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fe2c 	bl	8006b2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	f1c3 0207 	rsb	r2, r3, #7
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	2200      	movs	r2, #0
 8007ef0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	3354      	adds	r3, #84	@ 0x54
 8007f06:	224c      	movs	r2, #76	@ 0x4c
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f00e fd4f 	bl	80169ae <memset>
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	4a0d      	ldr	r2, [pc, #52]	@ (8007f48 <prvInitialiseNewTask+0x144>)
 8007f14:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	4a0c      	ldr	r2, [pc, #48]	@ (8007f4c <prvInitialiseNewTask+0x148>)
 8007f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f50 <prvInitialiseNewTask+0x14c>)
 8007f20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	69b8      	ldr	r0, [r7, #24]
 8007f28:	f000 fffe 	bl	8008f28 <pxPortInitialiseStack>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f3e:	bf00      	nop
 8007f40:	3720      	adds	r7, #32
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	2000c704 	.word	0x2000c704
 8007f4c:	2000c76c 	.word	0x2000c76c
 8007f50:	2000c7d4 	.word	0x2000c7d4

08007f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f5c:	f001 f8f6 	bl	800914c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f60:	4b2a      	ldr	r3, [pc, #168]	@ (800800c <prvAddNewTaskToReadyList+0xb8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	4a29      	ldr	r2, [pc, #164]	@ (800800c <prvAddNewTaskToReadyList+0xb8>)
 8007f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f6a:	4b29      	ldr	r3, [pc, #164]	@ (8008010 <prvAddNewTaskToReadyList+0xbc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f72:	4a27      	ldr	r2, [pc, #156]	@ (8008010 <prvAddNewTaskToReadyList+0xbc>)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f78:	4b24      	ldr	r3, [pc, #144]	@ (800800c <prvAddNewTaskToReadyList+0xb8>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d110      	bne.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f80:	f000 fcc8 	bl	8008914 <prvInitialiseTaskLists>
 8007f84:	e00d      	b.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f86:	4b23      	ldr	r3, [pc, #140]	@ (8008014 <prvAddNewTaskToReadyList+0xc0>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f8e:	4b20      	ldr	r3, [pc, #128]	@ (8008010 <prvAddNewTaskToReadyList+0xbc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d802      	bhi.n	8007fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008010 <prvAddNewTaskToReadyList+0xbc>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8008018 <prvAddNewTaskToReadyList+0xc4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8008018 <prvAddNewTaskToReadyList+0xc4>)
 8007faa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	409a      	lsls	r2, r3
 8007fb4:	4b19      	ldr	r3, [pc, #100]	@ (800801c <prvAddNewTaskToReadyList+0xc8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	4a18      	ldr	r2, [pc, #96]	@ (800801c <prvAddNewTaskToReadyList+0xc8>)
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4a15      	ldr	r2, [pc, #84]	@ (8008020 <prvAddNewTaskToReadyList+0xcc>)
 8007fcc:	441a      	add	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f7fe fdb7 	bl	8006b48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fda:	f001 f8ed 	bl	80091b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <prvAddNewTaskToReadyList+0xc0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00e      	beq.n	8008004 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8008010 <prvAddNewTaskToReadyList+0xbc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d207      	bcs.n	8008004 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8008024 <prvAddNewTaskToReadyList+0xd0>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	200051ec 	.word	0x200051ec
 8008010:	200050ec 	.word	0x200050ec
 8008014:	200051f8 	.word	0x200051f8
 8008018:	20005208 	.word	0x20005208
 800801c:	200051f4 	.word	0x200051f4
 8008020:	200050f0 	.word	0x200050f0
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008030:	f001 f88c 	bl	800914c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <vTaskDelete+0x18>
 800803a:	4b3a      	ldr	r3, [pc, #232]	@ (8008124 <vTaskDelete+0xfc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	e000      	b.n	8008042 <vTaskDelete+0x1a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3304      	adds	r3, #4
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fdda 	bl	8006c02 <uxListRemove>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d115      	bne.n	8008080 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008058:	4933      	ldr	r1, [pc, #204]	@ (8008128 <vTaskDelete+0x100>)
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <vTaskDelete+0x58>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806e:	2201      	movs	r2, #1
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	43da      	mvns	r2, r3
 8008076:	4b2d      	ldr	r3, [pc, #180]	@ (800812c <vTaskDelete+0x104>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4013      	ands	r3, r2
 800807c:	4a2b      	ldr	r2, [pc, #172]	@ (800812c <vTaskDelete+0x104>)
 800807e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3318      	adds	r3, #24
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fdb8 	bl	8006c02 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008092:	4b27      	ldr	r3, [pc, #156]	@ (8008130 <vTaskDelete+0x108>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	4a25      	ldr	r2, [pc, #148]	@ (8008130 <vTaskDelete+0x108>)
 800809a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800809c:	4b21      	ldr	r3, [pc, #132]	@ (8008124 <vTaskDelete+0xfc>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d10b      	bne.n	80080be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4619      	mov	r1, r3
 80080ac:	4821      	ldr	r0, [pc, #132]	@ (8008134 <vTaskDelete+0x10c>)
 80080ae:	f7fe fd4b 	bl	8006b48 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80080b2:	4b21      	ldr	r3, [pc, #132]	@ (8008138 <vTaskDelete+0x110>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3301      	adds	r3, #1
 80080b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008138 <vTaskDelete+0x110>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	e009      	b.n	80080d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80080be:	4b1f      	ldr	r3, [pc, #124]	@ (800813c <vTaskDelete+0x114>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	4a1d      	ldr	r2, [pc, #116]	@ (800813c <vTaskDelete+0x114>)
 80080c6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fc91 	bl	80089f0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80080ce:	f000 fcc7 	bl	8008a60 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80080d2:	f001 f871 	bl	80091b8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80080d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008140 <vTaskDelete+0x118>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01e      	beq.n	800811c <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 80080de:	4b11      	ldr	r3, [pc, #68]	@ (8008124 <vTaskDelete+0xfc>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d119      	bne.n	800811c <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80080e8:	4b16      	ldr	r3, [pc, #88]	@ (8008144 <vTaskDelete+0x11c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00d      	beq.n	800810c <vTaskDelete+0xe4>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	b672      	cpsid	i
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	b662      	cpsie	i
 8008104:	60bb      	str	r3, [r7, #8]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800810c:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <vTaskDelete+0x120>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800811c:	bf00      	nop
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200050ec 	.word	0x200050ec
 8008128:	200050f0 	.word	0x200050f0
 800812c:	200051f4 	.word	0x200051f4
 8008130:	20005208 	.word	0x20005208
 8008134:	200051c0 	.word	0x200051c0
 8008138:	200051d4 	.word	0x200051d4
 800813c:	200051ec 	.word	0x200051ec
 8008140:	200051f8 	.word	0x200051f8
 8008144:	20005214 	.word	0x20005214
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800815e:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <vTaskDelay+0x68>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00d      	beq.n	8008182 <vTaskDelay+0x36>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	b672      	cpsid	i
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	b662      	cpsie	i
 800817a:	60bb      	str	r3, [r7, #8]
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008182:	f000 f88b 	bl	800829c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008186:	2100      	movs	r1, #0
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fe67 	bl	8008e5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800818e:	f000 f893 	bl	80082b8 <xTaskResumeAll>
 8008192:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d107      	bne.n	80081aa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800819a:	4b07      	ldr	r3, [pc, #28]	@ (80081b8 <vTaskDelay+0x6c>)
 800819c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20005214 	.word	0x20005214
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08a      	sub	sp, #40	@ 0x28
 80081c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ca:	463a      	mov	r2, r7
 80081cc:	1d39      	adds	r1, r7, #4
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f8 f9fc 	bl	80005d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	9202      	str	r2, [sp, #8]
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	2300      	movs	r3, #0
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	460a      	mov	r2, r1
 80081ea:	4924      	ldr	r1, [pc, #144]	@ (800827c <vTaskStartScheduler+0xc0>)
 80081ec:	4824      	ldr	r0, [pc, #144]	@ (8008280 <vTaskStartScheduler+0xc4>)
 80081ee:	f7ff fd5d 	bl	8007cac <xTaskCreateStatic>
 80081f2:	4603      	mov	r3, r0
 80081f4:	4a23      	ldr	r2, [pc, #140]	@ (8008284 <vTaskStartScheduler+0xc8>)
 80081f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081f8:	4b22      	ldr	r3, [pc, #136]	@ (8008284 <vTaskStartScheduler+0xc8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	e001      	b.n	800820a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d11f      	bne.n	8008250 <vTaskStartScheduler+0x94>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	b672      	cpsid	i
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	b662      	cpsie	i
 8008224:	613b      	str	r3, [r7, #16]
}
 8008226:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008228:	4b17      	ldr	r3, [pc, #92]	@ (8008288 <vTaskStartScheduler+0xcc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3354      	adds	r3, #84	@ 0x54
 800822e:	4a17      	ldr	r2, [pc, #92]	@ (800828c <vTaskStartScheduler+0xd0>)
 8008230:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008232:	4b17      	ldr	r3, [pc, #92]	@ (8008290 <vTaskStartScheduler+0xd4>)
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800823a:	4b16      	ldr	r3, [pc, #88]	@ (8008294 <vTaskStartScheduler+0xd8>)
 800823c:	2201      	movs	r2, #1
 800823e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008240:	4b15      	ldr	r3, [pc, #84]	@ (8008298 <vTaskStartScheduler+0xdc>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008246:	f7f8 f9b3 	bl	80005b0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800824a:	f000 ff01 	bl	8009050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800824e:	e011      	b.n	8008274 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d10d      	bne.n	8008274 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825c:	b672      	cpsid	i
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	b662      	cpsie	i
 800826c:	60fb      	str	r3, [r7, #12]
}
 800826e:	bf00      	nop
 8008270:	bf00      	nop
 8008272:	e7fd      	b.n	8008270 <vTaskStartScheduler+0xb4>
}
 8008274:	bf00      	nop
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	08017a1c 	.word	0x08017a1c
 8008280:	080088e5 	.word	0x080088e5
 8008284:	20005210 	.word	0x20005210
 8008288:	200050ec 	.word	0x200050ec
 800828c:	2000003c 	.word	0x2000003c
 8008290:	2000520c 	.word	0x2000520c
 8008294:	200051f8 	.word	0x200051f8
 8008298:	200051f0 	.word	0x200051f0

0800829c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80082a0:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <vTaskSuspendAll+0x18>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	4a03      	ldr	r2, [pc, #12]	@ (80082b4 <vTaskSuspendAll+0x18>)
 80082a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80082aa:	bf00      	nop
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	20005214 	.word	0x20005214

080082b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082c6:	4b43      	ldr	r3, [pc, #268]	@ (80083d4 <xTaskResumeAll+0x11c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10d      	bne.n	80082ea <xTaskResumeAll+0x32>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	b672      	cpsid	i
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	b662      	cpsie	i
 80082e2:	603b      	str	r3, [r7, #0]
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop
 80082e8:	e7fd      	b.n	80082e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082ea:	f000 ff2f 	bl	800914c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082ee:	4b39      	ldr	r3, [pc, #228]	@ (80083d4 <xTaskResumeAll+0x11c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	4a37      	ldr	r2, [pc, #220]	@ (80083d4 <xTaskResumeAll+0x11c>)
 80082f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f8:	4b36      	ldr	r3, [pc, #216]	@ (80083d4 <xTaskResumeAll+0x11c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d161      	bne.n	80083c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008300:	4b35      	ldr	r3, [pc, #212]	@ (80083d8 <xTaskResumeAll+0x120>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d05d      	beq.n	80083c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008308:	e02e      	b.n	8008368 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800830a:	4b34      	ldr	r3, [pc, #208]	@ (80083dc <xTaskResumeAll+0x124>)
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3318      	adds	r3, #24
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fc73 	bl	8006c02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3304      	adds	r3, #4
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fc6e 	bl	8006c02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832a:	2201      	movs	r2, #1
 800832c:	409a      	lsls	r2, r3
 800832e:	4b2c      	ldr	r3, [pc, #176]	@ (80083e0 <xTaskResumeAll+0x128>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4313      	orrs	r3, r2
 8008334:	4a2a      	ldr	r2, [pc, #168]	@ (80083e0 <xTaskResumeAll+0x128>)
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4a27      	ldr	r2, [pc, #156]	@ (80083e4 <xTaskResumeAll+0x12c>)
 8008346:	441a      	add	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3304      	adds	r3, #4
 800834c:	4619      	mov	r1, r3
 800834e:	4610      	mov	r0, r2
 8008350:	f7fe fbfa 	bl	8006b48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008358:	4b23      	ldr	r3, [pc, #140]	@ (80083e8 <xTaskResumeAll+0x130>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835e:	429a      	cmp	r2, r3
 8008360:	d302      	bcc.n	8008368 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008362:	4b22      	ldr	r3, [pc, #136]	@ (80083ec <xTaskResumeAll+0x134>)
 8008364:	2201      	movs	r2, #1
 8008366:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008368:	4b1c      	ldr	r3, [pc, #112]	@ (80083dc <xTaskResumeAll+0x124>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1cc      	bne.n	800830a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008376:	f000 fb73 	bl	8008a60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800837a:	4b1d      	ldr	r3, [pc, #116]	@ (80083f0 <xTaskResumeAll+0x138>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d010      	beq.n	80083a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008386:	f000 f859 	bl	800843c <xTaskIncrementTick>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008390:	4b16      	ldr	r3, [pc, #88]	@ (80083ec <xTaskResumeAll+0x134>)
 8008392:	2201      	movs	r2, #1
 8008394:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3b01      	subs	r3, #1
 800839a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f1      	bne.n	8008386 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80083a2:	4b13      	ldr	r3, [pc, #76]	@ (80083f0 <xTaskResumeAll+0x138>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083a8:	4b10      	ldr	r3, [pc, #64]	@ (80083ec <xTaskResumeAll+0x134>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083b4:	4b0f      	ldr	r3, [pc, #60]	@ (80083f4 <xTaskResumeAll+0x13c>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083c4:	f000 fef8 	bl	80091b8 <vPortExitCritical>

	return xAlreadyYielded;
 80083c8:	68bb      	ldr	r3, [r7, #8]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20005214 	.word	0x20005214
 80083d8:	200051ec 	.word	0x200051ec
 80083dc:	200051ac 	.word	0x200051ac
 80083e0:	200051f4 	.word	0x200051f4
 80083e4:	200050f0 	.word	0x200050f0
 80083e8:	200050ec 	.word	0x200050ec
 80083ec:	20005200 	.word	0x20005200
 80083f0:	200051fc 	.word	0x200051fc
 80083f4:	e000ed04 	.word	0xe000ed04

080083f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083fe:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <xTaskGetTickCount+0x1c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008404:	687b      	ldr	r3, [r7, #4]
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	200051f0 	.word	0x200051f0

08008418 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800841e:	f000 ff7d 	bl	800931c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008422:	2300      	movs	r3, #0
 8008424:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008426:	4b04      	ldr	r3, [pc, #16]	@ (8008438 <xTaskGetTickCountFromISR+0x20>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800842c:	683b      	ldr	r3, [r7, #0]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200051f0 	.word	0x200051f0

0800843c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008446:	4b50      	ldr	r3, [pc, #320]	@ (8008588 <xTaskIncrementTick+0x14c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 808b 	bne.w	8008566 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008450:	4b4e      	ldr	r3, [pc, #312]	@ (800858c <xTaskIncrementTick+0x150>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008458:	4a4c      	ldr	r2, [pc, #304]	@ (800858c <xTaskIncrementTick+0x150>)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d123      	bne.n	80084ac <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008464:	4b4a      	ldr	r3, [pc, #296]	@ (8008590 <xTaskIncrementTick+0x154>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00d      	beq.n	800848a <xTaskIncrementTick+0x4e>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	b672      	cpsid	i
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	b662      	cpsie	i
 8008482:	603b      	str	r3, [r7, #0]
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	e7fd      	b.n	8008486 <xTaskIncrementTick+0x4a>
 800848a:	4b41      	ldr	r3, [pc, #260]	@ (8008590 <xTaskIncrementTick+0x154>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	4b40      	ldr	r3, [pc, #256]	@ (8008594 <xTaskIncrementTick+0x158>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a3e      	ldr	r2, [pc, #248]	@ (8008590 <xTaskIncrementTick+0x154>)
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	4a3e      	ldr	r2, [pc, #248]	@ (8008594 <xTaskIncrementTick+0x158>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4b3e      	ldr	r3, [pc, #248]	@ (8008598 <xTaskIncrementTick+0x15c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	4a3c      	ldr	r2, [pc, #240]	@ (8008598 <xTaskIncrementTick+0x15c>)
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	f000 fada 	bl	8008a60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084ac:	4b3b      	ldr	r3, [pc, #236]	@ (800859c <xTaskIncrementTick+0x160>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d348      	bcc.n	8008548 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084b6:	4b36      	ldr	r3, [pc, #216]	@ (8008590 <xTaskIncrementTick+0x154>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c0:	4b36      	ldr	r3, [pc, #216]	@ (800859c <xTaskIncrementTick+0x160>)
 80084c2:	f04f 32ff 	mov.w	r2, #4294967295
 80084c6:	601a      	str	r2, [r3, #0]
					break;
 80084c8:	e03e      	b.n	8008548 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ca:	4b31      	ldr	r3, [pc, #196]	@ (8008590 <xTaskIncrementTick+0x154>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d203      	bcs.n	80084ea <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084e2:	4a2e      	ldr	r2, [pc, #184]	@ (800859c <xTaskIncrementTick+0x160>)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084e8:	e02e      	b.n	8008548 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fb87 	bl	8006c02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d004      	beq.n	8008506 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3318      	adds	r3, #24
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fb7e 	bl	8006c02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850a:	2201      	movs	r2, #1
 800850c:	409a      	lsls	r2, r3
 800850e:	4b24      	ldr	r3, [pc, #144]	@ (80085a0 <xTaskIncrementTick+0x164>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4313      	orrs	r3, r2
 8008514:	4a22      	ldr	r2, [pc, #136]	@ (80085a0 <xTaskIncrementTick+0x164>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4a1f      	ldr	r2, [pc, #124]	@ (80085a4 <xTaskIncrementTick+0x168>)
 8008526:	441a      	add	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	3304      	adds	r3, #4
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f7fe fb0a 	bl	8006b48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008538:	4b1b      	ldr	r3, [pc, #108]	@ (80085a8 <xTaskIncrementTick+0x16c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	429a      	cmp	r2, r3
 8008540:	d3b9      	bcc.n	80084b6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008542:	2301      	movs	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008546:	e7b6      	b.n	80084b6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008548:	4b17      	ldr	r3, [pc, #92]	@ (80085a8 <xTaskIncrementTick+0x16c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854e:	4915      	ldr	r1, [pc, #84]	@ (80085a4 <xTaskIncrementTick+0x168>)
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d907      	bls.n	8008570 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008560:	2301      	movs	r3, #1
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	e004      	b.n	8008570 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008566:	4b11      	ldr	r3, [pc, #68]	@ (80085ac <xTaskIncrementTick+0x170>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	4a0f      	ldr	r2, [pc, #60]	@ (80085ac <xTaskIncrementTick+0x170>)
 800856e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008570:	4b0f      	ldr	r3, [pc, #60]	@ (80085b0 <xTaskIncrementTick+0x174>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800857c:	697b      	ldr	r3, [r7, #20]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20005214 	.word	0x20005214
 800858c:	200051f0 	.word	0x200051f0
 8008590:	200051a4 	.word	0x200051a4
 8008594:	200051a8 	.word	0x200051a8
 8008598:	20005204 	.word	0x20005204
 800859c:	2000520c 	.word	0x2000520c
 80085a0:	200051f4 	.word	0x200051f4
 80085a4:	200050f0 	.word	0x200050f0
 80085a8:	200050ec 	.word	0x200050ec
 80085ac:	200051fc 	.word	0x200051fc
 80085b0:	20005200 	.word	0x20005200

080085b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085ba:	4b36      	ldr	r3, [pc, #216]	@ (8008694 <vTaskSwitchContext+0xe0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085c2:	4b35      	ldr	r3, [pc, #212]	@ (8008698 <vTaskSwitchContext+0xe4>)
 80085c4:	2201      	movs	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085c8:	e060      	b.n	800868c <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 80085ca:	4b33      	ldr	r3, [pc, #204]	@ (8008698 <vTaskSwitchContext+0xe4>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80085d0:	f7f7 fff5 	bl	80005be <getRunTimeCounterValue>
 80085d4:	4603      	mov	r3, r0
 80085d6:	4a31      	ldr	r2, [pc, #196]	@ (800869c <vTaskSwitchContext+0xe8>)
 80085d8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80085da:	4b30      	ldr	r3, [pc, #192]	@ (800869c <vTaskSwitchContext+0xe8>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b30      	ldr	r3, [pc, #192]	@ (80086a0 <vTaskSwitchContext+0xec>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d909      	bls.n	80085fa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80085e6:	4b2f      	ldr	r3, [pc, #188]	@ (80086a4 <vTaskSwitchContext+0xf0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80085ec:	4a2b      	ldr	r2, [pc, #172]	@ (800869c <vTaskSwitchContext+0xe8>)
 80085ee:	6810      	ldr	r0, [r2, #0]
 80085f0:	4a2b      	ldr	r2, [pc, #172]	@ (80086a0 <vTaskSwitchContext+0xec>)
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	1a82      	subs	r2, r0, r2
 80085f6:	440a      	add	r2, r1
 80085f8:	651a      	str	r2, [r3, #80]	@ 0x50
			ulTaskSwitchedInTime = ulTotalRunTime;
 80085fa:	4b28      	ldr	r3, [pc, #160]	@ (800869c <vTaskSwitchContext+0xe8>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a28      	ldr	r2, [pc, #160]	@ (80086a0 <vTaskSwitchContext+0xec>)
 8008600:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008602:	4b29      	ldr	r3, [pc, #164]	@ (80086a8 <vTaskSwitchContext+0xf4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	fab3 f383 	clz	r3, r3
 800860e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	f1c3 031f 	rsb	r3, r3, #31
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	4924      	ldr	r1, [pc, #144]	@ (80086ac <vTaskSwitchContext+0xf8>)
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	440b      	add	r3, r1
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10d      	bne.n	8008648 <vTaskSwitchContext+0x94>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008630:	b672      	cpsid	i
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	b662      	cpsie	i
 8008640:	607b      	str	r3, [r7, #4]
}
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	e7fd      	b.n	8008644 <vTaskSwitchContext+0x90>
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4a16      	ldr	r2, [pc, #88]	@ (80086ac <vTaskSwitchContext+0xf8>)
 8008654:	4413      	add	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	605a      	str	r2, [r3, #4]
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	3308      	adds	r3, #8
 800866a:	429a      	cmp	r2, r3
 800866c:	d104      	bne.n	8008678 <vTaskSwitchContext+0xc4>
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	605a      	str	r2, [r3, #4]
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	4a09      	ldr	r2, [pc, #36]	@ (80086a4 <vTaskSwitchContext+0xf0>)
 8008680:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008682:	4b08      	ldr	r3, [pc, #32]	@ (80086a4 <vTaskSwitchContext+0xf0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3354      	adds	r3, #84	@ 0x54
 8008688:	4a09      	ldr	r2, [pc, #36]	@ (80086b0 <vTaskSwitchContext+0xfc>)
 800868a:	6013      	str	r3, [r2, #0]
}
 800868c:	bf00      	nop
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20005214 	.word	0x20005214
 8008698:	20005200 	.word	0x20005200
 800869c:	2000521c 	.word	0x2000521c
 80086a0:	20005218 	.word	0x20005218
 80086a4:	200050ec 	.word	0x200050ec
 80086a8:	200051f4 	.word	0x200051f4
 80086ac:	200050f0 	.word	0x200050f0
 80086b0:	2000003c 	.word	0x2000003c

080086b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10d      	bne.n	80086e0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c8:	b672      	cpsid	i
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	b662      	cpsie	i
 80086d8:	60fb      	str	r3, [r7, #12]
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	e7fd      	b.n	80086dc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086e0:	4b07      	ldr	r3, [pc, #28]	@ (8008700 <vTaskPlaceOnEventList+0x4c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3318      	adds	r3, #24
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fe fa51 	bl	8006b90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086ee:	2101      	movs	r1, #1
 80086f0:	6838      	ldr	r0, [r7, #0]
 80086f2:	f000 fbb3 	bl	8008e5c <prvAddCurrentTaskToDelayedList>
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200050ec 	.word	0x200050ec

08008704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10d      	bne.n	8008736 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871e:	b672      	cpsid	i
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	b662      	cpsie	i
 800872e:	60fb      	str	r3, [r7, #12]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3318      	adds	r3, #24
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fa61 	bl	8006c02 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008740:	4b1d      	ldr	r3, [pc, #116]	@ (80087b8 <xTaskRemoveFromEventList+0xb4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d11c      	bne.n	8008782 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fa58 	bl	8006c02 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008756:	2201      	movs	r2, #1
 8008758:	409a      	lsls	r2, r3
 800875a:	4b18      	ldr	r3, [pc, #96]	@ (80087bc <xTaskRemoveFromEventList+0xb8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4313      	orrs	r3, r2
 8008760:	4a16      	ldr	r2, [pc, #88]	@ (80087bc <xTaskRemoveFromEventList+0xb8>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a13      	ldr	r2, [pc, #76]	@ (80087c0 <xTaskRemoveFromEventList+0xbc>)
 8008772:	441a      	add	r2, r3
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe f9e4 	bl	8006b48 <vListInsertEnd>
 8008780:	e005      	b.n	800878e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3318      	adds	r3, #24
 8008786:	4619      	mov	r1, r3
 8008788:	480e      	ldr	r0, [pc, #56]	@ (80087c4 <xTaskRemoveFromEventList+0xc0>)
 800878a:	f7fe f9dd 	bl	8006b48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008792:	4b0d      	ldr	r3, [pc, #52]	@ (80087c8 <xTaskRemoveFromEventList+0xc4>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008798:	429a      	cmp	r2, r3
 800879a:	d905      	bls.n	80087a8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800879c:	2301      	movs	r3, #1
 800879e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087a0:	4b0a      	ldr	r3, [pc, #40]	@ (80087cc <xTaskRemoveFromEventList+0xc8>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	e001      	b.n	80087ac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80087ac:	697b      	ldr	r3, [r7, #20]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20005214 	.word	0x20005214
 80087bc:	200051f4 	.word	0x200051f4
 80087c0:	200050f0 	.word	0x200050f0
 80087c4:	200051ac 	.word	0x200051ac
 80087c8:	200050ec 	.word	0x200050ec
 80087cc:	20005200 	.word	0x20005200

080087d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087d8:	4b06      	ldr	r3, [pc, #24]	@ (80087f4 <vTaskInternalSetTimeOutState+0x24>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087e0:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <vTaskInternalSetTimeOutState+0x28>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	20005204 	.word	0x20005204
 80087f8:	200051f0 	.word	0x200051f0

080087fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10d      	bne.n	8008828 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008810:	b672      	cpsid	i
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	b662      	cpsie	i
 8008820:	613b      	str	r3, [r7, #16]
}
 8008822:	bf00      	nop
 8008824:	bf00      	nop
 8008826:	e7fd      	b.n	8008824 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10d      	bne.n	800884a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	b672      	cpsid	i
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	b662      	cpsie	i
 8008842:	60fb      	str	r3, [r7, #12]
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	e7fd      	b.n	8008846 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800884a:	f000 fc7f 	bl	800914c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800884e:	4b1d      	ldr	r3, [pc, #116]	@ (80088c4 <xTaskCheckForTimeOut+0xc8>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d102      	bne.n	800886e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	e023      	b.n	80088b6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b15      	ldr	r3, [pc, #84]	@ (80088c8 <xTaskCheckForTimeOut+0xcc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d007      	beq.n	800888a <xTaskCheckForTimeOut+0x8e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	429a      	cmp	r2, r3
 8008882:	d302      	bcc.n	800888a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008884:	2301      	movs	r3, #1
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	e015      	b.n	80088b6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	429a      	cmp	r2, r3
 8008892:	d20b      	bcs.n	80088ac <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	1ad2      	subs	r2, r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff ff95 	bl	80087d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
 80088aa:	e004      	b.n	80088b6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088b2:	2301      	movs	r3, #1
 80088b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088b6:	f000 fc7f 	bl	80091b8 <vPortExitCritical>

	return xReturn;
 80088ba:	69fb      	ldr	r3, [r7, #28]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	200051f0 	.word	0x200051f0
 80088c8:	20005204 	.word	0x20005204

080088cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088d0:	4b03      	ldr	r3, [pc, #12]	@ (80088e0 <vTaskMissedYield+0x14>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	601a      	str	r2, [r3, #0]
}
 80088d6:	bf00      	nop
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	20005200 	.word	0x20005200

080088e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088ec:	f000 f852 	bl	8008994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088f0:	4b06      	ldr	r3, [pc, #24]	@ (800890c <prvIdleTask+0x28>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d9f9      	bls.n	80088ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <prvIdleTask+0x2c>)
 80088fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008908:	e7f0      	b.n	80088ec <prvIdleTask+0x8>
 800890a:	bf00      	nop
 800890c:	200050f0 	.word	0x200050f0
 8008910:	e000ed04 	.word	0xe000ed04

08008914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800891a:	2300      	movs	r3, #0
 800891c:	607b      	str	r3, [r7, #4]
 800891e:	e00c      	b.n	800893a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4a12      	ldr	r2, [pc, #72]	@ (8008974 <prvInitialiseTaskLists+0x60>)
 800892c:	4413      	add	r3, r2
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe f8dd 	bl	8006aee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3301      	adds	r3, #1
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b06      	cmp	r3, #6
 800893e:	d9ef      	bls.n	8008920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008940:	480d      	ldr	r0, [pc, #52]	@ (8008978 <prvInitialiseTaskLists+0x64>)
 8008942:	f7fe f8d4 	bl	8006aee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008946:	480d      	ldr	r0, [pc, #52]	@ (800897c <prvInitialiseTaskLists+0x68>)
 8008948:	f7fe f8d1 	bl	8006aee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800894c:	480c      	ldr	r0, [pc, #48]	@ (8008980 <prvInitialiseTaskLists+0x6c>)
 800894e:	f7fe f8ce 	bl	8006aee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008952:	480c      	ldr	r0, [pc, #48]	@ (8008984 <prvInitialiseTaskLists+0x70>)
 8008954:	f7fe f8cb 	bl	8006aee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008958:	480b      	ldr	r0, [pc, #44]	@ (8008988 <prvInitialiseTaskLists+0x74>)
 800895a:	f7fe f8c8 	bl	8006aee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800895e:	4b0b      	ldr	r3, [pc, #44]	@ (800898c <prvInitialiseTaskLists+0x78>)
 8008960:	4a05      	ldr	r2, [pc, #20]	@ (8008978 <prvInitialiseTaskLists+0x64>)
 8008962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008964:	4b0a      	ldr	r3, [pc, #40]	@ (8008990 <prvInitialiseTaskLists+0x7c>)
 8008966:	4a05      	ldr	r2, [pc, #20]	@ (800897c <prvInitialiseTaskLists+0x68>)
 8008968:	601a      	str	r2, [r3, #0]
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	200050f0 	.word	0x200050f0
 8008978:	2000517c 	.word	0x2000517c
 800897c:	20005190 	.word	0x20005190
 8008980:	200051ac 	.word	0x200051ac
 8008984:	200051c0 	.word	0x200051c0
 8008988:	200051d8 	.word	0x200051d8
 800898c:	200051a4 	.word	0x200051a4
 8008990:	200051a8 	.word	0x200051a8

08008994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800899a:	e019      	b.n	80089d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800899c:	f000 fbd6 	bl	800914c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a0:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <prvCheckTasksWaitingTermination+0x50>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe f928 	bl	8006c02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089b2:	4b0d      	ldr	r3, [pc, #52]	@ (80089e8 <prvCheckTasksWaitingTermination+0x54>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	4a0b      	ldr	r2, [pc, #44]	@ (80089e8 <prvCheckTasksWaitingTermination+0x54>)
 80089ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089bc:	4b0b      	ldr	r3, [pc, #44]	@ (80089ec <prvCheckTasksWaitingTermination+0x58>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	4a0a      	ldr	r2, [pc, #40]	@ (80089ec <prvCheckTasksWaitingTermination+0x58>)
 80089c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089c6:	f000 fbf7 	bl	80091b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f810 	bl	80089f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089d0:	4b06      	ldr	r3, [pc, #24]	@ (80089ec <prvCheckTasksWaitingTermination+0x58>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e1      	bne.n	800899c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200051c0 	.word	0x200051c0
 80089e8:	200051ec 	.word	0x200051ec
 80089ec:	200051d4 	.word	0x200051d4

080089f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3354      	adds	r3, #84	@ 0x54
 80089fc:	4618      	mov	r0, r3
 80089fe:	f00d ffef 	bl	80169e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d108      	bne.n	8008a1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fd97 	bl	8009544 <vPortFree>
				vPortFree( pxTCB );
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fd94 	bl	8009544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a1c:	e01b      	b.n	8008a56 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d103      	bne.n	8008a30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd8b 	bl	8009544 <vPortFree>
	}
 8008a2e:	e012      	b.n	8008a56 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d00d      	beq.n	8008a56 <prvDeleteTCB+0x66>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3e:	b672      	cpsid	i
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	b662      	cpsie	i
 8008a4e:	60fb      	str	r3, [r7, #12]
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <prvDeleteTCB+0x62>
	}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a66:	4b0c      	ldr	r3, [pc, #48]	@ (8008a98 <prvResetNextTaskUnblockTime+0x38>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a70:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <prvResetNextTaskUnblockTime+0x3c>)
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295
 8008a76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a78:	e008      	b.n	8008a8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7a:	4b07      	ldr	r3, [pc, #28]	@ (8008a98 <prvResetNextTaskUnblockTime+0x38>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	4a04      	ldr	r2, [pc, #16]	@ (8008a9c <prvResetNextTaskUnblockTime+0x3c>)
 8008a8a:	6013      	str	r3, [r2, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	200051a4 	.word	0x200051a4
 8008a9c:	2000520c 	.word	0x2000520c

08008aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad4 <xTaskGetSchedulerState+0x34>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	607b      	str	r3, [r7, #4]
 8008ab2:	e008      	b.n	8008ac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab4:	4b08      	ldr	r3, [pc, #32]	@ (8008ad8 <xTaskGetSchedulerState+0x38>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008abc:	2302      	movs	r3, #2
 8008abe:	607b      	str	r3, [r7, #4]
 8008ac0:	e001      	b.n	8008ac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ac6:	687b      	ldr	r3, [r7, #4]
	}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	200051f8 	.word	0x200051f8
 8008ad8:	20005214 	.word	0x20005214

08008adc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d069      	beq.n	8008bc6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af6:	4b36      	ldr	r3, [pc, #216]	@ (8008bd0 <xTaskPriorityInherit+0xf4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d259      	bcs.n	8008bb4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	db06      	blt.n	8008b16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b08:	4b31      	ldr	r3, [pc, #196]	@ (8008bd0 <xTaskPriorityInherit+0xf4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0e:	f1c3 0207 	rsb	r2, r3, #7
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6959      	ldr	r1, [r3, #20]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4a2b      	ldr	r2, [pc, #172]	@ (8008bd4 <xTaskPriorityInherit+0xf8>)
 8008b28:	4413      	add	r3, r2
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	d13a      	bne.n	8008ba4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	3304      	adds	r3, #4
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe f865 	bl	8006c02 <uxListRemove>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d115      	bne.n	8008b6a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b42:	4924      	ldr	r1, [pc, #144]	@ (8008bd4 <xTaskPriorityInherit+0xf8>)
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <xTaskPriorityInherit+0x8e>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b58:	2201      	movs	r2, #1
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	43da      	mvns	r2, r3
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <xTaskPriorityInherit+0xfc>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4013      	ands	r3, r2
 8008b66:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd8 <xTaskPriorityInherit+0xfc>)
 8008b68:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b6a:	4b19      	ldr	r3, [pc, #100]	@ (8008bd0 <xTaskPriorityInherit+0xf4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	2201      	movs	r2, #1
 8008b7a:	409a      	lsls	r2, r3
 8008b7c:	4b16      	ldr	r3, [pc, #88]	@ (8008bd8 <xTaskPriorityInherit+0xfc>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	4a15      	ldr	r2, [pc, #84]	@ (8008bd8 <xTaskPriorityInherit+0xfc>)
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4a10      	ldr	r2, [pc, #64]	@ (8008bd4 <xTaskPriorityInherit+0xf8>)
 8008b94:	441a      	add	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7fd ffd3 	bl	8006b48 <vListInsertEnd>
 8008ba2:	e004      	b.n	8008bae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd0 <xTaskPriorityInherit+0xf4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e008      	b.n	8008bc6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bb8:	4b05      	ldr	r3, [pc, #20]	@ (8008bd0 <xTaskPriorityInherit+0xf4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d201      	bcs.n	8008bc6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	200050ec 	.word	0x200050ec
 8008bd4:	200050f0 	.word	0x200050f0
 8008bd8:	200051f4 	.word	0x200051f4

08008bdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d074      	beq.n	8008cdc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8008ce8 <xTaskPriorityDisinherit+0x10c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d00d      	beq.n	8008c18 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c00:	b672      	cpsid	i
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	b662      	cpsie	i
 8008c10:	60fb      	str	r3, [r7, #12]
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	e7fd      	b.n	8008c14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10d      	bne.n	8008c3c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	60bb      	str	r3, [r7, #8]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c40:	1e5a      	subs	r2, r3, #1
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d044      	beq.n	8008cdc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d140      	bne.n	8008cdc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fd ffcf 	bl	8006c02 <uxListRemove>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d115      	bne.n	8008c96 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6e:	491f      	ldr	r1, [pc, #124]	@ (8008cec <xTaskPriorityDisinherit+0x110>)
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <xTaskPriorityDisinherit+0xba>
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c84:	2201      	movs	r2, #1
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43da      	mvns	r2, r3
 8008c8c:	4b18      	ldr	r3, [pc, #96]	@ (8008cf0 <xTaskPriorityDisinherit+0x114>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4013      	ands	r3, r2
 8008c92:	4a17      	ldr	r2, [pc, #92]	@ (8008cf0 <xTaskPriorityDisinherit+0x114>)
 8008c94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	f1c3 0207 	rsb	r2, r3, #7
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cae:	2201      	movs	r2, #1
 8008cb0:	409a      	lsls	r2, r3
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf0 <xTaskPriorityDisinherit+0x114>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8008cf0 <xTaskPriorityDisinherit+0x114>)
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4a08      	ldr	r2, [pc, #32]	@ (8008cec <xTaskPriorityDisinherit+0x110>)
 8008cca:	441a      	add	r2, r3
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f7fd ff38 	bl	8006b48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cdc:	697b      	ldr	r3, [r7, #20]
	}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	200050ec 	.word	0x200050ec
 8008cec:	200050f0 	.word	0x200050f0
 8008cf0:	200051f4 	.word	0x200051f4

08008cf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d02:	2301      	movs	r3, #1
 8008d04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 8089 	beq.w	8008e20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10d      	bne.n	8008d32 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	b672      	cpsid	i
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	b662      	cpsie	i
 8008d2a:	60fb      	str	r3, [r7, #12]
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d902      	bls.n	8008d42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	61fb      	str	r3, [r7, #28]
 8008d40:	e002      	b.n	8008d48 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d066      	beq.n	8008e20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d161      	bne.n	8008e20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d5c:	4b32      	ldr	r3, [pc, #200]	@ (8008e28 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d10d      	bne.n	8008d82 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	b672      	cpsid	i
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	b662      	cpsie	i
 8008d7a:	60bb      	str	r3, [r7, #8]
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	e7fd      	b.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	db04      	blt.n	8008da0 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	f1c3 0207 	rsb	r2, r3, #7
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	6959      	ldr	r1, [r3, #20]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4a1f      	ldr	r2, [pc, #124]	@ (8008e2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008db0:	4413      	add	r3, r2
 8008db2:	4299      	cmp	r1, r3
 8008db4:	d134      	bne.n	8008e20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	3304      	adds	r3, #4
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fd ff21 	bl	8006c02 <uxListRemove>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d115      	bne.n	8008df2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dca:	4918      	ldr	r1, [pc, #96]	@ (8008e2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	440b      	add	r3, r1
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	2201      	movs	r2, #1
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43da      	mvns	r2, r3
 8008de8:	4b11      	ldr	r3, [pc, #68]	@ (8008e30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4013      	ands	r3, r2
 8008dee:	4a10      	ldr	r2, [pc, #64]	@ (8008e30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008df0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	2201      	movs	r2, #1
 8008df8:	409a      	lsls	r2, r3
 8008dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008e30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	4a0b      	ldr	r2, [pc, #44]	@ (8008e30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4a06      	ldr	r2, [pc, #24]	@ (8008e2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e12:	441a      	add	r2, r3
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f7fd fe94 	bl	8006b48 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e20:	bf00      	nop
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200050ec 	.word	0x200050ec
 8008e2c:	200050f0 	.word	0x200050f0
 8008e30:	200051f4 	.word	0x200051f4

08008e34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e38:	4b07      	ldr	r3, [pc, #28]	@ (8008e58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e40:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e46:	3201      	adds	r2, #1
 8008e48:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 8008e4a:	4b03      	ldr	r3, [pc, #12]	@ (8008e58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
	}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	200050ec 	.word	0x200050ec

08008e5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e66:	4b29      	ldr	r3, [pc, #164]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e6c:	4b28      	ldr	r3, [pc, #160]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3304      	adds	r3, #4
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fd fec5 	bl	8006c02 <uxListRemove>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008e7e:	4b24      	ldr	r3, [pc, #144]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	2201      	movs	r2, #1
 8008e86:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8a:	43da      	mvns	r2, r3
 8008e8c:	4b21      	ldr	r3, [pc, #132]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4013      	ands	r3, r2
 8008e92:	4a20      	ldr	r2, [pc, #128]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d10a      	bne.n	8008eb4 <prvAddCurrentTaskToDelayedList+0x58>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4619      	mov	r1, r3
 8008eac:	481a      	ldr	r0, [pc, #104]	@ (8008f18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008eae:	f7fd fe4b 	bl	8006b48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eb2:	e026      	b.n	8008f02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ebc:	4b14      	ldr	r3, [pc, #80]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d209      	bcs.n	8008ee0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ecc:	4b13      	ldr	r3, [pc, #76]	@ (8008f1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f7fd fe59 	bl	8006b90 <vListInsert>
}
 8008ede:	e010      	b.n	8008f02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f7fd fe4f 	bl	8006b90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d202      	bcs.n	8008f02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008efc:	4a09      	ldr	r2, [pc, #36]	@ (8008f24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	6013      	str	r3, [r2, #0]
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200051f0 	.word	0x200051f0
 8008f10:	200050ec 	.word	0x200050ec
 8008f14:	200051f4 	.word	0x200051f4
 8008f18:	200051d8 	.word	0x200051d8
 8008f1c:	200051a8 	.word	0x200051a8
 8008f20:	200051a4 	.word	0x200051a4
 8008f24:	2000520c 	.word	0x2000520c

08008f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3b04      	subs	r3, #4
 8008f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3b04      	subs	r3, #4
 8008f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f023 0201 	bic.w	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3b04      	subs	r3, #4
 8008f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f58:	4a0c      	ldr	r2, [pc, #48]	@ (8008f8c <pxPortInitialiseStack+0x64>)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3b14      	subs	r3, #20
 8008f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3b04      	subs	r3, #4
 8008f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f06f 0202 	mvn.w	r2, #2
 8008f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3b20      	subs	r3, #32
 8008f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	08008f91 	.word	0x08008f91

08008f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f9a:	4b15      	ldr	r3, [pc, #84]	@ (8008ff0 <prvTaskExitError+0x60>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d00d      	beq.n	8008fc0 <prvTaskExitError+0x30>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	b672      	cpsid	i
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	b662      	cpsie	i
 8008fb8:	60fb      	str	r3, [r7, #12]
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <prvTaskExitError+0x2c>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	b672      	cpsid	i
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	b662      	cpsie	i
 8008fd4:	60bb      	str	r3, [r7, #8]
}
 8008fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fd8:	bf00      	nop
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0fc      	beq.n	8008fda <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20000020 	.word	0x20000020
	...

08009000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009000:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <pxCurrentTCBConst2>)
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	6808      	ldr	r0, [r1, #0]
 8009006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900a:	f380 8809 	msr	PSP, r0
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f04f 0000 	mov.w	r0, #0
 8009016:	f380 8811 	msr	BASEPRI, r0
 800901a:	4770      	bx	lr
 800901c:	f3af 8000 	nop.w

08009020 <pxCurrentTCBConst2>:
 8009020:	200050ec 	.word	0x200050ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop

08009028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009028:	4808      	ldr	r0, [pc, #32]	@ (800904c <prvPortStartFirstTask+0x24>)
 800902a:	6800      	ldr	r0, [r0, #0]
 800902c:	6800      	ldr	r0, [r0, #0]
 800902e:	f380 8808 	msr	MSP, r0
 8009032:	f04f 0000 	mov.w	r0, #0
 8009036:	f380 8814 	msr	CONTROL, r0
 800903a:	b662      	cpsie	i
 800903c:	b661      	cpsie	f
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	df00      	svc	0
 8009048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800904a:	bf00      	nop
 800904c:	e000ed08 	.word	0xe000ed08

08009050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009056:	4b37      	ldr	r3, [pc, #220]	@ (8009134 <xPortStartScheduler+0xe4>)
 8009058:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	22ff      	movs	r2, #255	@ 0xff
 8009066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009078:	b2da      	uxtb	r2, r3
 800907a:	4b2f      	ldr	r3, [pc, #188]	@ (8009138 <xPortStartScheduler+0xe8>)
 800907c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800907e:	4b2f      	ldr	r3, [pc, #188]	@ (800913c <xPortStartScheduler+0xec>)
 8009080:	2207      	movs	r2, #7
 8009082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009084:	e009      	b.n	800909a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009086:	4b2d      	ldr	r3, [pc, #180]	@ (800913c <xPortStartScheduler+0xec>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3b01      	subs	r3, #1
 800908c:	4a2b      	ldr	r2, [pc, #172]	@ (800913c <xPortStartScheduler+0xec>)
 800908e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	b2db      	uxtb	r3, r3
 8009098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090a2:	2b80      	cmp	r3, #128	@ 0x80
 80090a4:	d0ef      	beq.n	8009086 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090a6:	4b25      	ldr	r3, [pc, #148]	@ (800913c <xPortStartScheduler+0xec>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f1c3 0307 	rsb	r3, r3, #7
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d00d      	beq.n	80090ce <xPortStartScheduler+0x7e>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b6:	b672      	cpsid	i
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	b662      	cpsie	i
 80090c6:	60bb      	str	r3, [r7, #8]
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090ce:	4b1b      	ldr	r3, [pc, #108]	@ (800913c <xPortStartScheduler+0xec>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	4a19      	ldr	r2, [pc, #100]	@ (800913c <xPortStartScheduler+0xec>)
 80090d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090d8:	4b18      	ldr	r3, [pc, #96]	@ (800913c <xPortStartScheduler+0xec>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80090e0:	4a16      	ldr	r2, [pc, #88]	@ (800913c <xPortStartScheduler+0xec>)
 80090e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090ec:	4b14      	ldr	r3, [pc, #80]	@ (8009140 <xPortStartScheduler+0xf0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a13      	ldr	r2, [pc, #76]	@ (8009140 <xPortStartScheduler+0xf0>)
 80090f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80090f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090f8:	4b11      	ldr	r3, [pc, #68]	@ (8009140 <xPortStartScheduler+0xf0>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a10      	ldr	r2, [pc, #64]	@ (8009140 <xPortStartScheduler+0xf0>)
 80090fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009104:	f000 f8dc 	bl	80092c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009108:	4b0e      	ldr	r3, [pc, #56]	@ (8009144 <xPortStartScheduler+0xf4>)
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800910e:	f000 f8fb 	bl	8009308 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009112:	4b0d      	ldr	r3, [pc, #52]	@ (8009148 <xPortStartScheduler+0xf8>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a0c      	ldr	r2, [pc, #48]	@ (8009148 <xPortStartScheduler+0xf8>)
 8009118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800911c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800911e:	f7ff ff83 	bl	8009028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009122:	f7ff fa47 	bl	80085b4 <vTaskSwitchContext>
	prvTaskExitError();
 8009126:	f7ff ff33 	bl	8008f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	e000e400 	.word	0xe000e400
 8009138:	20005220 	.word	0x20005220
 800913c:	20005224 	.word	0x20005224
 8009140:	e000ed20 	.word	0xe000ed20
 8009144:	20000020 	.word	0x20000020
 8009148:	e000ef34 	.word	0xe000ef34

0800914c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009156:	b672      	cpsid	i
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	b662      	cpsie	i
 8009166:	607b      	str	r3, [r7, #4]
}
 8009168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800916a:	4b11      	ldr	r3, [pc, #68]	@ (80091b0 <vPortEnterCritical+0x64>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3301      	adds	r3, #1
 8009170:	4a0f      	ldr	r2, [pc, #60]	@ (80091b0 <vPortEnterCritical+0x64>)
 8009172:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009174:	4b0e      	ldr	r3, [pc, #56]	@ (80091b0 <vPortEnterCritical+0x64>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d112      	bne.n	80091a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800917c:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <vPortEnterCritical+0x68>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00d      	beq.n	80091a2 <vPortEnterCritical+0x56>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	b672      	cpsid	i
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	b662      	cpsie	i
 800919a:	603b      	str	r3, [r7, #0]
}
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	e7fd      	b.n	800919e <vPortEnterCritical+0x52>
	}
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	20000020 	.word	0x20000020
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091be:	4b13      	ldr	r3, [pc, #76]	@ (800920c <vPortExitCritical+0x54>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10d      	bne.n	80091e2 <vPortExitCritical+0x2a>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	b672      	cpsid	i
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	b662      	cpsie	i
 80091da:	607b      	str	r3, [r7, #4]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80091e2:	4b0a      	ldr	r3, [pc, #40]	@ (800920c <vPortExitCritical+0x54>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	4a08      	ldr	r2, [pc, #32]	@ (800920c <vPortExitCritical+0x54>)
 80091ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091ec:	4b07      	ldr	r3, [pc, #28]	@ (800920c <vPortExitCritical+0x54>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d105      	bne.n	8009200 <vPortExitCritical+0x48>
 80091f4:	2300      	movs	r3, #0
 80091f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f383 8811 	msr	BASEPRI, r3
}
 80091fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000020 	.word	0x20000020

08009210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009210:	f3ef 8009 	mrs	r0, PSP
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	4b15      	ldr	r3, [pc, #84]	@ (8009270 <pxCurrentTCBConst>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	f01e 0f10 	tst.w	lr, #16
 8009220:	bf08      	it	eq
 8009222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922a:	6010      	str	r0, [r2, #0]
 800922c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009234:	b672      	cpsid	i
 8009236:	f380 8811 	msr	BASEPRI, r0
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	b662      	cpsie	i
 8009244:	f7ff f9b6 	bl	80085b4 <vTaskSwitchContext>
 8009248:	f04f 0000 	mov.w	r0, #0
 800924c:	f380 8811 	msr	BASEPRI, r0
 8009250:	bc09      	pop	{r0, r3}
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6808      	ldr	r0, [r1, #0]
 8009256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	f01e 0f10 	tst.w	lr, #16
 800925e:	bf08      	it	eq
 8009260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009264:	f380 8809 	msr	PSP, r0
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop

08009270 <pxCurrentTCBConst>:
 8009270:	200050ec 	.word	0x200050ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop

08009278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	b672      	cpsid	i
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	b662      	cpsie	i
 8009292:	607b      	str	r3, [r7, #4]
}
 8009294:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009296:	f7ff f8d1 	bl	800843c <xTaskIncrementTick>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092a0:	4b06      	ldr	r3, [pc, #24]	@ (80092bc <SysTick_Handler+0x44>)
 80092a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	2300      	movs	r3, #0
 80092aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	f383 8811 	msr	BASEPRI, r3
}
 80092b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092c4:	4b0b      	ldr	r3, [pc, #44]	@ (80092f4 <vPortSetupTimerInterrupt+0x34>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092ca:	4b0b      	ldr	r3, [pc, #44]	@ (80092f8 <vPortSetupTimerInterrupt+0x38>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092d0:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <vPortSetupTimerInterrupt+0x3c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009300 <vPortSetupTimerInterrupt+0x40>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	099b      	lsrs	r3, r3, #6
 80092dc:	4a09      	ldr	r2, [pc, #36]	@ (8009304 <vPortSetupTimerInterrupt+0x44>)
 80092de:	3b01      	subs	r3, #1
 80092e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092e2:	4b04      	ldr	r3, [pc, #16]	@ (80092f4 <vPortSetupTimerInterrupt+0x34>)
 80092e4:	2207      	movs	r2, #7
 80092e6:	601a      	str	r2, [r3, #0]
}
 80092e8:	bf00      	nop
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	e000e010 	.word	0xe000e010
 80092f8:	e000e018 	.word	0xe000e018
 80092fc:	20000000 	.word	0x20000000
 8009300:	10624dd3 	.word	0x10624dd3
 8009304:	e000e014 	.word	0xe000e014

08009308 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009308:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009318 <vPortEnableVFP+0x10>
 800930c:	6801      	ldr	r1, [r0, #0]
 800930e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009312:	6001      	str	r1, [r0, #0]
 8009314:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009316:	bf00      	nop
 8009318:	e000ed88 	.word	0xe000ed88

0800931c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009322:	f3ef 8305 	mrs	r3, IPSR
 8009326:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b0f      	cmp	r3, #15
 800932c:	d917      	bls.n	800935e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800932e:	4a1a      	ldr	r2, [pc, #104]	@ (8009398 <vPortValidateInterruptPriority+0x7c>)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009338:	4b18      	ldr	r3, [pc, #96]	@ (800939c <vPortValidateInterruptPriority+0x80>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	7afa      	ldrb	r2, [r7, #11]
 800933e:	429a      	cmp	r2, r3
 8009340:	d20d      	bcs.n	800935e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	b672      	cpsid	i
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	b662      	cpsie	i
 8009356:	607b      	str	r3, [r7, #4]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800935e:	4b10      	ldr	r3, [pc, #64]	@ (80093a0 <vPortValidateInterruptPriority+0x84>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009366:	4b0f      	ldr	r3, [pc, #60]	@ (80093a4 <vPortValidateInterruptPriority+0x88>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d90d      	bls.n	800938a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	b672      	cpsid	i
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	b662      	cpsie	i
 8009382:	603b      	str	r3, [r7, #0]
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	e7fd      	b.n	8009386 <vPortValidateInterruptPriority+0x6a>
	}
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	e000e3f0 	.word	0xe000e3f0
 800939c:	20005220 	.word	0x20005220
 80093a0:	e000ed0c 	.word	0xe000ed0c
 80093a4:	20005224 	.word	0x20005224

080093a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08a      	sub	sp, #40	@ 0x28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093b0:	2300      	movs	r3, #0
 80093b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093b4:	f7fe ff72 	bl	800829c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093b8:	4b5d      	ldr	r3, [pc, #372]	@ (8009530 <pvPortMalloc+0x188>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093c0:	f000 f920 	bl	8009604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009534 <pvPortMalloc+0x18c>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4013      	ands	r3, r2
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f040 8094 	bne.w	80094fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d020      	beq.n	800941a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80093d8:	2208      	movs	r2, #8
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4413      	add	r3, r2
 80093de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d017      	beq.n	800941a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f023 0307 	bic.w	r3, r3, #7
 80093f0:	3308      	adds	r3, #8
 80093f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f003 0307 	and.w	r3, r3, #7
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <pvPortMalloc+0x72>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009402:	b672      	cpsid	i
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	b662      	cpsie	i
 8009412:	617b      	str	r3, [r7, #20]
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	e7fd      	b.n	8009416 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d06c      	beq.n	80094fa <pvPortMalloc+0x152>
 8009420:	4b45      	ldr	r3, [pc, #276]	@ (8009538 <pvPortMalloc+0x190>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	429a      	cmp	r2, r3
 8009428:	d867      	bhi.n	80094fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800942a:	4b44      	ldr	r3, [pc, #272]	@ (800953c <pvPortMalloc+0x194>)
 800942c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800942e:	4b43      	ldr	r3, [pc, #268]	@ (800953c <pvPortMalloc+0x194>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009434:	e004      	b.n	8009440 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	429a      	cmp	r2, r3
 8009448:	d903      	bls.n	8009452 <pvPortMalloc+0xaa>
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1f1      	bne.n	8009436 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009452:	4b37      	ldr	r3, [pc, #220]	@ (8009530 <pvPortMalloc+0x188>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009458:	429a      	cmp	r2, r3
 800945a:	d04e      	beq.n	80094fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2208      	movs	r2, #8
 8009462:	4413      	add	r3, r2
 8009464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	1ad2      	subs	r2, r2, r3
 8009476:	2308      	movs	r3, #8
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	429a      	cmp	r2, r3
 800947c:	d922      	bls.n	80094c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800947e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4413      	add	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00d      	beq.n	80094ac <pvPortMalloc+0x104>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	b672      	cpsid	i
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	b662      	cpsie	i
 80094a4:	613b      	str	r3, [r7, #16]
}
 80094a6:	bf00      	nop
 80094a8:	bf00      	nop
 80094aa:	e7fd      	b.n	80094a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094be:	69b8      	ldr	r0, [r7, #24]
 80094c0:	f000 f902 	bl	80096c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009538 <pvPortMalloc+0x190>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009538 <pvPortMalloc+0x190>)
 80094d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094d2:	4b19      	ldr	r3, [pc, #100]	@ (8009538 <pvPortMalloc+0x190>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009540 <pvPortMalloc+0x198>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d203      	bcs.n	80094e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094de:	4b16      	ldr	r3, [pc, #88]	@ (8009538 <pvPortMalloc+0x190>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a17      	ldr	r2, [pc, #92]	@ (8009540 <pvPortMalloc+0x198>)
 80094e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	4b12      	ldr	r3, [pc, #72]	@ (8009534 <pvPortMalloc+0x18c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094fa:	f7fe fedd 	bl	80082b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00d      	beq.n	8009524 <pvPortMalloc+0x17c>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950c:	b672      	cpsid	i
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	b662      	cpsie	i
 800951c:	60fb      	str	r3, [r7, #12]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <pvPortMalloc+0x178>
	return pvReturn;
 8009524:	69fb      	ldr	r3, [r7, #28]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3728      	adds	r7, #40	@ 0x28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20008e30 	.word	0x20008e30
 8009534:	20008e3c 	.word	0x20008e3c
 8009538:	20008e34 	.word	0x20008e34
 800953c:	20008e28 	.word	0x20008e28
 8009540:	20008e38 	.word	0x20008e38

08009544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d04e      	beq.n	80095f4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009556:	2308      	movs	r3, #8
 8009558:	425b      	negs	r3, r3
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4413      	add	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	4b24      	ldr	r3, [pc, #144]	@ (80095fc <vPortFree+0xb8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <vPortFree+0x4a>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	b672      	cpsid	i
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	b662      	cpsie	i
 8009586:	60fb      	str	r3, [r7, #12]
}
 8009588:	bf00      	nop
 800958a:	bf00      	nop
 800958c:	e7fd      	b.n	800958a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00d      	beq.n	80095b2 <vPortFree+0x6e>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959a:	b672      	cpsid	i
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	b662      	cpsie	i
 80095aa:	60bb      	str	r3, [r7, #8]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	4b11      	ldr	r3, [pc, #68]	@ (80095fc <vPortFree+0xb8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4013      	ands	r3, r2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d019      	beq.n	80095f4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d115      	bne.n	80095f4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	4b0b      	ldr	r3, [pc, #44]	@ (80095fc <vPortFree+0xb8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	43db      	mvns	r3, r3
 80095d2:	401a      	ands	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095d8:	f7fe fe60 	bl	800829c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	4b07      	ldr	r3, [pc, #28]	@ (8009600 <vPortFree+0xbc>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4413      	add	r3, r2
 80095e6:	4a06      	ldr	r2, [pc, #24]	@ (8009600 <vPortFree+0xbc>)
 80095e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095ea:	6938      	ldr	r0, [r7, #16]
 80095ec:	f000 f86c 	bl	80096c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80095f0:	f7fe fe62 	bl	80082b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095f4:	bf00      	nop
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20008e3c 	.word	0x20008e3c
 8009600:	20008e34 	.word	0x20008e34

08009604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800960a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800960e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009610:	4b27      	ldr	r3, [pc, #156]	@ (80096b0 <prvHeapInit+0xac>)
 8009612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00c      	beq.n	8009638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3307      	adds	r3, #7
 8009622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0307 	bic.w	r3, r3, #7
 800962a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	4a1f      	ldr	r2, [pc, #124]	@ (80096b0 <prvHeapInit+0xac>)
 8009634:	4413      	add	r3, r2
 8009636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800963c:	4a1d      	ldr	r2, [pc, #116]	@ (80096b4 <prvHeapInit+0xb0>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009642:	4b1c      	ldr	r3, [pc, #112]	@ (80096b4 <prvHeapInit+0xb0>)
 8009644:	2200      	movs	r2, #0
 8009646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	4413      	add	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009650:	2208      	movs	r2, #8
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1a9b      	subs	r3, r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0307 	bic.w	r3, r3, #7
 800965e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4a15      	ldr	r2, [pc, #84]	@ (80096b8 <prvHeapInit+0xb4>)
 8009664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009666:	4b14      	ldr	r3, [pc, #80]	@ (80096b8 <prvHeapInit+0xb4>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2200      	movs	r2, #0
 800966c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800966e:	4b12      	ldr	r3, [pc, #72]	@ (80096b8 <prvHeapInit+0xb4>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	1ad2      	subs	r2, r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <prvHeapInit+0xb4>)
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	4a0a      	ldr	r2, [pc, #40]	@ (80096bc <prvHeapInit+0xb8>)
 8009692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	4a09      	ldr	r2, [pc, #36]	@ (80096c0 <prvHeapInit+0xbc>)
 800969a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800969c:	4b09      	ldr	r3, [pc, #36]	@ (80096c4 <prvHeapInit+0xc0>)
 800969e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80096a2:	601a      	str	r2, [r3, #0]
}
 80096a4:	bf00      	nop
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	20005228 	.word	0x20005228
 80096b4:	20008e28 	.word	0x20008e28
 80096b8:	20008e30 	.word	0x20008e30
 80096bc:	20008e38 	.word	0x20008e38
 80096c0:	20008e34 	.word	0x20008e34
 80096c4:	20008e3c 	.word	0x20008e3c

080096c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096d0:	4b28      	ldr	r3, [pc, #160]	@ (8009774 <prvInsertBlockIntoFreeList+0xac>)
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	e002      	b.n	80096dc <prvInsertBlockIntoFreeList+0x14>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d8f7      	bhi.n	80096d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	4413      	add	r3, r2
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d108      	bne.n	800970a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	441a      	add	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	441a      	add	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d118      	bne.n	8009750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	4b15      	ldr	r3, [pc, #84]	@ (8009778 <prvInsertBlockIntoFreeList+0xb0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	429a      	cmp	r2, r3
 8009728:	d00d      	beq.n	8009746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	441a      	add	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	e008      	b.n	8009758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009746:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <prvInsertBlockIntoFreeList+0xb0>)
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	e003      	b.n	8009758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d002      	beq.n	8009766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009766:	bf00      	nop
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20008e28 	.word	0x20008e28
 8009778:	20008e30 	.word	0x20008e30

0800977c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	330c      	adds	r3, #12
 800978c:	461a      	mov	r2, r3
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f001 ff05 	bl	800b5a0 <tcpip_send_msg_wait_sem>
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800979a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d103      	bne.n	80097aa <netconn_apimsg+0x2e>
    return apimsg->err;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80097a8:	e001      	b.n	80097ae <netconn_apimsg+0x32>
  }
  return err;
 80097aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08c      	sub	sp, #48	@ 0x30
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	603a      	str	r2, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
 80097c4:	460b      	mov	r3, r1
 80097c6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fdb9 	bl	800a344 <netconn_alloc>
 80097d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d054      	beq.n	8009884 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80097da:	79bb      	ldrb	r3, [r7, #6]
 80097dc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80097de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80097e2:	f107 0308 	add.w	r3, r7, #8
 80097e6:	4619      	mov	r1, r3
 80097e8:	4829      	ldr	r0, [pc, #164]	@ (8009890 <netconn_new_with_proto_and_callback+0xd8>)
 80097ea:	f7ff ffc7 	bl	800977c <netconn_apimsg>
 80097ee:	4603      	mov	r3, r0
 80097f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80097f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d043      	beq.n	8009884 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80097fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <netconn_new_with_proto_and_callback+0x58>
 8009804:	4b23      	ldr	r3, [pc, #140]	@ (8009894 <netconn_new_with_proto_and_callback+0xdc>)
 8009806:	22a3      	movs	r2, #163	@ 0xa3
 8009808:	4923      	ldr	r1, [pc, #140]	@ (8009898 <netconn_new_with_proto_and_callback+0xe0>)
 800980a:	4824      	ldr	r0, [pc, #144]	@ (800989c <netconn_new_with_proto_and_callback+0xe4>)
 800980c:	f7f7 fc60 	bl	80010d0 <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009812:	3310      	adds	r3, #16
 8009814:	4618      	mov	r0, r3
 8009816:	f00c fe3e 	bl	8016496 <sys_mbox_valid>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d105      	bne.n	800982c <netconn_new_with_proto_and_callback+0x74>
 8009820:	4b1c      	ldr	r3, [pc, #112]	@ (8009894 <netconn_new_with_proto_and_callback+0xdc>)
 8009822:	22a4      	movs	r2, #164	@ 0xa4
 8009824:	491e      	ldr	r1, [pc, #120]	@ (80098a0 <netconn_new_with_proto_and_callback+0xe8>)
 8009826:	481d      	ldr	r0, [pc, #116]	@ (800989c <netconn_new_with_proto_and_callback+0xe4>)
 8009828:	f7f7 fc52 	bl	80010d0 <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	3314      	adds	r3, #20
 8009830:	4618      	mov	r0, r3
 8009832:	f00c fe30 	bl	8016496 <sys_mbox_valid>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <netconn_new_with_proto_and_callback+0x90>
 800983c:	4b15      	ldr	r3, [pc, #84]	@ (8009894 <netconn_new_with_proto_and_callback+0xdc>)
 800983e:	22a6      	movs	r2, #166	@ 0xa6
 8009840:	4918      	ldr	r1, [pc, #96]	@ (80098a4 <netconn_new_with_proto_and_callback+0xec>)
 8009842:	4816      	ldr	r0, [pc, #88]	@ (800989c <netconn_new_with_proto_and_callback+0xe4>)
 8009844:	f7f7 fc44 	bl	80010d0 <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984a:	330c      	adds	r3, #12
 800984c:	4618      	mov	r0, r3
 800984e:	f00c feb3 	bl	80165b8 <sys_sem_valid>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d105      	bne.n	8009864 <netconn_new_with_proto_and_callback+0xac>
 8009858:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <netconn_new_with_proto_and_callback+0xdc>)
 800985a:	22a9      	movs	r2, #169	@ 0xa9
 800985c:	4912      	ldr	r1, [pc, #72]	@ (80098a8 <netconn_new_with_proto_and_callback+0xf0>)
 800985e:	480f      	ldr	r0, [pc, #60]	@ (800989c <netconn_new_with_proto_and_callback+0xe4>)
 8009860:	f7f7 fc36 	bl	80010d0 <printf>
      sys_sem_free(&conn->op_completed);
 8009864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009866:	330c      	adds	r3, #12
 8009868:	4618      	mov	r0, r3
 800986a:	f00c fe98 	bl	801659e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	3310      	adds	r3, #16
 8009872:	4618      	mov	r0, r3
 8009874:	f00c fd88 	bl	8016388 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800987a:	2007      	movs	r0, #7
 800987c:	f002 fc3e 	bl	800c0fc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009880:	2300      	movs	r3, #0
 8009882:	e000      	b.n	8009886 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009886:	4618      	mov	r0, r3
 8009888:	3730      	adds	r7, #48	@ 0x30
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	0800a319 	.word	0x0800a319
 8009894:	08017a24 	.word	0x08017a24
 8009898:	08017a58 	.word	0x08017a58
 800989c:	08017a7c 	.word	0x08017a7c
 80098a0:	08017aa4 	.word	0x08017aa4
 80098a4:	08017abc 	.word	0x08017abc
 80098a8:	08017ae0 	.word	0x08017ae0

080098ac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	@ 0x30
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <netconn_prepare_delete+0x12>
    return ERR_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	e014      	b.n	80098e8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80098c2:	2329      	movs	r3, #41	@ 0x29
 80098c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80098c6:	f107 030c 	add.w	r3, r7, #12
 80098ca:	4619      	mov	r1, r3
 80098cc:	4808      	ldr	r0, [pc, #32]	@ (80098f0 <netconn_prepare_delete+0x44>)
 80098ce:	f7ff ff55 	bl	800977c <netconn_apimsg>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80098d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <netconn_prepare_delete+0x3a>
    return err;
 80098e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80098e4:	e000      	b.n	80098e8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3730      	adds	r7, #48	@ 0x30
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	0800a885 	.word	0x0800a885

080098f4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <netconn_delete+0x12>
    return ERR_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	e00d      	b.n	8009922 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff ffd0 	bl	80098ac <netconn_prepare_delete>
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <netconn_delete+0x2a>
    netconn_free(conn);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fd81 	bl	800a420 <netconn_free>
  }
  return err;
 800991e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08e      	sub	sp, #56	@ 0x38
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d109      	bne.n	8009954 <netconn_connect+0x28>
 8009940:	4b11      	ldr	r3, [pc, #68]	@ (8009988 <netconn_connect+0x5c>)
 8009942:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8009946:	4911      	ldr	r1, [pc, #68]	@ (800998c <netconn_connect+0x60>)
 8009948:	4811      	ldr	r0, [pc, #68]	@ (8009990 <netconn_connect+0x64>)
 800994a:	f7f7 fbc1 	bl	80010d0 <printf>
 800994e:	f06f 030f 	mvn.w	r3, #15
 8009952:	e015      	b.n	8009980 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800995a:	4b0e      	ldr	r3, [pc, #56]	@ (8009994 <netconn_connect+0x68>)
 800995c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800996a:	f107 0314 	add.w	r3, r7, #20
 800996e:	4619      	mov	r1, r3
 8009970:	4809      	ldr	r0, [pc, #36]	@ (8009998 <netconn_connect+0x6c>)
 8009972:	f7ff ff03 	bl	800977c <netconn_apimsg>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800997c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009980:	4618      	mov	r0, r3
 8009982:	3738      	adds	r7, #56	@ 0x38
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	08017a24 	.word	0x08017a24
 800998c:	08017b98 	.word	0x08017b98
 8009990:	08017a7c 	.word	0x08017a7c
 8009994:	0801ae94 	.word	0x0801ae94
 8009998:	0800ab6d 	.word	0x0800ab6d

0800999c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80099b2:	78fa      	ldrb	r2, [r7, #3]
 80099b4:	f107 0110 	add.w	r1, r7, #16
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	4613      	mov	r3, r2
 80099be:	2201      	movs	r2, #1
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 f805 	bl	80099d0 <netconn_write_vectors_partly>
 80099c6:	4603      	mov	r3, r0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b092      	sub	sp, #72	@ 0x48
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	4611      	mov	r1, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	460b      	mov	r3, r1
 80099e0:	80fb      	strh	r3, [r7, #6]
 80099e2:	4613      	mov	r3, r2
 80099e4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d109      	bne.n	8009a00 <netconn_write_vectors_partly+0x30>
 80099ec:	4b4e      	ldr	r3, [pc, #312]	@ (8009b28 <netconn_write_vectors_partly+0x158>)
 80099ee:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80099f2:	494e      	ldr	r1, [pc, #312]	@ (8009b2c <netconn_write_vectors_partly+0x15c>)
 80099f4:	484e      	ldr	r0, [pc, #312]	@ (8009b30 <netconn_write_vectors_partly+0x160>)
 80099f6:	f7f7 fb6b 	bl	80010d0 <printf>
 80099fa:	f06f 030f 	mvn.w	r3, #15
 80099fe:	e08e      	b.n	8009b1e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a08:	2b10      	cmp	r3, #16
 8009a0a:	d009      	beq.n	8009a20 <netconn_write_vectors_partly+0x50>
 8009a0c:	4b46      	ldr	r3, [pc, #280]	@ (8009b28 <netconn_write_vectors_partly+0x158>)
 8009a0e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009a12:	4948      	ldr	r1, [pc, #288]	@ (8009b34 <netconn_write_vectors_partly+0x164>)
 8009a14:	4846      	ldr	r0, [pc, #280]	@ (8009b30 <netconn_write_vectors_partly+0x160>)
 8009a16:	f7f7 fb5b 	bl	80010d0 <printf>
 8009a1a:	f06f 0305 	mvn.w	r3, #5
 8009a1e:	e07e      	b.n	8009b1e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	7f1b      	ldrb	r3, [r3, #28]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <netconn_write_vectors_partly+0x66>
 8009a2c:	797b      	ldrb	r3, [r7, #5]
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <netconn_write_vectors_partly+0x6a>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <netconn_write_vectors_partly+0x6c>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009a40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d005      	beq.n	8009a54 <netconn_write_vectors_partly+0x84>
 8009a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009a4e:	f06f 0305 	mvn.w	r3, #5
 8009a52:	e064      	b.n	8009b1e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009a58:	2300      	movs	r3, #0
 8009a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a5c:	e015      	b.n	8009a8a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	4413      	add	r3, r2
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a6a:	4413      	add	r3, r2
 8009a6c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8009a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	4413      	add	r3, r2
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d202      	bcs.n	8009a84 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009a7e:	f06f 0305 	mvn.w	r3, #5
 8009a82:	e04c      	b.n	8009b1e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a86:	3301      	adds	r3, #1
 8009a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	dbe5      	blt.n	8009a5e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e040      	b.n	8009b1e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da0a      	bge.n	8009ab8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d102      	bne.n	8009aae <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009aa8:	f06f 0305 	mvn.w	r3, #5
 8009aac:	e037      	b.n	8009b1e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009aae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009ac0:	88fb      	ldrh	r3, [r7, #6]
 8009ac2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009ac8:	797b      	ldrb	r3, [r7, #5]
 8009aca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009ad6:	f107 0314 	add.w	r3, r7, #20
 8009ada:	4619      	mov	r1, r3
 8009adc:	4816      	ldr	r0, [pc, #88]	@ (8009b38 <netconn_write_vectors_partly+0x168>)
 8009ade:	f7ff fe4d 	bl	800977c <netconn_apimsg>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009ae8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d114      	bne.n	8009b1a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009afa:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009afc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d006      	beq.n	8009b1a <netconn_write_vectors_partly+0x14a>
 8009b0c:	4b06      	ldr	r3, [pc, #24]	@ (8009b28 <netconn_write_vectors_partly+0x158>)
 8009b0e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009b12:	490a      	ldr	r1, [pc, #40]	@ (8009b3c <netconn_write_vectors_partly+0x16c>)
 8009b14:	4806      	ldr	r0, [pc, #24]	@ (8009b30 <netconn_write_vectors_partly+0x160>)
 8009b16:	f7f7 fadb 	bl	80010d0 <printf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009b1a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3748      	adds	r7, #72	@ 0x48
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	08017a24 	.word	0x08017a24
 8009b2c:	08017cfc 	.word	0x08017cfc
 8009b30:	08017a7c 	.word	0x08017a7c
 8009b34:	08017d18 	.word	0x08017d18
 8009b38:	0800b081 	.word	0x0800b081
 8009b3c:	08017d3c 	.word	0x08017d3c

08009b40 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08c      	sub	sp, #48	@ 0x30
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <netconn_close_shutdown+0x26>
 8009b52:	4b0f      	ldr	r3, [pc, #60]	@ (8009b90 <netconn_close_shutdown+0x50>)
 8009b54:	f240 4247 	movw	r2, #1095	@ 0x447
 8009b58:	490e      	ldr	r1, [pc, #56]	@ (8009b94 <netconn_close_shutdown+0x54>)
 8009b5a:	480f      	ldr	r0, [pc, #60]	@ (8009b98 <netconn_close_shutdown+0x58>)
 8009b5c:	f7f7 fab8 	bl	80010d0 <printf>
 8009b60:	f06f 030f 	mvn.w	r3, #15
 8009b64:	e010      	b.n	8009b88 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009b6e:	2329      	movs	r3, #41	@ 0x29
 8009b70:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009b72:	f107 030c 	add.w	r3, r7, #12
 8009b76:	4619      	mov	r1, r3
 8009b78:	4808      	ldr	r0, [pc, #32]	@ (8009b9c <netconn_close_shutdown+0x5c>)
 8009b7a:	f7ff fdff 	bl	800977c <netconn_apimsg>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009b84:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3730      	adds	r7, #48	@ 0x30
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	08017a24 	.word	0x08017a24
 8009b94:	08017d60 	.word	0x08017d60
 8009b98:	08017a7c 	.word	0x08017a7c
 8009b9c:	0800b199 	.word	0x0800b199

08009ba0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009ba8:	2103      	movs	r1, #3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff ffc8 	bl	8009b40 <netconn_close_shutdown>
 8009bb0:	4603      	mov	r3, r0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <netconn_err+0x12>
    return ERR_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e00d      	b.n	8009be8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009bcc:	f00c fd7e 	bl	80166cc <sys_arch_protect>
 8009bd0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	7a1b      	ldrb	r3, [r3, #8]
 8009bd6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f00c fd82 	bl	80166e8 <sys_arch_unprotect>
  return err;
 8009be4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfe:	f113 0f0d 	cmn.w	r3, #13
 8009c02:	d009      	beq.n	8009c18 <lwip_netconn_err_to_msg+0x28>
 8009c04:	f113 0f0d 	cmn.w	r3, #13
 8009c08:	dc0c      	bgt.n	8009c24 <lwip_netconn_err_to_msg+0x34>
 8009c0a:	f113 0f0f 	cmn.w	r3, #15
 8009c0e:	d007      	beq.n	8009c20 <lwip_netconn_err_to_msg+0x30>
 8009c10:	f113 0f0e 	cmn.w	r3, #14
 8009c14:	d002      	beq.n	8009c1c <lwip_netconn_err_to_msg+0x2c>
 8009c16:	e005      	b.n	8009c24 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009c18:	4b0a      	ldr	r3, [pc, #40]	@ (8009c44 <lwip_netconn_err_to_msg+0x54>)
 8009c1a:	e00e      	b.n	8009c3a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c48 <lwip_netconn_err_to_msg+0x58>)
 8009c1e:	e00c      	b.n	8009c3a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009c20:	4b0a      	ldr	r3, [pc, #40]	@ (8009c4c <lwip_netconn_err_to_msg+0x5c>)
 8009c22:	e00a      	b.n	8009c3a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <lwip_netconn_err_to_msg+0x48>
 8009c2c:	4b08      	ldr	r3, [pc, #32]	@ (8009c50 <lwip_netconn_err_to_msg+0x60>)
 8009c2e:	227d      	movs	r2, #125	@ 0x7d
 8009c30:	4908      	ldr	r1, [pc, #32]	@ (8009c54 <lwip_netconn_err_to_msg+0x64>)
 8009c32:	4809      	ldr	r0, [pc, #36]	@ (8009c58 <lwip_netconn_err_to_msg+0x68>)
 8009c34:	f7f7 fa4c 	bl	80010d0 <printf>
      return NULL;
 8009c38:	2300      	movs	r3, #0
  }
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	0801ad80 	.word	0x0801ad80
 8009c48:	0801ad81 	.word	0x0801ad81
 8009c4c:	0801ad82 	.word	0x0801ad82
 8009c50:	08017d7c 	.word	0x08017d7c
 8009c54:	08017db0 	.word	0x08017db0
 8009c58:	08017dc0 	.word	0x08017dc0

08009c5c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d105      	bne.n	8009c78 <lwip_netconn_is_err_msg+0x1c>
 8009c6c:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <lwip_netconn_is_err_msg+0x5c>)
 8009c6e:	2285      	movs	r2, #133	@ 0x85
 8009c70:	4912      	ldr	r1, [pc, #72]	@ (8009cbc <lwip_netconn_is_err_msg+0x60>)
 8009c72:	4813      	ldr	r0, [pc, #76]	@ (8009cc0 <lwip_netconn_is_err_msg+0x64>)
 8009c74:	f7f7 fa2c 	bl	80010d0 <printf>

  if (msg == &netconn_aborted) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a12      	ldr	r2, [pc, #72]	@ (8009cc4 <lwip_netconn_is_err_msg+0x68>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d104      	bne.n	8009c8a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	22f3      	movs	r2, #243	@ 0xf3
 8009c84:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e012      	b.n	8009cb0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009cc8 <lwip_netconn_is_err_msg+0x6c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d104      	bne.n	8009c9c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	22f2      	movs	r2, #242	@ 0xf2
 8009c96:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e009      	b.n	8009cb0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8009ccc <lwip_netconn_is_err_msg+0x70>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d104      	bne.n	8009cae <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	22f1      	movs	r2, #241	@ 0xf1
 8009ca8:	701a      	strb	r2, [r3, #0]
    return 1;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	08017d7c 	.word	0x08017d7c
 8009cbc:	08017de8 	.word	0x08017de8
 8009cc0:	08017dc0 	.word	0x08017dc0
 8009cc4:	0801ad80 	.word	0x0801ad80
 8009cc8:	0801ad81 	.word	0x0801ad81
 8009ccc:	0801ad82 	.word	0x0801ad82

08009cd0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d105      	bne.n	8009cf0 <recv_udp+0x20>
 8009ce4:	4b34      	ldr	r3, [pc, #208]	@ (8009db8 <recv_udp+0xe8>)
 8009ce6:	22e5      	movs	r2, #229	@ 0xe5
 8009ce8:	4934      	ldr	r1, [pc, #208]	@ (8009dbc <recv_udp+0xec>)
 8009cea:	4835      	ldr	r0, [pc, #212]	@ (8009dc0 <recv_udp+0xf0>)
 8009cec:	f7f7 f9f0 	bl	80010d0 <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d105      	bne.n	8009d02 <recv_udp+0x32>
 8009cf6:	4b30      	ldr	r3, [pc, #192]	@ (8009db8 <recv_udp+0xe8>)
 8009cf8:	22e6      	movs	r2, #230	@ 0xe6
 8009cfa:	4932      	ldr	r1, [pc, #200]	@ (8009dc4 <recv_udp+0xf4>)
 8009cfc:	4830      	ldr	r0, [pc, #192]	@ (8009dc0 <recv_udp+0xf0>)
 8009cfe:	f7f7 f9e7 	bl	80010d0 <printf>
  conn = (struct netconn *)arg;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <recv_udp+0x44>
    pbuf_free(p);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f003 f899 	bl	800ce44 <pbuf_free>
    return;
 8009d12:	e04d      	b.n	8009db0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d005      	beq.n	8009d2a <recv_udp+0x5a>
 8009d1e:	4b26      	ldr	r3, [pc, #152]	@ (8009db8 <recv_udp+0xe8>)
 8009d20:	22ee      	movs	r2, #238	@ 0xee
 8009d22:	4929      	ldr	r1, [pc, #164]	@ (8009dc8 <recv_udp+0xf8>)
 8009d24:	4826      	ldr	r0, [pc, #152]	@ (8009dc0 <recv_udp+0xf0>)
 8009d26:	f7f7 f9d3 	bl	80010d0 <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	3310      	adds	r3, #16
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f00c fbb1 	bl	8016496 <sys_mbox_valid>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d103      	bne.n	8009d42 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f003 f882 	bl	800ce44 <pbuf_free>
    return;
 8009d40:	e036      	b.n	8009db0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009d42:	2006      	movs	r0, #6
 8009d44:	f002 f964 	bl	800c010 <memp_malloc>
 8009d48:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d103      	bne.n	8009d58 <recv_udp+0x88>
    pbuf_free(p);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f003 f877 	bl	800ce44 <pbuf_free>
    return;
 8009d56:	e02b      	b.n	8009db0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <recv_udp+0xa0>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	e000      	b.n	8009d72 <recv_udp+0xa2>
 8009d70:	2300      	movs	r3, #0
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009d7a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	891b      	ldrh	r3, [r3, #8]
 8009d80:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	3310      	adds	r3, #16
 8009d86:	69b9      	ldr	r1, [r7, #24]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f00c fb0f 	bl	80163ac <sys_mbox_trypost>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <recv_udp+0xcc>
    netbuf_delete(buf);
 8009d94:	69b8      	ldr	r0, [r7, #24]
 8009d96:	f001 fa8b 	bl	800b2b0 <netbuf_delete>
    return;
 8009d9a:	e009      	b.n	8009db0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <recv_udp+0xe0>
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da8:	8afa      	ldrh	r2, [r7, #22]
 8009daa:	2100      	movs	r1, #0
 8009dac:	69f8      	ldr	r0, [r7, #28]
 8009dae:	4798      	blx	r3
  }
}
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	08017d7c 	.word	0x08017d7c
 8009dbc:	08017df4 	.word	0x08017df4
 8009dc0:	08017dc0 	.word	0x08017dc0
 8009dc4:	08017e18 	.word	0x08017e18
 8009dc8:	08017e38 	.word	0x08017e38

08009dcc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d106      	bne.n	8009dee <recv_tcp+0x22>
 8009de0:	4b36      	ldr	r3, [pc, #216]	@ (8009ebc <recv_tcp+0xf0>)
 8009de2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009de6:	4936      	ldr	r1, [pc, #216]	@ (8009ec0 <recv_tcp+0xf4>)
 8009de8:	4836      	ldr	r0, [pc, #216]	@ (8009ec4 <recv_tcp+0xf8>)
 8009dea:	f7f7 f971 	bl	80010d0 <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <recv_tcp+0x36>
 8009df4:	4b31      	ldr	r3, [pc, #196]	@ (8009ebc <recv_tcp+0xf0>)
 8009df6:	f240 122d 	movw	r2, #301	@ 0x12d
 8009dfa:	4933      	ldr	r1, [pc, #204]	@ (8009ec8 <recv_tcp+0xfc>)
 8009dfc:	4831      	ldr	r0, [pc, #196]	@ (8009ec4 <recv_tcp+0xf8>)
 8009dfe:	f7f7 f967 	bl	80010d0 <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d006      	beq.n	8009e18 <recv_tcp+0x4c>
 8009e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8009ebc <recv_tcp+0xf0>)
 8009e0c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009e10:	492e      	ldr	r1, [pc, #184]	@ (8009ecc <recv_tcp+0x100>)
 8009e12:	482c      	ldr	r0, [pc, #176]	@ (8009ec4 <recv_tcp+0xf8>)
 8009e14:	f7f7 f95c 	bl	80010d0 <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d102      	bne.n	8009e28 <recv_tcp+0x5c>
    return ERR_VAL;
 8009e22:	f06f 0305 	mvn.w	r3, #5
 8009e26:	e045      	b.n	8009eb4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d006      	beq.n	8009e40 <recv_tcp+0x74>
 8009e32:	4b22      	ldr	r3, [pc, #136]	@ (8009ebc <recv_tcp+0xf0>)
 8009e34:	f240 1235 	movw	r2, #309	@ 0x135
 8009e38:	4925      	ldr	r1, [pc, #148]	@ (8009ed0 <recv_tcp+0x104>)
 8009e3a:	4822      	ldr	r0, [pc, #136]	@ (8009ec4 <recv_tcp+0xf8>)
 8009e3c:	f7f7 f948 	bl	80010d0 <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	3310      	adds	r3, #16
 8009e44:	4618      	mov	r0, r3
 8009e46:	f00c fb26 	bl	8016496 <sys_mbox_valid>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10d      	bne.n	8009e6c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d008      	beq.n	8009e68 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	891b      	ldrh	r3, [r3, #8]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68b8      	ldr	r0, [r7, #8]
 8009e5e:	f003 fe47 	bl	800daf0 <tcp_recved>
      pbuf_free(p);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f002 ffee 	bl	800ce44 <pbuf_free>
    }
    return ERR_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	e023      	b.n	8009eb4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <recv_tcp+0xb2>
    msg = p;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	891b      	ldrh	r3, [r3, #8]
 8009e7a:	83fb      	strh	r3, [r7, #30]
 8009e7c:	e003      	b.n	8009e86 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009e7e:	4b15      	ldr	r3, [pc, #84]	@ (8009ed4 <recv_tcp+0x108>)
 8009e80:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	3310      	adds	r3, #16
 8009e8a:	69b9      	ldr	r1, [r7, #24]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f00c fa8d 	bl	80163ac <sys_mbox_trypost>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009e98:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9c:	e00a      	b.n	8009eb4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d005      	beq.n	8009eb2 <recv_tcp+0xe6>
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eaa:	8bfa      	ldrh	r2, [r7, #30]
 8009eac:	2100      	movs	r1, #0
 8009eae:	6978      	ldr	r0, [r7, #20]
 8009eb0:	4798      	blx	r3
  }

  return ERR_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3720      	adds	r7, #32
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	08017d7c 	.word	0x08017d7c
 8009ec0:	08017e58 	.word	0x08017e58
 8009ec4:	08017dc0 	.word	0x08017dc0
 8009ec8:	08017e7c 	.word	0x08017e7c
 8009ecc:	08017e9c 	.word	0x08017e9c
 8009ed0:	08017eb4 	.word	0x08017eb4
 8009ed4:	0801ad82 	.word	0x0801ad82

08009ed8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d106      	bne.n	8009efa <poll_tcp+0x22>
 8009eec:	4b29      	ldr	r3, [pc, #164]	@ (8009f94 <poll_tcp+0xbc>)
 8009eee:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009ef2:	4929      	ldr	r1, [pc, #164]	@ (8009f98 <poll_tcp+0xc0>)
 8009ef4:	4829      	ldr	r0, [pc, #164]	@ (8009f9c <poll_tcp+0xc4>)
 8009ef6:	f7f7 f8eb 	bl	80010d0 <printf>

  if (conn->state == NETCONN_WRITE) {
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d104      	bne.n	8009f0c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009f02:	2101      	movs	r1, #1
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 feef 	bl	800ace8 <lwip_netconn_do_writemore>
 8009f0a:	e016      	b.n	8009f3a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	785b      	ldrb	r3, [r3, #1]
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	d112      	bne.n	8009f3a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <poll_tcp+0x5a>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	7a5b      	ldrb	r3, [r3, #9]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d005      	beq.n	8009f32 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	7a5a      	ldrb	r2, [r3, #9]
 8009f2c:	3a01      	subs	r2, #1
 8009f2e:	b2d2      	uxtb	r2, r2
 8009f30:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009f32:	2101      	movs	r1, #1
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 fb3b 	bl	800a5b0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	7f1b      	ldrb	r3, [r3, #28]
 8009f3e:	f003 0310 	and.w	r3, r3, #16
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d021      	beq.n	8009f8a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d01d      	beq.n	8009f8a <poll_tcp+0xb2>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009f56:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009f5a:	d316      	bcc.n	8009f8a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d810      	bhi.n	8009f8a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	7f1b      	ldrb	r3, [r3, #28]
 8009f6c:	f023 0310 	bic.w	r3, r3, #16
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <poll_tcp+0xb2>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f82:	2200      	movs	r2, #0
 8009f84:	2102      	movs	r1, #2
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	08017d7c 	.word	0x08017d7c
 8009f98:	08017ed4 	.word	0x08017ed4
 8009f9c:	08017dc0 	.word	0x08017dc0

08009fa0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <sent_tcp+0x26>
 8009fb8:	4b20      	ldr	r3, [pc, #128]	@ (800a03c <sent_tcp+0x9c>)
 8009fba:	f240 1293 	movw	r2, #403	@ 0x193
 8009fbe:	4920      	ldr	r1, [pc, #128]	@ (800a040 <sent_tcp+0xa0>)
 8009fc0:	4820      	ldr	r0, [pc, #128]	@ (800a044 <sent_tcp+0xa4>)
 8009fc2:	f7f7 f885 	bl	80010d0 <printf>

  if (conn) {
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d032      	beq.n	800a032 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d104      	bne.n	8009fde <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	6978      	ldr	r0, [r7, #20]
 8009fd8:	f000 fe86 	bl	800ace8 <lwip_netconn_do_writemore>
 8009fdc:	e007      	b.n	8009fee <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d103      	bne.n	8009fee <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	6978      	ldr	r0, [r7, #20]
 8009fea:	f000 fae1 	bl	800a5b0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d01d      	beq.n	800a032 <sent_tcp+0x92>
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009ffe:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a002:	d316      	bcc.n	800a032 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d810      	bhi.n	800a032 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	7f1b      	ldrb	r3, [r3, #28]
 800a014:	f023 0310 	bic.w	r3, r3, #16
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	d005      	beq.n	800a032 <sent_tcp+0x92>
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	2102      	movs	r1, #2
 800a02e:	6978      	ldr	r0, [r7, #20]
 800a030:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	08017d7c 	.word	0x08017d7c
 800a040:	08017ed4 	.word	0x08017ed4
 800a044:	08017dc0 	.word	0x08017dc0

0800a048 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <err_tcp+0x24>
 800a05e:	4b5f      	ldr	r3, [pc, #380]	@ (800a1dc <err_tcp+0x194>)
 800a060:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a064:	495e      	ldr	r1, [pc, #376]	@ (800a1e0 <err_tcp+0x198>)
 800a066:	485f      	ldr	r0, [pc, #380]	@ (800a1e4 <err_tcp+0x19c>)
 800a068:	f7f7 f832 	bl	80010d0 <printf>

  SYS_ARCH_PROTECT(lev);
 800a06c:	f00c fb2e 	bl	80166cc <sys_arch_protect>
 800a070:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	2200      	movs	r2, #0
 800a076:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	78fa      	ldrb	r2, [r7, #3]
 800a07c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	7f1b      	ldrb	r3, [r3, #28]
 800a082:	f043 0301 	orr.w	r3, r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	785b      	ldrb	r3, [r3, #1]
 800a090:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	2200      	movs	r2, #0
 800a096:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a098:	69b8      	ldr	r0, [r7, #24]
 800a09a:	f00c fb25 	bl	80166e8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <err_tcp+0x6a>
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2104      	movs	r1, #4
 800a0ae:	69f8      	ldr	r0, [r7, #28]
 800a0b0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <err_tcp+0x7e>
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	69f8      	ldr	r0, [r7, #28]
 800a0c4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <err_tcp+0x92>
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2102      	movs	r1, #2
 800a0d6:	69f8      	ldr	r0, [r7, #28]
 800a0d8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a0da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff fd86 	bl	8009bf0 <lwip_netconn_err_to_msg>
 800a0e4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	3310      	adds	r3, #16
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f00c f9d3 	bl	8016496 <sys_mbox_valid>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	3310      	adds	r3, #16
 800a0fa:	6939      	ldr	r1, [r7, #16]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f00c f955 	bl	80163ac <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	3314      	adds	r3, #20
 800a106:	4618      	mov	r0, r3
 800a108:	f00c f9c5 	bl	8016496 <sys_mbox_valid>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	3314      	adds	r3, #20
 800a116:	6939      	ldr	r1, [r7, #16]
 800a118:	4618      	mov	r0, r3
 800a11a:	f00c f947 	bl	80163ac <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d005      	beq.n	800a130 <err_tcp+0xe8>
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b04      	cmp	r3, #4
 800a128:	d002      	beq.n	800a130 <err_tcp+0xe8>
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d143      	bne.n	800a1b8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	7f1b      	ldrb	r3, [r3, #28]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bf14      	ite	ne
 800a13c:	2301      	movne	r3, #1
 800a13e:	2300      	moveq	r3, #0
 800a140:	b2db      	uxtb	r3, r3
 800a142:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	7f1b      	ldrb	r3, [r3, #28]
 800a148:	f023 0304 	bic.w	r3, r3, #4
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d13b      	bne.n	800a1d0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d106      	bne.n	800a16e <err_tcp+0x126>
 800a160:	4b1e      	ldr	r3, [pc, #120]	@ (800a1dc <err_tcp+0x194>)
 800a162:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a166:	4920      	ldr	r1, [pc, #128]	@ (800a1e8 <err_tcp+0x1a0>)
 800a168:	481e      	ldr	r0, [pc, #120]	@ (800a1e4 <err_tcp+0x19c>)
 800a16a:	f7f6 ffb1 	bl	80010d0 <printf>
      if (old_state == NETCONN_CLOSE) {
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b04      	cmp	r3, #4
 800a172:	d104      	bne.n	800a17e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	2200      	movs	r2, #0
 800a17a:	711a      	strb	r2, [r3, #4]
 800a17c:	e003      	b.n	800a186 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	78fa      	ldrb	r2, [r7, #3]
 800a184:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	330c      	adds	r3, #12
 800a18e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a190:	68b8      	ldr	r0, [r7, #8]
 800a192:	f00c fa11 	bl	80165b8 <sys_sem_valid>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d106      	bne.n	800a1aa <err_tcp+0x162>
 800a19c:	4b0f      	ldr	r3, [pc, #60]	@ (800a1dc <err_tcp+0x194>)
 800a19e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a1a2:	4912      	ldr	r1, [pc, #72]	@ (800a1ec <err_tcp+0x1a4>)
 800a1a4:	480f      	ldr	r0, [pc, #60]	@ (800a1e4 <err_tcp+0x19c>)
 800a1a6:	f7f6 ff93 	bl	80010d0 <printf>
      conn->current_msg = NULL;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a1b0:	68b8      	ldr	r0, [r7, #8]
 800a1b2:	f00c f9e7 	bl	8016584 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a1b6:	e00b      	b.n	800a1d0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d008      	beq.n	800a1d2 <err_tcp+0x18a>
 800a1c0:	4b06      	ldr	r3, [pc, #24]	@ (800a1dc <err_tcp+0x194>)
 800a1c2:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a1c6:	490a      	ldr	r1, [pc, #40]	@ (800a1f0 <err_tcp+0x1a8>)
 800a1c8:	4806      	ldr	r0, [pc, #24]	@ (800a1e4 <err_tcp+0x19c>)
 800a1ca:	f7f6 ff81 	bl	80010d0 <printf>
  }
}
 800a1ce:	e000      	b.n	800a1d2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a1d0:	bf00      	nop
}
 800a1d2:	bf00      	nop
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	08017d7c 	.word	0x08017d7c
 800a1e0:	08017ed4 	.word	0x08017ed4
 800a1e4:	08017dc0 	.word	0x08017dc0
 800a1e8:	08017ee4 	.word	0x08017ee4
 800a1ec:	08017f00 	.word	0x08017f00
 800a1f0:	08017f1c 	.word	0x08017f1c

0800a1f4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a202:	6879      	ldr	r1, [r7, #4]
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f004 fc53 	bl	800eab0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a20a:	490a      	ldr	r1, [pc, #40]	@ (800a234 <setup_tcp+0x40>)
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f004 fc61 	bl	800ead4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a212:	4909      	ldr	r1, [pc, #36]	@ (800a238 <setup_tcp+0x44>)
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f004 fc7f 	bl	800eb18 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a21a:	2202      	movs	r2, #2
 800a21c:	4907      	ldr	r1, [pc, #28]	@ (800a23c <setup_tcp+0x48>)
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f004 fcd6 	bl	800ebd0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a224:	4906      	ldr	r1, [pc, #24]	@ (800a240 <setup_tcp+0x4c>)
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f004 fc98 	bl	800eb5c <tcp_err>
}
 800a22c:	bf00      	nop
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	08009dcd 	.word	0x08009dcd
 800a238:	08009fa1 	.word	0x08009fa1
 800a23c:	08009ed9 	.word	0x08009ed9
 800a240:	0800a049 	.word	0x0800a049

0800a244 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d006      	beq.n	800a268 <pcb_new+0x24>
 800a25a:	4b2b      	ldr	r3, [pc, #172]	@ (800a308 <pcb_new+0xc4>)
 800a25c:	f240 2265 	movw	r2, #613	@ 0x265
 800a260:	492a      	ldr	r1, [pc, #168]	@ (800a30c <pcb_new+0xc8>)
 800a262:	482b      	ldr	r0, [pc, #172]	@ (800a310 <pcb_new+0xcc>)
 800a264:	f7f6 ff34 	bl	80010d0 <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a272:	2b10      	cmp	r3, #16
 800a274:	d022      	beq.n	800a2bc <pcb_new+0x78>
 800a276:	2b20      	cmp	r3, #32
 800a278:	d133      	bne.n	800a2e2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681c      	ldr	r4, [r3, #0]
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	4618      	mov	r0, r3
 800a282:	f009 fd5c 	bl	8013d3e <udp_new_ip_type>
 800a286:	4603      	mov	r3, r0
 800a288:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d02a      	beq.n	800a2ea <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b22      	cmp	r3, #34	@ 0x22
 800a29c:	d104      	bne.n	800a2a8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6858      	ldr	r0, [r3, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	4917      	ldr	r1, [pc, #92]	@ (800a314 <pcb_new+0xd0>)
 800a2b6:	f009 fcc9 	bl	8013c4c <udp_recv>
      }
      break;
 800a2ba:	e016      	b.n	800a2ea <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681c      	ldr	r4, [r3, #0]
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f004 fbe6 	bl	800ea94 <tcp_new_ip_type>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00b      	beq.n	800a2ee <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff ff8a 	bl	800a1f4 <setup_tcp>
      }
      break;
 800a2e0:	e005      	b.n	800a2ee <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	22fa      	movs	r2, #250	@ 0xfa
 800a2e6:	711a      	strb	r2, [r3, #4]
      return;
 800a2e8:	e00a      	b.n	800a300 <pcb_new+0xbc>
      break;
 800a2ea:	bf00      	nop
 800a2ec:	e000      	b.n	800a2f0 <pcb_new+0xac>
      break;
 800a2ee:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d102      	bne.n	800a300 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	22ff      	movs	r2, #255	@ 0xff
 800a2fe:	711a      	strb	r2, [r3, #4]
  }
}
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	bd90      	pop	{r4, r7, pc}
 800a306:	bf00      	nop
 800a308:	08017d7c 	.word	0x08017d7c
 800a30c:	08017f60 	.word	0x08017f60
 800a310:	08017dc0 	.word	0x08017dc0
 800a314:	08009cd1 	.word	0x08009cd1

0800a318 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d102      	bne.n	800a33a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7ff ff85 	bl	800a244 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a33a:	bf00      	nop
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a354:	2007      	movs	r0, #7
 800a356:	f001 fe5b 	bl	800c010 <memp_malloc>
 800a35a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <netconn_alloc+0x22>
    return NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	e052      	b.n	800a40c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	79fa      	ldrb	r2, [r7, #7]
 800a370:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a37e:	2b10      	cmp	r3, #16
 800a380:	d004      	beq.n	800a38c <netconn_alloc+0x48>
 800a382:	2b20      	cmp	r3, #32
 800a384:	d105      	bne.n	800a392 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a386:	2306      	movs	r3, #6
 800a388:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a38a:	e00a      	b.n	800a3a2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a38c:	2306      	movs	r3, #6
 800a38e:	617b      	str	r3, [r7, #20]
      break;
 800a390:	e007      	b.n	800a3a2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a392:	4b20      	ldr	r3, [pc, #128]	@ (800a414 <netconn_alloc+0xd0>)
 800a394:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a398:	491f      	ldr	r1, [pc, #124]	@ (800a418 <netconn_alloc+0xd4>)
 800a39a:	4820      	ldr	r0, [pc, #128]	@ (800a41c <netconn_alloc+0xd8>)
 800a39c:	f7f6 fe98 	bl	80010d0 <printf>
      goto free_and_return;
 800a3a0:	e02f      	b.n	800a402 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3310      	adds	r3, #16
 800a3a6:	6979      	ldr	r1, [r7, #20]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f00b ffcb 	bl	8016344 <sys_mbox_new>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d125      	bne.n	800a400 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f00c f889 	bl	80164d2 <sys_sem_new>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d005      	beq.n	800a3d2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3310      	adds	r3, #16
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f00b ffdc 	bl	8016388 <sys_mbox_free>
    goto free_and_return;
 800a3d0:	e017      	b.n	800a402 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3314      	adds	r3, #20
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f00c f86e 	bl	80164b8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	7cfa      	ldrb	r2, [r7, #19]
 800a3fa:	771a      	strb	r2, [r3, #28]
  return conn;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	e005      	b.n	800a40c <netconn_alloc+0xc8>
    goto free_and_return;
 800a400:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	2007      	movs	r0, #7
 800a406:	f001 fe79 	bl	800c0fc <memp_free>
  return NULL;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	08017d7c 	.word	0x08017d7c
 800a418:	08017f80 	.word	0x08017f80
 800a41c:	08017dc0 	.word	0x08017dc0

0800a420 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d006      	beq.n	800a43e <netconn_free+0x1e>
 800a430:	4b1b      	ldr	r3, [pc, #108]	@ (800a4a0 <netconn_free+0x80>)
 800a432:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a436:	491b      	ldr	r1, [pc, #108]	@ (800a4a4 <netconn_free+0x84>)
 800a438:	481b      	ldr	r0, [pc, #108]	@ (800a4a8 <netconn_free+0x88>)
 800a43a:	f7f6 fe49 	bl	80010d0 <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3310      	adds	r3, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f00c f827 	bl	8016496 <sys_mbox_valid>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d006      	beq.n	800a45c <netconn_free+0x3c>
 800a44e:	4b14      	ldr	r3, [pc, #80]	@ (800a4a0 <netconn_free+0x80>)
 800a450:	f240 3223 	movw	r2, #803	@ 0x323
 800a454:	4915      	ldr	r1, [pc, #84]	@ (800a4ac <netconn_free+0x8c>)
 800a456:	4814      	ldr	r0, [pc, #80]	@ (800a4a8 <netconn_free+0x88>)
 800a458:	f7f6 fe3a 	bl	80010d0 <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3314      	adds	r3, #20
 800a460:	4618      	mov	r0, r3
 800a462:	f00c f818 	bl	8016496 <sys_mbox_valid>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d006      	beq.n	800a47a <netconn_free+0x5a>
 800a46c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a0 <netconn_free+0x80>)
 800a46e:	f240 3226 	movw	r2, #806	@ 0x326
 800a472:	490f      	ldr	r1, [pc, #60]	@ (800a4b0 <netconn_free+0x90>)
 800a474:	480c      	ldr	r0, [pc, #48]	@ (800a4a8 <netconn_free+0x88>)
 800a476:	f7f6 fe2b 	bl	80010d0 <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	330c      	adds	r3, #12
 800a47e:	4618      	mov	r0, r3
 800a480:	f00c f88d 	bl	801659e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	330c      	adds	r3, #12
 800a488:	4618      	mov	r0, r3
 800a48a:	f00c f8a6 	bl	80165da <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	2007      	movs	r0, #7
 800a492:	f001 fe33 	bl	800c0fc <memp_free>
}
 800a496:	bf00      	nop
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	08017d7c 	.word	0x08017d7c
 800a4a4:	08017fa8 	.word	0x08017fa8
 800a4a8:	08017dc0 	.word	0x08017dc0
 800a4ac:	08017fd8 	.word	0x08017fd8
 800a4b0:	08018014 	.word	0x08018014

0800a4b4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3310      	adds	r3, #16
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f00b ffe8 	bl	8016496 <sys_mbox_valid>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d02f      	beq.n	800a52c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a4cc:	e018      	b.n	800a500 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4d6:	2b10      	cmp	r3, #16
 800a4d8:	d10e      	bne.n	800a4f8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	f107 020f 	add.w	r2, r7, #15
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fbba 	bl	8009c5c <lwip_netconn_is_err_msg>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d108      	bne.n	800a500 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f002 fca7 	bl	800ce44 <pbuf_free>
 800a4f6:	e003      	b.n	800a500 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fed8 	bl	800b2b0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	3310      	adds	r3, #16
 800a504:	f107 0210 	add.w	r2, r7, #16
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f00b ffa7 	bl	801645e <sys_arch_mbox_tryfetch>
 800a510:	4603      	mov	r3, r0
 800a512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a516:	d1da      	bne.n	800a4ce <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3310      	adds	r3, #16
 800a51c:	4618      	mov	r0, r3
 800a51e:	f00b ff33 	bl	8016388 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3310      	adds	r3, #16
 800a526:	4618      	mov	r0, r3
 800a528:	f00b ffc6 	bl	80164b8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3314      	adds	r3, #20
 800a530:	4618      	mov	r0, r3
 800a532:	f00b ffb0 	bl	8016496 <sys_mbox_valid>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d034      	beq.n	800a5a6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a53c:	e01d      	b.n	800a57a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f107 020e 	add.w	r2, r7, #14
 800a544:	4611      	mov	r1, r2
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff fb88 	bl	8009c5c <lwip_netconn_is_err_msg>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d113      	bne.n	800a57a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a556:	6978      	ldr	r0, [r7, #20]
 800a558:	f7ff ffac 	bl	800a4b4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	f003 fa5b 	bl	800da24 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2200      	movs	r2, #0
 800a572:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a574:	6978      	ldr	r0, [r7, #20]
 800a576:	f7ff ff53 	bl	800a420 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3314      	adds	r3, #20
 800a57e:	f107 0210 	add.w	r2, r7, #16
 800a582:	4611      	mov	r1, r2
 800a584:	4618      	mov	r0, r3
 800a586:	f00b ff6a 	bl	801645e <sys_arch_mbox_tryfetch>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a590:	d1d5      	bne.n	800a53e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3314      	adds	r3, #20
 800a596:	4618      	mov	r0, r3
 800a598:	f00b fef6 	bl	8016388 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3314      	adds	r3, #20
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f00b ff89 	bl	80164b8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a5a6:	bf00      	nop
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d106      	bne.n	800a5d4 <lwip_netconn_do_close_internal+0x24>
 800a5c6:	4b87      	ldr	r3, [pc, #540]	@ (800a7e4 <lwip_netconn_do_close_internal+0x234>)
 800a5c8:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a5cc:	4986      	ldr	r1, [pc, #536]	@ (800a7e8 <lwip_netconn_do_close_internal+0x238>)
 800a5ce:	4887      	ldr	r0, [pc, #540]	@ (800a7ec <lwip_netconn_do_close_internal+0x23c>)
 800a5d0:	f7f6 fd7e 	bl	80010d0 <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5dc:	2b10      	cmp	r3, #16
 800a5de:	d006      	beq.n	800a5ee <lwip_netconn_do_close_internal+0x3e>
 800a5e0:	4b80      	ldr	r3, [pc, #512]	@ (800a7e4 <lwip_netconn_do_close_internal+0x234>)
 800a5e2:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a5e6:	4982      	ldr	r1, [pc, #520]	@ (800a7f0 <lwip_netconn_do_close_internal+0x240>)
 800a5e8:	4880      	ldr	r0, [pc, #512]	@ (800a7ec <lwip_netconn_do_close_internal+0x23c>)
 800a5ea:	f7f6 fd71 	bl	80010d0 <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	d006      	beq.n	800a604 <lwip_netconn_do_close_internal+0x54>
 800a5f6:	4b7b      	ldr	r3, [pc, #492]	@ (800a7e4 <lwip_netconn_do_close_internal+0x234>)
 800a5f8:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a5fc:	497d      	ldr	r1, [pc, #500]	@ (800a7f4 <lwip_netconn_do_close_internal+0x244>)
 800a5fe:	487b      	ldr	r0, [pc, #492]	@ (800a7ec <lwip_netconn_do_close_internal+0x23c>)
 800a600:	f7f6 fd66 	bl	80010d0 <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d106      	bne.n	800a61a <lwip_netconn_do_close_internal+0x6a>
 800a60c:	4b75      	ldr	r3, [pc, #468]	@ (800a7e4 <lwip_netconn_do_close_internal+0x234>)
 800a60e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a612:	4979      	ldr	r1, [pc, #484]	@ (800a7f8 <lwip_netconn_do_close_internal+0x248>)
 800a614:	4875      	ldr	r0, [pc, #468]	@ (800a7ec <lwip_netconn_do_close_internal+0x23c>)
 800a616:	f7f6 fd5b 	bl	80010d0 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d106      	bne.n	800a630 <lwip_netconn_do_close_internal+0x80>
 800a622:	4b70      	ldr	r3, [pc, #448]	@ (800a7e4 <lwip_netconn_do_close_internal+0x234>)
 800a624:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a628:	4974      	ldr	r1, [pc, #464]	@ (800a7fc <lwip_netconn_do_close_internal+0x24c>)
 800a62a:	4870      	ldr	r0, [pc, #448]	@ (800a7ec <lwip_netconn_do_close_internal+0x23c>)
 800a62c:	f7f6 fd50 	bl	80010d0 <printf>

  tpcb = conn->pcb.tcp;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	7a1b      	ldrb	r3, [r3, #8]
 800a63c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	f003 0302 	and.w	r3, r3, #2
 800a64c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	2b03      	cmp	r3, #3
 800a652:	d102      	bne.n	800a65a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a654:	2301      	movs	r3, #1
 800a656:	75bb      	strb	r3, [r7, #22]
 800a658:	e01f      	b.n	800a69a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00e      	beq.n	800a67e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a664:	2b05      	cmp	r3, #5
 800a666:	d007      	beq.n	800a678 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a66c:	2b06      	cmp	r3, #6
 800a66e:	d003      	beq.n	800a678 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a674:	2b08      	cmp	r3, #8
 800a676:	d102      	bne.n	800a67e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a678:	2301      	movs	r3, #1
 800a67a:	75bb      	strb	r3, [r7, #22]
 800a67c:	e00d      	b.n	800a69a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a67e:	7b7b      	ldrb	r3, [r7, #13]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d008      	beq.n	800a696 <lwip_netconn_do_close_internal+0xe6>
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	8b5b      	ldrh	r3, [r3, #26]
 800a688:	f003 0310 	and.w	r3, r3, #16
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a690:	2301      	movs	r3, #1
 800a692:	75bb      	strb	r3, [r7, #22]
 800a694:	e001      	b.n	800a69a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a69a:	7dbb      	ldrb	r3, [r7, #22]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6938      	ldr	r0, [r7, #16]
 800a6a4:	f004 fa04 	bl	800eab0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	7d1b      	ldrb	r3, [r3, #20]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d104      	bne.n	800a6ba <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	6938      	ldr	r0, [r7, #16]
 800a6b4:	f004 fa74 	bl	800eba0 <tcp_accept>
 800a6b8:	e01d      	b.n	800a6f6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6938      	ldr	r0, [r7, #16]
 800a6c4:	f004 fa06 	bl	800ead4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f004 fa68 	bl	800eba0 <tcp_accept>
    }
    if (shut_tx) {
 800a6d0:	7b7b      	ldrb	r3, [r7, #13]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6938      	ldr	r0, [r7, #16]
 800a6da:	f004 fa1d 	bl	800eb18 <tcp_sent>
    }
    if (shut_close) {
 800a6de:	7dbb      	ldrb	r3, [r7, #22]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d008      	beq.n	800a6f6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	6938      	ldr	r0, [r7, #16]
 800a6ea:	f004 fa71 	bl	800ebd0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	6938      	ldr	r0, [r7, #16]
 800a6f2:	f004 fa33 	bl	800eb5c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a6f6:	7dbb      	ldrb	r3, [r7, #22]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a6fc:	6938      	ldr	r0, [r7, #16]
 800a6fe:	f003 f84b 	bl	800d798 <tcp_close>
 800a702:	4603      	mov	r3, r0
 800a704:	75fb      	strb	r3, [r7, #23]
 800a706:	e007      	b.n	800a718 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	7b7a      	ldrb	r2, [r7, #13]
 800a70c:	4619      	mov	r1, r3
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f003 f86e 	bl	800d7f0 <tcp_shutdown>
 800a714:	4603      	mov	r3, r0
 800a716:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a718:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d102      	bne.n	800a726 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a720:	2301      	movs	r3, #1
 800a722:	757b      	strb	r3, [r7, #21]
 800a724:	e016      	b.n	800a754 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a726:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d10f      	bne.n	800a750 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a1b      	ldr	r3, [r3, #32]
 800a734:	7a5b      	ldrb	r3, [r3, #9]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10c      	bne.n	800a754 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a73a:	2301      	movs	r3, #1
 800a73c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a73e:	7dbb      	ldrb	r3, [r7, #22]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d007      	beq.n	800a754 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a744:	6938      	ldr	r0, [r7, #16]
 800a746:	f003 f96d 	bl	800da24 <tcp_abort>
          err = ERR_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]
 800a74e:	e001      	b.n	800a754 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a750:	2301      	movs	r3, #1
 800a752:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a754:	7d7b      	ldrb	r3, [r7, #21]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d052      	beq.n	800a800 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	330c      	adds	r3, #12
 800a762:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	7dfa      	ldrb	r2, [r7, #23]
 800a76a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d129      	bne.n	800a7d4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a780:	7dbb      	ldrb	r3, [r7, #22]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00c      	beq.n	800a7a0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <lwip_netconn_do_close_internal+0x1f0>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a798:	2200      	movs	r2, #0
 800a79a:	2104      	movs	r1, #4
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	4798      	blx	r3
      }
      if (shut_rx) {
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d005      	beq.n	800a7ba <lwip_netconn_do_close_internal+0x20a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
      }
      if (shut_tx) {
 800a7ba:	7b7b      	ldrb	r3, [r7, #13]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d009      	beq.n	800a7d4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d005      	beq.n	800a7d4 <lwip_netconn_do_close_internal+0x224>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2102      	movs	r1, #2
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a7d4:	78fb      	ldrb	r3, [r7, #3]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a7da:	68b8      	ldr	r0, [r7, #8]
 800a7dc:	f00b fed2 	bl	8016584 <sys_sem_signal>
    }
    return ERR_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	e03c      	b.n	800a85e <lwip_netconn_do_close_internal+0x2ae>
 800a7e4:	08017d7c 	.word	0x08017d7c
 800a7e8:	08018050 	.word	0x08018050
 800a7ec:	08017dc0 	.word	0x08017dc0
 800a7f0:	08018060 	.word	0x08018060
 800a7f4:	08018080 	.word	0x08018080
 800a7f8:	080180a4 	.word	0x080180a4
 800a7fc:	08017ee4 	.word	0x08017ee4
  }
  if (!close_finished) {
 800a800:	7d7b      	ldrb	r3, [r7, #21]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d11e      	bne.n	800a844 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	7d1b      	ldrb	r3, [r3, #20]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d106      	bne.n	800a81c <lwip_netconn_do_close_internal+0x26c>
 800a80e:	4b16      	ldr	r3, [pc, #88]	@ (800a868 <lwip_netconn_do_close_internal+0x2b8>)
 800a810:	f240 4241 	movw	r2, #1089	@ 0x441
 800a814:	4915      	ldr	r1, [pc, #84]	@ (800a86c <lwip_netconn_do_close_internal+0x2bc>)
 800a816:	4816      	ldr	r0, [pc, #88]	@ (800a870 <lwip_netconn_do_close_internal+0x2c0>)
 800a818:	f7f6 fc5a 	bl	80010d0 <printf>
    if (shut_tx) {
 800a81c:	7b7b      	ldrb	r3, [r7, #13]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a822:	4914      	ldr	r1, [pc, #80]	@ (800a874 <lwip_netconn_do_close_internal+0x2c4>)
 800a824:	6938      	ldr	r0, [r7, #16]
 800a826:	f004 f977 	bl	800eb18 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a82a:	2201      	movs	r2, #1
 800a82c:	4912      	ldr	r1, [pc, #72]	@ (800a878 <lwip_netconn_do_close_internal+0x2c8>)
 800a82e:	6938      	ldr	r0, [r7, #16]
 800a830:	f004 f9ce 	bl	800ebd0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a834:	4911      	ldr	r1, [pc, #68]	@ (800a87c <lwip_netconn_do_close_internal+0x2cc>)
 800a836:	6938      	ldr	r0, [r7, #16]
 800a838:	f004 f990 	bl	800eb5c <tcp_err>
    tcp_arg(tpcb, conn);
 800a83c:	6879      	ldr	r1, [r7, #4]
 800a83e:	6938      	ldr	r0, [r7, #16]
 800a840:	f004 f936 	bl	800eab0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <lwip_netconn_do_close_internal+0x2aa>
 800a84c:	4b06      	ldr	r3, [pc, #24]	@ (800a868 <lwip_netconn_do_close_internal+0x2b8>)
 800a84e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a852:	490b      	ldr	r1, [pc, #44]	@ (800a880 <lwip_netconn_do_close_internal+0x2d0>)
 800a854:	4806      	ldr	r0, [pc, #24]	@ (800a870 <lwip_netconn_do_close_internal+0x2c0>)
 800a856:	f7f6 fc3b 	bl	80010d0 <printf>
  return err;
 800a85a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	08017d7c 	.word	0x08017d7c
 800a86c:	080180b8 	.word	0x080180b8
 800a870:	08017dc0 	.word	0x08017dc0
 800a874:	08009fa1 	.word	0x08009fa1
 800a878:	08009ed9 	.word	0x08009ed9
 800a87c:	0800a049 	.word	0x0800a049
 800a880:	080180dc 	.word	0x080180dc

0800a884 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	785b      	ldrb	r3, [r3, #1]
 800a896:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00d      	beq.n	800a8ba <lwip_netconn_do_delconn+0x36>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8a8:	2b10      	cmp	r3, #16
 800a8aa:	d006      	beq.n	800a8ba <lwip_netconn_do_delconn+0x36>
 800a8ac:	4b60      	ldr	r3, [pc, #384]	@ (800aa30 <lwip_netconn_do_delconn+0x1ac>)
 800a8ae:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a8b2:	4960      	ldr	r1, [pc, #384]	@ (800aa34 <lwip_netconn_do_delconn+0x1b0>)
 800a8b4:	4860      	ldr	r0, [pc, #384]	@ (800aa38 <lwip_netconn_do_delconn+0x1b4>)
 800a8b6:	f7f6 fc0b 	bl	80010d0 <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a8ba:	7afb      	ldrb	r3, [r7, #11]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <lwip_netconn_do_delconn+0x48>
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d002      	beq.n	800a8cc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d109      	bne.n	800a8e0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d10a      	bne.n	800a8e8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	7f1b      	ldrb	r3, [r3, #28]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d103      	bne.n	800a8e8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	22fb      	movs	r2, #251	@ 0xfb
 800a8e4:	711a      	strb	r2, [r3, #4]
 800a8e6:	e097      	b.n	800aa18 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a8e8:	7afb      	ldrb	r3, [r7, #11]
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d10d      	bne.n	800a90a <lwip_netconn_do_delconn+0x86>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	7f1b      	ldrb	r3, [r3, #28]
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <lwip_netconn_do_delconn+0x86>
 800a8fc:	4b4c      	ldr	r3, [pc, #304]	@ (800aa30 <lwip_netconn_do_delconn+0x1ac>)
 800a8fe:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a902:	494e      	ldr	r1, [pc, #312]	@ (800aa3c <lwip_netconn_do_delconn+0x1b8>)
 800a904:	484c      	ldr	r0, [pc, #304]	@ (800aa38 <lwip_netconn_do_delconn+0x1b4>)
 800a906:	f7f6 fbe3 	bl	80010d0 <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff fdcd 	bl	800a4b4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d05f      	beq.n	800a9e4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a92e:	2b10      	cmp	r3, #16
 800a930:	d00d      	beq.n	800a94e <lwip_netconn_do_delconn+0xca>
 800a932:	2b20      	cmp	r3, #32
 800a934:	d151      	bne.n	800a9da <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	4618      	mov	r0, r3
 800a948:	f009 f9a0 	bl	8013c8c <udp_remove>
          break;
 800a94c:	e046      	b.n	800a9dc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d006      	beq.n	800a966 <lwip_netconn_do_delconn+0xe2>
 800a958:	4b35      	ldr	r3, [pc, #212]	@ (800aa30 <lwip_netconn_do_delconn+0x1ac>)
 800a95a:	f240 4294 	movw	r2, #1172	@ 0x494
 800a95e:	4938      	ldr	r1, [pc, #224]	@ (800aa40 <lwip_netconn_do_delconn+0x1bc>)
 800a960:	4835      	ldr	r0, [pc, #212]	@ (800aa38 <lwip_netconn_do_delconn+0x1b4>)
 800a962:	f7f6 fbb5 	bl	80010d0 <printf>
          msg->conn->state = NETCONN_CLOSE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2204      	movs	r2, #4
 800a96c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2203      	movs	r2, #3
 800a972:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2100      	movs	r1, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff fe14 	bl	800a5b0 <lwip_netconn_do_close_internal>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d04b      	beq.n	800aa26 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	785b      	ldrb	r3, [r3, #1]
 800a994:	2b04      	cmp	r3, #4
 800a996:	d006      	beq.n	800a9a6 <lwip_netconn_do_delconn+0x122>
 800a998:	4b25      	ldr	r3, [pc, #148]	@ (800aa30 <lwip_netconn_do_delconn+0x1ac>)
 800a99a:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a99e:	4929      	ldr	r1, [pc, #164]	@ (800aa44 <lwip_netconn_do_delconn+0x1c0>)
 800a9a0:	4825      	ldr	r0, [pc, #148]	@ (800aa38 <lwip_netconn_do_delconn+0x1b4>)
 800a9a2:	f7f6 fb95 	bl	80010d0 <printf>
            UNLOCK_TCPIP_CORE();
 800a9a6:	4828      	ldr	r0, [pc, #160]	@ (800aa48 <lwip_netconn_do_delconn+0x1c4>)
 800a9a8:	f00b fe5d 	bl	8016666 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	330c      	adds	r3, #12
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f00b fdb4 	bl	8016522 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a9ba:	4823      	ldr	r0, [pc, #140]	@ (800aa48 <lwip_netconn_do_delconn+0x1c4>)
 800a9bc:	f00b fe44 	bl	8016648 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d02d      	beq.n	800aa26 <lwip_netconn_do_delconn+0x1a2>
 800a9ca:	4b19      	ldr	r3, [pc, #100]	@ (800aa30 <lwip_netconn_do_delconn+0x1ac>)
 800a9cc:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a9d0:	491c      	ldr	r1, [pc, #112]	@ (800aa44 <lwip_netconn_do_delconn+0x1c0>)
 800a9d2:	4819      	ldr	r0, [pc, #100]	@ (800aa38 <lwip_netconn_do_delconn+0x1b4>)
 800a9d4:	f7f6 fb7c 	bl	80010d0 <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a9d8:	e025      	b.n	800aa26 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a9da:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d007      	beq.n	800a9fe <lwip_netconn_do_delconn+0x17a>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	6810      	ldr	r0, [r2, #0]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <lwip_netconn_do_delconn+0x194>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	6810      	ldr	r0, [r2, #0]
 800aa12:	2200      	movs	r2, #0
 800aa14:	2102      	movs	r1, #2
 800aa16:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f00b fdca 	bl	80165b8 <sys_sem_valid>
 800aa24:	e000      	b.n	800aa28 <lwip_netconn_do_delconn+0x1a4>
          return;
 800aa26:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	08017d7c 	.word	0x08017d7c
 800aa34:	080180ec 	.word	0x080180ec
 800aa38:	08017dc0 	.word	0x08017dc0
 800aa3c:	08018100 	.word	0x08018100
 800aa40:	08018120 	.word	0x08018120
 800aa44:	0801813c 	.word	0x0801813c
 800aa48:	20008e4c 	.word	0x20008e4c

0800aa4c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b088      	sub	sp, #32
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800aa68:	f06f 0305 	mvn.w	r3, #5
 800aa6c:	e070      	b.n	800ab50 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	785b      	ldrb	r3, [r3, #1]
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d006      	beq.n	800aa84 <lwip_netconn_do_connected+0x38>
 800aa76:	4b38      	ldr	r3, [pc, #224]	@ (800ab58 <lwip_netconn_do_connected+0x10c>)
 800aa78:	f240 5223 	movw	r2, #1315	@ 0x523
 800aa7c:	4937      	ldr	r1, [pc, #220]	@ (800ab5c <lwip_netconn_do_connected+0x110>)
 800aa7e:	4838      	ldr	r0, [pc, #224]	@ (800ab60 <lwip_netconn_do_connected+0x114>)
 800aa80:	f7f6 fb26 	bl	80010d0 <printf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10c      	bne.n	800aaa6 <lwip_netconn_do_connected+0x5a>
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	7f1b      	ldrb	r3, [r3, #28]
 800aa90:	f003 0304 	and.w	r3, r3, #4
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <lwip_netconn_do_connected+0x5a>
 800aa98:	4b2f      	ldr	r3, [pc, #188]	@ (800ab58 <lwip_netconn_do_connected+0x10c>)
 800aa9a:	f240 5224 	movw	r2, #1316	@ 0x524
 800aa9e:	4931      	ldr	r1, [pc, #196]	@ (800ab64 <lwip_netconn_do_connected+0x118>)
 800aaa0:	482f      	ldr	r0, [pc, #188]	@ (800ab60 <lwip_netconn_do_connected+0x114>)
 800aaa2:	f7f6 fb15 	bl	80010d0 <printf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d008      	beq.n	800aac0 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	79fa      	ldrb	r2, [r7, #7]
 800aab4:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	330c      	adds	r3, #12
 800aabe:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aac8:	2b10      	cmp	r3, #16
 800aaca:	d106      	bne.n	800aada <lwip_netconn_do_connected+0x8e>
 800aacc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d102      	bne.n	800aada <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800aad4:	69b8      	ldr	r0, [r7, #24]
 800aad6:	f7ff fb8d 	bl	800a1f4 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	7f1b      	ldrb	r3, [r3, #28]
 800aade:	f003 0304 	and.w	r3, r3, #4
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bf0c      	ite	eq
 800aae6:	2301      	moveq	r3, #1
 800aae8:	2300      	movne	r3, #0
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	7f1b      	ldrb	r3, [r3, #28]
 800aaf2:	f023 0304 	bic.w	r3, r3, #4
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <lwip_netconn_do_connected+0xbc>
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10c      	bne.n	800ab22 <lwip_netconn_do_connected+0xd6>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <lwip_netconn_do_connected+0xc8>
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d006      	beq.n	800ab22 <lwip_netconn_do_connected+0xd6>
 800ab14:	4b10      	ldr	r3, [pc, #64]	@ (800ab58 <lwip_netconn_do_connected+0x10c>)
 800ab16:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800ab1a:	4913      	ldr	r1, [pc, #76]	@ (800ab68 <lwip_netconn_do_connected+0x11c>)
 800ab1c:	4810      	ldr	r0, [pc, #64]	@ (800ab60 <lwip_netconn_do_connected+0x114>)
 800ab1e:	f7f6 fad7 	bl	80010d0 <printf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	2200      	movs	r2, #0
 800ab26:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d005      	beq.n	800ab42 <lwip_netconn_do_connected+0xf6>
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	69b8      	ldr	r0, [r7, #24]
 800ab40:	4798      	blx	r3

  if (was_blocking) {
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800ab48:	69f8      	ldr	r0, [r7, #28]
 800ab4a:	f00b fd1b 	bl	8016584 <sys_sem_signal>
  }
  return ERR_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3720      	adds	r7, #32
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	08017d7c 	.word	0x08017d7c
 800ab5c:	08018144 	.word	0x08018144
 800ab60:	08017dc0 	.word	0x08017dc0
 800ab64:	08018164 	.word	0x08018164
 800ab68:	080181a4 	.word	0x080181a4

0800ab6c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d102      	bne.n	800ab88 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800ab82:	23f1      	movs	r3, #241	@ 0xf1
 800ab84:	75fb      	strb	r3, [r7, #23]
 800ab86:	e09b      	b.n	800acc0 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab92:	2b10      	cmp	r3, #16
 800ab94:	d00f      	beq.n	800abb6 <lwip_netconn_do_connect+0x4a>
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	f040 8087 	bne.w	800acaa <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6858      	ldr	r0, [r3, #4]
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6899      	ldr	r1, [r3, #8]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	899b      	ldrh	r3, [r3, #12]
 800abaa:	461a      	mov	r2, r3
 800abac:	f008 ffe0 	bl	8013b70 <udp_connect>
 800abb0:	4603      	mov	r3, r0
 800abb2:	75fb      	strb	r3, [r7, #23]
        break;
 800abb4:	e084      	b.n	800acc0 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	785b      	ldrb	r3, [r3, #1]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d102      	bne.n	800abc6 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800abc0:	23f7      	movs	r3, #247	@ 0xf7
 800abc2:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800abc4:	e07b      	b.n	800acbe <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800abd0:	23f6      	movs	r3, #246	@ 0xf6
 800abd2:	75fb      	strb	r3, [r7, #23]
        break;
 800abd4:	e073      	b.n	800acbe <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fb0a 	bl	800a1f4 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6858      	ldr	r0, [r3, #4]
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	6899      	ldr	r1, [r3, #8]
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	899a      	ldrh	r2, [r3, #12]
 800abee:	4b38      	ldr	r3, [pc, #224]	@ (800acd0 <lwip_netconn_do_connect+0x164>)
 800abf0:	f003 f814 	bl	800dc1c <tcp_connect>
 800abf4:	4603      	mov	r3, r0
 800abf6:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800abf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d15e      	bne.n	800acbe <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	7f1b      	ldrb	r3, [r3, #28]
 800ac06:	f003 0302 	and.w	r3, r3, #2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	bf14      	ite	ne
 800ac0e:	2301      	movne	r3, #1
 800ac10:	2300      	moveq	r3, #0
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d009      	beq.n	800ac38 <lwip_netconn_do_connect+0xcc>
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	7f1a      	ldrb	r2, [r3, #28]
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f042 0204 	orr.w	r2, r2, #4
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	771a      	strb	r2, [r3, #28]
 800ac36:	e008      	b.n	800ac4a <lwip_netconn_do_connect+0xde>
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	7f1a      	ldrb	r2, [r3, #28]
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0204 	bic.w	r2, r2, #4
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800ac50:	23fb      	movs	r3, #251	@ 0xfb
 800ac52:	75fb      	strb	r3, [r7, #23]
        break;
 800ac54:	e033      	b.n	800acbe <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	785b      	ldrb	r3, [r3, #1]
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d006      	beq.n	800ac76 <lwip_netconn_do_connect+0x10a>
 800ac68:	4b1a      	ldr	r3, [pc, #104]	@ (800acd4 <lwip_netconn_do_connect+0x168>)
 800ac6a:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800ac6e:	491a      	ldr	r1, [pc, #104]	@ (800acd8 <lwip_netconn_do_connect+0x16c>)
 800ac70:	481a      	ldr	r0, [pc, #104]	@ (800acdc <lwip_netconn_do_connect+0x170>)
 800ac72:	f7f6 fa2d 	bl	80010d0 <printf>
              UNLOCK_TCPIP_CORE();
 800ac76:	481a      	ldr	r0, [pc, #104]	@ (800ace0 <lwip_netconn_do_connect+0x174>)
 800ac78:	f00b fcf5 	bl	8016666 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	330c      	adds	r3, #12
 800ac82:	2100      	movs	r1, #0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f00b fc4c 	bl	8016522 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800ac8a:	4815      	ldr	r0, [pc, #84]	@ (800ace0 <lwip_netconn_do_connect+0x174>)
 800ac8c:	f00b fcdc 	bl	8016648 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d116      	bne.n	800acc8 <lwip_netconn_do_connect+0x15c>
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	@ (800acd4 <lwip_netconn_do_connect+0x168>)
 800ac9c:	f240 5274 	movw	r2, #1396	@ 0x574
 800aca0:	490d      	ldr	r1, [pc, #52]	@ (800acd8 <lwip_netconn_do_connect+0x16c>)
 800aca2:	480e      	ldr	r0, [pc, #56]	@ (800acdc <lwip_netconn_do_connect+0x170>)
 800aca4:	f7f6 fa14 	bl	80010d0 <printf>
              return;
 800aca8:	e00e      	b.n	800acc8 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800acaa:	4b0a      	ldr	r3, [pc, #40]	@ (800acd4 <lwip_netconn_do_connect+0x168>)
 800acac:	f240 527d 	movw	r2, #1405	@ 0x57d
 800acb0:	490c      	ldr	r1, [pc, #48]	@ (800ace4 <lwip_netconn_do_connect+0x178>)
 800acb2:	480a      	ldr	r0, [pc, #40]	@ (800acdc <lwip_netconn_do_connect+0x170>)
 800acb4:	f7f6 fa0c 	bl	80010d0 <printf>
 800acb8:	23fa      	movs	r3, #250	@ 0xfa
 800acba:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800acbc:	e000      	b.n	800acc0 <lwip_netconn_do_connect+0x154>
        break;
 800acbe:	bf00      	nop
    }
  }
  msg->err = err;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	7dfa      	ldrb	r2, [r7, #23]
 800acc4:	711a      	strb	r2, [r3, #4]
 800acc6:	e000      	b.n	800acca <lwip_netconn_do_connect+0x15e>
              return;
 800acc8:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	0800aa4d 	.word	0x0800aa4d
 800acd4:	08017d7c 	.word	0x08017d7c
 800acd8:	0801813c 	.word	0x0801813c
 800acdc:	08017dc0 	.word	0x08017dc0
 800ace0:	20008e4c 	.word	0x20008e4c
 800ace4:	080181c4 	.word	0x080181c4

0800ace8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d106      	bne.n	800ad0c <lwip_netconn_do_writemore+0x24>
 800acfe:	4b96      	ldr	r3, [pc, #600]	@ (800af58 <lwip_netconn_do_writemore+0x270>)
 800ad00:	f240 6273 	movw	r2, #1651	@ 0x673
 800ad04:	4995      	ldr	r1, [pc, #596]	@ (800af5c <lwip_netconn_do_writemore+0x274>)
 800ad06:	4896      	ldr	r0, [pc, #600]	@ (800af60 <lwip_netconn_do_writemore+0x278>)
 800ad08:	f7f6 f9e2 	bl	80010d0 <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	785b      	ldrb	r3, [r3, #1]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d006      	beq.n	800ad22 <lwip_netconn_do_writemore+0x3a>
 800ad14:	4b90      	ldr	r3, [pc, #576]	@ (800af58 <lwip_netconn_do_writemore+0x270>)
 800ad16:	f240 6274 	movw	r2, #1652	@ 0x674
 800ad1a:	4992      	ldr	r1, [pc, #584]	@ (800af64 <lwip_netconn_do_writemore+0x27c>)
 800ad1c:	4890      	ldr	r0, [pc, #576]	@ (800af60 <lwip_netconn_do_writemore+0x278>)
 800ad1e:	f7f6 f9d7 	bl	80010d0 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d106      	bne.n	800ad38 <lwip_netconn_do_writemore+0x50>
 800ad2a:	4b8b      	ldr	r3, [pc, #556]	@ (800af58 <lwip_netconn_do_writemore+0x270>)
 800ad2c:	f240 6275 	movw	r2, #1653	@ 0x675
 800ad30:	498d      	ldr	r1, [pc, #564]	@ (800af68 <lwip_netconn_do_writemore+0x280>)
 800ad32:	488b      	ldr	r0, [pc, #556]	@ (800af60 <lwip_netconn_do_writemore+0x278>)
 800ad34:	f7f6 f9cc 	bl	80010d0 <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <lwip_netconn_do_writemore+0x66>
 800ad40:	4b85      	ldr	r3, [pc, #532]	@ (800af58 <lwip_netconn_do_writemore+0x270>)
 800ad42:	f240 6276 	movw	r2, #1654	@ 0x676
 800ad46:	4989      	ldr	r1, [pc, #548]	@ (800af6c <lwip_netconn_do_writemore+0x284>)
 800ad48:	4885      	ldr	r0, [pc, #532]	@ (800af60 <lwip_netconn_do_writemore+0x278>)
 800ad4a:	f7f6 f9c1 	bl	80010d0 <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	699a      	ldr	r2, [r3, #24]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d306      	bcc.n	800ad6c <lwip_netconn_do_writemore+0x84>
 800ad5e:	4b7e      	ldr	r3, [pc, #504]	@ (800af58 <lwip_netconn_do_writemore+0x270>)
 800ad60:	f240 6277 	movw	r2, #1655	@ 0x677
 800ad64:	4982      	ldr	r1, [pc, #520]	@ (800af70 <lwip_netconn_do_writemore+0x288>)
 800ad66:	487e      	ldr	r0, [pc, #504]	@ (800af60 <lwip_netconn_do_writemore+0x278>)
 800ad68:	f7f6 f9b2 	bl	80010d0 <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	899b      	ldrh	r3, [r3, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <lwip_netconn_do_writemore+0x9c>
 800ad76:	4b78      	ldr	r3, [pc, #480]	@ (800af58 <lwip_netconn_do_writemore+0x270>)
 800ad78:	f240 6279 	movw	r2, #1657	@ 0x679
 800ad7c:	497d      	ldr	r1, [pc, #500]	@ (800af74 <lwip_netconn_do_writemore+0x28c>)
 800ad7e:	4878      	ldr	r0, [pc, #480]	@ (800af60 <lwip_netconn_do_writemore+0x278>)
 800ad80:	f7f6 f9a6 	bl	80010d0 <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	7f1b      	ldrb	r3, [r3, #28]
 800ad8a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7f1b      	ldrb	r3, [r3, #28]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d104      	bne.n	800ada2 <lwip_netconn_do_writemore+0xba>
 800ad98:	7ebb      	ldrb	r3, [r7, #26]
 800ad9a:	f003 0304 	and.w	r3, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <lwip_netconn_do_writemore+0xbe>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <lwip_netconn_do_writemore+0xc0>
 800ada6:	2300      	movs	r3, #0
 800ada8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	4413      	add	r3, r2
 800adba:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800add4:	d307      	bcc.n	800ade6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800add6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adda:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800addc:	7ebb      	ldrb	r3, [r7, #26]
 800adde:	f043 0302 	orr.w	r3, r3, #2
 800ade2:	76bb      	strb	r3, [r7, #26]
 800ade4:	e001      	b.n	800adea <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800adf2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800adf4:	89fa      	ldrh	r2, [r7, #14]
 800adf6:	8bbb      	ldrh	r3, [r7, #28]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d216      	bcs.n	800ae2a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800adfc:	89fb      	ldrh	r3, [r7, #14]
 800adfe:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ae00:	7e3b      	ldrb	r3, [r7, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00d      	beq.n	800ae22 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae06:	8bbb      	ldrh	r3, [r7, #28]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10e      	bne.n	800ae2a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d102      	bne.n	800ae1c <lwip_netconn_do_writemore+0x134>
 800ae16:	f06f 0306 	mvn.w	r3, #6
 800ae1a:	e000      	b.n	800ae1e <lwip_netconn_do_writemore+0x136>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ae20:	e07d      	b.n	800af1e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ae22:	7ebb      	ldrb	r3, [r7, #26]
 800ae24:	f043 0302 	orr.w	r3, r3, #2
 800ae28:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	691a      	ldr	r2, [r3, #16]
 800ae30:	8bbb      	ldrh	r3, [r7, #28]
 800ae32:	441a      	add	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a1b      	ldr	r3, [r3, #32]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d906      	bls.n	800ae4e <lwip_netconn_do_writemore+0x166>
 800ae40:	4b45      	ldr	r3, [pc, #276]	@ (800af58 <lwip_netconn_do_writemore+0x270>)
 800ae42:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800ae46:	494c      	ldr	r1, [pc, #304]	@ (800af78 <lwip_netconn_do_writemore+0x290>)
 800ae48:	4845      	ldr	r0, [pc, #276]	@ (800af60 <lwip_netconn_do_writemore+0x278>)
 800ae4a:	f7f6 f941 	bl	80010d0 <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae4e:	8bbb      	ldrh	r3, [r7, #28]
 800ae50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d103      	bne.n	800ae60 <lwip_netconn_do_writemore+0x178>
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae5e:	d209      	bcs.n	800ae74 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae64:	8bba      	ldrh	r2, [r7, #28]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d10b      	bne.n	800ae82 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	899b      	ldrh	r3, [r3, #12]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d906      	bls.n	800ae82 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ae74:	2301      	movs	r3, #1
 800ae76:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae78:	7ebb      	ldrb	r3, [r7, #26]
 800ae7a:	f043 0302 	orr.w	r3, r3, #2
 800ae7e:	76bb      	strb	r3, [r7, #26]
 800ae80:	e001      	b.n	800ae86 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6858      	ldr	r0, [r3, #4]
 800ae8a:	7ebb      	ldrb	r3, [r7, #26]
 800ae8c:	8bba      	ldrh	r2, [r7, #28]
 800ae8e:	6979      	ldr	r1, [r7, #20]
 800ae90:	f006 fd4a 	bl	8011928 <tcp_write>
 800ae94:	4603      	mov	r3, r0
 800ae96:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ae98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d12c      	bne.n	800aefa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	6999      	ldr	r1, [r3, #24]
 800aea6:	8bba      	ldrh	r2, [r7, #28]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	440a      	add	r2, r1
 800aeae:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	6919      	ldr	r1, [r3, #16]
 800aeb6:	8bba      	ldrh	r2, [r7, #28]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	440a      	add	r2, r1
 800aebe:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a1b      	ldr	r3, [r3, #32]
 800aec4:	691a      	ldr	r2, [r3, #16]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d113      	bne.n	800aefa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	899a      	ldrh	r2, [r3, #12]
 800aed8:	3a01      	subs	r2, #1
 800aeda:	b292      	uxth	r2, r2
 800aedc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	899b      	ldrh	r3, [r3, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d008      	beq.n	800aefa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	689a      	ldr	r2, [r3, #8]
 800aeee:	3208      	adds	r2, #8
 800aef0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	2200      	movs	r2, #0
 800aef8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800aefa:	7e7b      	ldrb	r3, [r7, #25]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <lwip_netconn_do_writemore+0x222>
 800af00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f43f af50 	beq.w	800adaa <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <lwip_netconn_do_writemore+0x234>
 800af12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1a:	d146      	bne.n	800afaa <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800af1c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800af1e:	7e3b      	ldrb	r3, [r7, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d02b      	beq.n	800af7c <lwip_netconn_do_writemore+0x294>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	699a      	ldr	r2, [r3, #24]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	429a      	cmp	r2, r3
 800af32:	d223      	bcs.n	800af7c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d005      	beq.n	800af48 <lwip_netconn_do_writemore+0x260>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af40:	2200      	movs	r2, #0
 800af42:	2103      	movs	r1, #3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7f1b      	ldrb	r3, [r3, #28]
 800af4c:	f043 0310 	orr.w	r3, r3, #16
 800af50:	b2da      	uxtb	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	771a      	strb	r2, [r3, #28]
 800af56:	e028      	b.n	800afaa <lwip_netconn_do_writemore+0x2c2>
 800af58:	08017d7c 	.word	0x08017d7c
 800af5c:	08017ed4 	.word	0x08017ed4
 800af60:	08017dc0 	.word	0x08017dc0
 800af64:	080181dc 	.word	0x080181dc
 800af68:	08017ee4 	.word	0x08017ee4
 800af6c:	080181fc 	.word	0x080181fc
 800af70:	08018214 	.word	0x08018214
 800af74:	08018254 	.word	0x08018254
 800af78:	0801827c 	.word	0x0801827c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800af84:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800af88:	d305      	bcc.n	800af96 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af92:	2b04      	cmp	r3, #4
 800af94:	d909      	bls.n	800afaa <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d005      	beq.n	800afaa <lwip_netconn_do_writemore+0x2c2>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa2:	2200      	movs	r2, #0
 800afa4:	2103      	movs	r1, #3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800afaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d11d      	bne.n	800afee <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	699a      	ldr	r2, [r3, #24]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d002      	beq.n	800afc8 <lwip_netconn_do_writemore+0x2e0>
 800afc2:	7e3b      	ldrb	r3, [r7, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800afc8:	2301      	movs	r3, #1
 800afca:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f007 fa93 	bl	80124fc <tcp_output>
 800afd6:	4603      	mov	r3, r0
 800afd8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800afda:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800afde:	f113 0f04 	cmn.w	r3, #4
 800afe2:	d12c      	bne.n	800b03e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800afe4:	7b3b      	ldrb	r3, [r7, #12]
 800afe6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800afe8:	2301      	movs	r3, #1
 800afea:	76fb      	strb	r3, [r7, #27]
 800afec:	e027      	b.n	800b03e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800afee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff6:	d120      	bne.n	800b03a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	f007 fa7d 	bl	80124fc <tcp_output>
 800b002:	4603      	mov	r3, r0
 800b004:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b006:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b00a:	f113 0f04 	cmn.w	r3, #4
 800b00e:	d104      	bne.n	800b01a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b010:	7b7b      	ldrb	r3, [r7, #13]
 800b012:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b014:	2301      	movs	r3, #1
 800b016:	76fb      	strb	r3, [r7, #27]
 800b018:	e011      	b.n	800b03e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b01a:	7e3b      	ldrb	r3, [r7, #24]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00e      	beq.n	800b03e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d102      	bne.n	800b030 <lwip_netconn_do_writemore+0x348>
 800b02a:	f06f 0306 	mvn.w	r3, #6
 800b02e:	e000      	b.n	800b032 <lwip_netconn_do_writemore+0x34a>
 800b030:	2300      	movs	r3, #0
 800b032:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b034:	2301      	movs	r3, #1
 800b036:	76fb      	strb	r3, [r7, #27]
 800b038:	e001      	b.n	800b03e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b03a:	2301      	movs	r3, #1
 800b03c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b03e:	7efb      	ldrb	r3, [r7, #27]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d015      	beq.n	800b070 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	330c      	adds	r3, #12
 800b04c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	7ffa      	ldrb	r2, [r7, #31]
 800b054:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b062:	78fb      	ldrb	r3, [r7, #3]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b068:	68b8      	ldr	r0, [r7, #8]
 800b06a:	f00b fa8b 	bl	8016584 <sys_sem_signal>
 800b06e:	e002      	b.n	800b076 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b070:	f04f 33ff 	mov.w	r3, #4294967295
 800b074:	e000      	b.n	800b078 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe fd92 	bl	8009bba <netconn_err>
 800b096:	4603      	mov	r3, r0
 800b098:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d166      	bne.n	800b170 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0ac:	2b10      	cmp	r3, #16
 800b0ae:	d15d      	bne.n	800b16c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b0ba:	23fb      	movs	r3, #251	@ 0xfb
 800b0bc:	73fb      	strb	r3, [r7, #15]
 800b0be:	e057      	b.n	800b170 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d04d      	beq.n	800b166 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d006      	beq.n	800b0ea <lwip_netconn_do_write+0x6a>
 800b0dc:	4b28      	ldr	r3, [pc, #160]	@ (800b180 <lwip_netconn_do_write+0x100>)
 800b0de:	f240 7223 	movw	r2, #1827	@ 0x723
 800b0e2:	4928      	ldr	r1, [pc, #160]	@ (800b184 <lwip_netconn_do_write+0x104>)
 800b0e4:	4828      	ldr	r0, [pc, #160]	@ (800b188 <lwip_netconn_do_write+0x108>)
 800b0e6:	f7f5 fff3 	bl	80010d0 <printf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d106      	bne.n	800b100 <lwip_netconn_do_write+0x80>
 800b0f2:	4b23      	ldr	r3, [pc, #140]	@ (800b180 <lwip_netconn_do_write+0x100>)
 800b0f4:	f240 7224 	movw	r2, #1828	@ 0x724
 800b0f8:	4924      	ldr	r1, [pc, #144]	@ (800b18c <lwip_netconn_do_write+0x10c>)
 800b0fa:	4823      	ldr	r0, [pc, #140]	@ (800b188 <lwip_netconn_do_write+0x108>)
 800b0fc:	f7f5 ffe8 	bl	80010d0 <printf>
        msg->conn->current_msg = msg;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff fdea 	bl	800ace8 <lwip_netconn_do_writemore>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d02e      	beq.n	800b178 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d006      	beq.n	800b132 <lwip_netconn_do_write+0xb2>
 800b124:	4b16      	ldr	r3, [pc, #88]	@ (800b180 <lwip_netconn_do_write+0x100>)
 800b126:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b12a:	4919      	ldr	r1, [pc, #100]	@ (800b190 <lwip_netconn_do_write+0x110>)
 800b12c:	4816      	ldr	r0, [pc, #88]	@ (800b188 <lwip_netconn_do_write+0x108>)
 800b12e:	f7f5 ffcf 	bl	80010d0 <printf>
          UNLOCK_TCPIP_CORE();
 800b132:	4818      	ldr	r0, [pc, #96]	@ (800b194 <lwip_netconn_do_write+0x114>)
 800b134:	f00b fa97 	bl	8016666 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	330c      	adds	r3, #12
 800b13e:	2100      	movs	r1, #0
 800b140:	4618      	mov	r0, r3
 800b142:	f00b f9ee 	bl	8016522 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b146:	4813      	ldr	r0, [pc, #76]	@ (800b194 <lwip_netconn_do_write+0x114>)
 800b148:	f00b fa7e 	bl	8016648 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d110      	bne.n	800b178 <lwip_netconn_do_write+0xf8>
 800b156:	4b0a      	ldr	r3, [pc, #40]	@ (800b180 <lwip_netconn_do_write+0x100>)
 800b158:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b15c:	490c      	ldr	r1, [pc, #48]	@ (800b190 <lwip_netconn_do_write+0x110>)
 800b15e:	480a      	ldr	r0, [pc, #40]	@ (800b188 <lwip_netconn_do_write+0x108>)
 800b160:	f7f5 ffb6 	bl	80010d0 <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b164:	e008      	b.n	800b178 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b166:	23f5      	movs	r3, #245	@ 0xf5
 800b168:	73fb      	strb	r3, [r7, #15]
 800b16a:	e001      	b.n	800b170 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b16c:	23fa      	movs	r3, #250	@ 0xfa
 800b16e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	7bfa      	ldrb	r2, [r7, #15]
 800b174:	711a      	strb	r2, [r3, #4]
 800b176:	e000      	b.n	800b17a <lwip_netconn_do_write+0xfa>
        return;
 800b178:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	08017d7c 	.word	0x08017d7c
 800b184:	08018120 	.word	0x08018120
 800b188:	08017dc0 	.word	0x08017dc0
 800b18c:	080182a8 	.word	0x080182a8
 800b190:	0801813c 	.word	0x0801813c
 800b194:	20008e4c 	.word	0x20008e4c

0800b198 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d069      	beq.n	800b28a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1c0:	2b10      	cmp	r3, #16
 800b1c2:	d162      	bne.n	800b28a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d002      	beq.n	800b1d2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1cc:	7afb      	ldrb	r3, [r7, #11]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d05b      	beq.n	800b28a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b1d2:	7afb      	ldrb	r3, [r7, #11]
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d103      	bne.n	800b1e0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	22f5      	movs	r2, #245	@ 0xf5
 800b1dc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1de:	e059      	b.n	800b294 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d103      	bne.n	800b1ee <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	22fb      	movs	r2, #251	@ 0xfb
 800b1ea:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1ec:	e052      	b.n	800b294 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	7a1b      	ldrb	r3, [r3, #8]
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d004      	beq.n	800b204 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff f958 	bl	800a4b4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d006      	beq.n	800b21c <lwip_netconn_do_close+0x84>
 800b20e:	4b23      	ldr	r3, [pc, #140]	@ (800b29c <lwip_netconn_do_close+0x104>)
 800b210:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b214:	4922      	ldr	r1, [pc, #136]	@ (800b2a0 <lwip_netconn_do_close+0x108>)
 800b216:	4823      	ldr	r0, [pc, #140]	@ (800b2a4 <lwip_netconn_do_close+0x10c>)
 800b218:	f7f5 ff5a 	bl	80010d0 <printf>
      msg->conn->state = NETCONN_CLOSE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2204      	movs	r2, #4
 800b222:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2100      	movs	r1, #0
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff f9bc 	bl	800a5b0 <lwip_netconn_do_close_internal>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d029      	beq.n	800b292 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b04      	cmp	r3, #4
 800b246:	d006      	beq.n	800b256 <lwip_netconn_do_close+0xbe>
 800b248:	4b14      	ldr	r3, [pc, #80]	@ (800b29c <lwip_netconn_do_close+0x104>)
 800b24a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b24e:	4916      	ldr	r1, [pc, #88]	@ (800b2a8 <lwip_netconn_do_close+0x110>)
 800b250:	4814      	ldr	r0, [pc, #80]	@ (800b2a4 <lwip_netconn_do_close+0x10c>)
 800b252:	f7f5 ff3d 	bl	80010d0 <printf>
        UNLOCK_TCPIP_CORE();
 800b256:	4815      	ldr	r0, [pc, #84]	@ (800b2ac <lwip_netconn_do_close+0x114>)
 800b258:	f00b fa05 	bl	8016666 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	330c      	adds	r3, #12
 800b262:	2100      	movs	r1, #0
 800b264:	4618      	mov	r0, r3
 800b266:	f00b f95c 	bl	8016522 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b26a:	4810      	ldr	r0, [pc, #64]	@ (800b2ac <lwip_netconn_do_close+0x114>)
 800b26c:	f00b f9ec 	bl	8016648 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	785b      	ldrb	r3, [r3, #1]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00b      	beq.n	800b292 <lwip_netconn_do_close+0xfa>
 800b27a:	4b08      	ldr	r3, [pc, #32]	@ (800b29c <lwip_netconn_do_close+0x104>)
 800b27c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b280:	4909      	ldr	r1, [pc, #36]	@ (800b2a8 <lwip_netconn_do_close+0x110>)
 800b282:	4808      	ldr	r0, [pc, #32]	@ (800b2a4 <lwip_netconn_do_close+0x10c>)
 800b284:	f7f5 ff24 	bl	80010d0 <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b288:	e003      	b.n	800b292 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	22f5      	movs	r2, #245	@ 0xf5
 800b28e:	711a      	strb	r2, [r3, #4]
 800b290:	e000      	b.n	800b294 <lwip_netconn_do_close+0xfc>
      return;
 800b292:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	08017d7c 	.word	0x08017d7c
 800b2a0:	08018120 	.word	0x08018120
 800b2a4:	08017dc0 	.word	0x08017dc0
 800b2a8:	0801813c 	.word	0x0801813c
 800b2ac:	20008e4c 	.word	0x20008e4c

0800b2b0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d013      	beq.n	800b2e6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f001 fdba 	bl	800ce44 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	605a      	str	r2, [r3, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	2006      	movs	r0, #6
 800b2e2:	f000 ff0b 	bl	800c0fc <memp_free>
  }
}
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b2fa:	f008 f9b7 	bl	801366c <sys_timeouts_sleeptime>
 800b2fe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b306:	d10b      	bne.n	800b320 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b308:	4813      	ldr	r0, [pc, #76]	@ (800b358 <tcpip_timeouts_mbox_fetch+0x68>)
 800b30a:	f00b f9ac 	bl	8016666 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b30e:	2200      	movs	r2, #0
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f00b f864 	bl	80163e0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b318:	480f      	ldr	r0, [pc, #60]	@ (800b358 <tcpip_timeouts_mbox_fetch+0x68>)
 800b31a:	f00b f995 	bl	8016648 <sys_mutex_lock>
    return;
 800b31e:	e018      	b.n	800b352 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b326:	f008 f967 	bl	80135f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b32a:	e7e6      	b.n	800b2fa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b32c:	480a      	ldr	r0, [pc, #40]	@ (800b358 <tcpip_timeouts_mbox_fetch+0x68>)
 800b32e:	f00b f99a 	bl	8016666 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f00b f852 	bl	80163e0 <sys_arch_mbox_fetch>
 800b33c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b33e:	4806      	ldr	r0, [pc, #24]	@ (800b358 <tcpip_timeouts_mbox_fetch+0x68>)
 800b340:	f00b f982 	bl	8016648 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34a:	d102      	bne.n	800b352 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b34c:	f008 f954 	bl	80135f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b350:	e7d3      	b.n	800b2fa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	20008e4c 	.word	0x20008e4c

0800b35c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b364:	4810      	ldr	r0, [pc, #64]	@ (800b3a8 <tcpip_thread+0x4c>)
 800b366:	f00b f96f 	bl	8016648 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b36a:	4b10      	ldr	r3, [pc, #64]	@ (800b3ac <tcpip_thread+0x50>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d005      	beq.n	800b37e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b372:	4b0e      	ldr	r3, [pc, #56]	@ (800b3ac <tcpip_thread+0x50>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a0e      	ldr	r2, [pc, #56]	@ (800b3b0 <tcpip_thread+0x54>)
 800b378:	6812      	ldr	r2, [r2, #0]
 800b37a:	4610      	mov	r0, r2
 800b37c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b37e:	f107 030c 	add.w	r3, r7, #12
 800b382:	4619      	mov	r1, r3
 800b384:	480b      	ldr	r0, [pc, #44]	@ (800b3b4 <tcpip_thread+0x58>)
 800b386:	f7ff ffb3 	bl	800b2f0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d106      	bne.n	800b39e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b390:	4b09      	ldr	r3, [pc, #36]	@ (800b3b8 <tcpip_thread+0x5c>)
 800b392:	2291      	movs	r2, #145	@ 0x91
 800b394:	4909      	ldr	r1, [pc, #36]	@ (800b3bc <tcpip_thread+0x60>)
 800b396:	480a      	ldr	r0, [pc, #40]	@ (800b3c0 <tcpip_thread+0x64>)
 800b398:	f7f5 fe9a 	bl	80010d0 <printf>
      continue;
 800b39c:	e003      	b.n	800b3a6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 f80f 	bl	800b3c4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b3a6:	e7ea      	b.n	800b37e <tcpip_thread+0x22>
 800b3a8:	20008e4c 	.word	0x20008e4c
 800b3ac:	20008e40 	.word	0x20008e40
 800b3b0:	20008e44 	.word	0x20008e44
 800b3b4:	20008e48 	.word	0x20008e48
 800b3b8:	080182d4 	.word	0x080182d4
 800b3bc:	08018304 	.word	0x08018304
 800b3c0:	08018324 	.word	0x08018324

0800b3c4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d026      	beq.n	800b422 <tcpip_thread_handle_msg+0x5e>
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	dc2b      	bgt.n	800b430 <tcpip_thread_handle_msg+0x6c>
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <tcpip_thread_handle_msg+0x1e>
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d015      	beq.n	800b40c <tcpip_thread_handle_msg+0x48>
 800b3e0:	e026      	b.n	800b430 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6850      	ldr	r0, [r2, #4]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	6892      	ldr	r2, [r2, #8]
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	4798      	blx	r3
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d004      	beq.n	800b402 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f001 fd21 	bl	800ce44 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	2009      	movs	r0, #9
 800b406:	f000 fe79 	bl	800c0fc <memp_free>
      break;
 800b40a:	e018      	b.n	800b43e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	6892      	ldr	r2, [r2, #8]
 800b414:	4610      	mov	r0, r2
 800b416:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	2008      	movs	r0, #8
 800b41c:	f000 fe6e 	bl	800c0fc <memp_free>
      break;
 800b420:	e00d      	b.n	800b43e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	6892      	ldr	r2, [r2, #8]
 800b42a:	4610      	mov	r0, r2
 800b42c:	4798      	blx	r3
      break;
 800b42e:	e006      	b.n	800b43e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b430:	4b05      	ldr	r3, [pc, #20]	@ (800b448 <tcpip_thread_handle_msg+0x84>)
 800b432:	22cf      	movs	r2, #207	@ 0xcf
 800b434:	4905      	ldr	r1, [pc, #20]	@ (800b44c <tcpip_thread_handle_msg+0x88>)
 800b436:	4806      	ldr	r0, [pc, #24]	@ (800b450 <tcpip_thread_handle_msg+0x8c>)
 800b438:	f7f5 fe4a 	bl	80010d0 <printf>
      break;
 800b43c:	bf00      	nop
  }
}
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	080182d4 	.word	0x080182d4
 800b44c:	08018304 	.word	0x08018304
 800b450:	08018324 	.word	0x08018324

0800b454 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b460:	481a      	ldr	r0, [pc, #104]	@ (800b4cc <tcpip_inpkt+0x78>)
 800b462:	f00b f818 	bl	8016496 <sys_mbox_valid>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d105      	bne.n	800b478 <tcpip_inpkt+0x24>
 800b46c:	4b18      	ldr	r3, [pc, #96]	@ (800b4d0 <tcpip_inpkt+0x7c>)
 800b46e:	22fc      	movs	r2, #252	@ 0xfc
 800b470:	4918      	ldr	r1, [pc, #96]	@ (800b4d4 <tcpip_inpkt+0x80>)
 800b472:	4819      	ldr	r0, [pc, #100]	@ (800b4d8 <tcpip_inpkt+0x84>)
 800b474:	f7f5 fe2c 	bl	80010d0 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b478:	2009      	movs	r0, #9
 800b47a:	f000 fdc9 	bl	800c010 <memp_malloc>
 800b47e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d102      	bne.n	800b48c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b486:	f04f 33ff 	mov.w	r3, #4294967295
 800b48a:	e01a      	b.n	800b4c2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2200      	movs	r2, #0
 800b490:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b4a4:	6979      	ldr	r1, [r7, #20]
 800b4a6:	4809      	ldr	r0, [pc, #36]	@ (800b4cc <tcpip_inpkt+0x78>)
 800b4a8:	f00a ff80 	bl	80163ac <sys_mbox_trypost>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d006      	beq.n	800b4c0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b4b2:	6979      	ldr	r1, [r7, #20]
 800b4b4:	2009      	movs	r0, #9
 800b4b6:	f000 fe21 	bl	800c0fc <memp_free>
    return ERR_MEM;
 800b4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b4be:	e000      	b.n	800b4c2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b4c0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20008e48 	.word	0x20008e48
 800b4d0:	080182d4 	.word	0x080182d4
 800b4d4:	0801834c 	.word	0x0801834c
 800b4d8:	08018324 	.word	0x08018324

0800b4dc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b4ec:	f003 0318 	and.w	r3, r3, #24
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d006      	beq.n	800b502 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b4f4:	4a08      	ldr	r2, [pc, #32]	@ (800b518 <tcpip_input+0x3c>)
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff ffab 	bl	800b454 <tcpip_inpkt>
 800b4fe:	4603      	mov	r3, r0
 800b500:	e005      	b.n	800b50e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b502:	4a06      	ldr	r2, [pc, #24]	@ (800b51c <tcpip_input+0x40>)
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff ffa4 	bl	800b454 <tcpip_inpkt>
 800b50c:	4603      	mov	r3, r0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	08016199 	.word	0x08016199
 800b51c:	080150a1 	.word	0x080150a1

0800b520 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b52a:	4819      	ldr	r0, [pc, #100]	@ (800b590 <tcpip_try_callback+0x70>)
 800b52c:	f00a ffb3 	bl	8016496 <sys_mbox_valid>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d106      	bne.n	800b544 <tcpip_try_callback+0x24>
 800b536:	4b17      	ldr	r3, [pc, #92]	@ (800b594 <tcpip_try_callback+0x74>)
 800b538:	f240 125d 	movw	r2, #349	@ 0x15d
 800b53c:	4916      	ldr	r1, [pc, #88]	@ (800b598 <tcpip_try_callback+0x78>)
 800b53e:	4817      	ldr	r0, [pc, #92]	@ (800b59c <tcpip_try_callback+0x7c>)
 800b540:	f7f5 fdc6 	bl	80010d0 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b544:	2008      	movs	r0, #8
 800b546:	f000 fd63 	bl	800c010 <memp_malloc>
 800b54a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d102      	bne.n	800b558 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b552:	f04f 33ff 	mov.w	r3, #4294967295
 800b556:	e017      	b.n	800b588 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2201      	movs	r2, #1
 800b55c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b56a:	68f9      	ldr	r1, [r7, #12]
 800b56c:	4808      	ldr	r0, [pc, #32]	@ (800b590 <tcpip_try_callback+0x70>)
 800b56e:	f00a ff1d 	bl	80163ac <sys_mbox_trypost>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d006      	beq.n	800b586 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b578:	68f9      	ldr	r1, [r7, #12]
 800b57a:	2008      	movs	r0, #8
 800b57c:	f000 fdbe 	bl	800c0fc <memp_free>
    return ERR_MEM;
 800b580:	f04f 33ff 	mov.w	r3, #4294967295
 800b584:	e000      	b.n	800b588 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20008e48 	.word	0x20008e48
 800b594:	080182d4 	.word	0x080182d4
 800b598:	0801834c 	.word	0x0801834c
 800b59c:	08018324 	.word	0x08018324

0800b5a0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b5ac:	4806      	ldr	r0, [pc, #24]	@ (800b5c8 <tcpip_send_msg_wait_sem+0x28>)
 800b5ae:	f00b f84b 	bl	8016648 <sys_mutex_lock>
  fn(apimsg);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	68b8      	ldr	r0, [r7, #8]
 800b5b6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b5b8:	4803      	ldr	r0, [pc, #12]	@ (800b5c8 <tcpip_send_msg_wait_sem+0x28>)
 800b5ba:	f00b f854 	bl	8016666 <sys_mutex_unlock>
  return ERR_OK;
 800b5be:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20008e4c 	.word	0x20008e4c

0800b5cc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af02      	add	r7, sp, #8
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b5d6:	f000 f871 	bl	800b6bc <lwip_init>

  tcpip_init_done = initfunc;
 800b5da:	4a17      	ldr	r2, [pc, #92]	@ (800b638 <tcpip_init+0x6c>)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b5e0:	4a16      	ldr	r2, [pc, #88]	@ (800b63c <tcpip_init+0x70>)
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b5e6:	2106      	movs	r1, #6
 800b5e8:	4815      	ldr	r0, [pc, #84]	@ (800b640 <tcpip_init+0x74>)
 800b5ea:	f00a feab 	bl	8016344 <sys_mbox_new>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b5f4:	4b13      	ldr	r3, [pc, #76]	@ (800b644 <tcpip_init+0x78>)
 800b5f6:	f240 2261 	movw	r2, #609	@ 0x261
 800b5fa:	4913      	ldr	r1, [pc, #76]	@ (800b648 <tcpip_init+0x7c>)
 800b5fc:	4813      	ldr	r0, [pc, #76]	@ (800b64c <tcpip_init+0x80>)
 800b5fe:	f7f5 fd67 	bl	80010d0 <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b602:	4813      	ldr	r0, [pc, #76]	@ (800b650 <tcpip_init+0x84>)
 800b604:	f00b f804 	bl	8016610 <sys_mutex_new>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d006      	beq.n	800b61c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b60e:	4b0d      	ldr	r3, [pc, #52]	@ (800b644 <tcpip_init+0x78>)
 800b610:	f240 2265 	movw	r2, #613	@ 0x265
 800b614:	490f      	ldr	r1, [pc, #60]	@ (800b654 <tcpip_init+0x88>)
 800b616:	480d      	ldr	r0, [pc, #52]	@ (800b64c <tcpip_init+0x80>)
 800b618:	f7f5 fd5a 	bl	80010d0 <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b61c:	2300      	movs	r3, #0
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b624:	2200      	movs	r2, #0
 800b626:	490c      	ldr	r1, [pc, #48]	@ (800b658 <tcpip_init+0x8c>)
 800b628:	480c      	ldr	r0, [pc, #48]	@ (800b65c <tcpip_init+0x90>)
 800b62a:	f00b f829 	bl	8016680 <sys_thread_new>
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20008e40 	.word	0x20008e40
 800b63c:	20008e44 	.word	0x20008e44
 800b640:	20008e48 	.word	0x20008e48
 800b644:	080182d4 	.word	0x080182d4
 800b648:	0801835c 	.word	0x0801835c
 800b64c:	08018324 	.word	0x08018324
 800b650:	20008e4c 	.word	0x20008e4c
 800b654:	08018380 	.word	0x08018380
 800b658:	0800b35d 	.word	0x0800b35d
 800b65c:	080183a4 	.word	0x080183a4

0800b660 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b66a:	88fb      	ldrh	r3, [r7, #6]
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	b21a      	sxth	r2, r3
 800b670:	88fb      	ldrh	r3, [r7, #6]
 800b672:	0a1b      	lsrs	r3, r3, #8
 800b674:	b29b      	uxth	r3, r3
 800b676:	b21b      	sxth	r3, r3
 800b678:	4313      	orrs	r3, r2
 800b67a:	b21b      	sxth	r3, r3
 800b67c:	b29b      	uxth	r3, r3
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	061a      	lsls	r2, r3, #24
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	021b      	lsls	r3, r3, #8
 800b69a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b69e:	431a      	orrs	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b6a8:	431a      	orrs	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	0e1b      	lsrs	r3, r3, #24
 800b6ae:	4313      	orrs	r3, r2
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b6c6:	f00a ff95 	bl	80165f4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b6ca:	f000 f8d5 	bl	800b878 <mem_init>
  memp_init();
 800b6ce:	f000 fc31 	bl	800bf34 <memp_init>
  pbuf_init();
  netif_init();
 800b6d2:	f000 fd3d 	bl	800c150 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b6d6:	f008 f801 	bl	80136dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b6da:	f001 fe4d 	bl	800d378 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b6de:	f007 ff43 	bl	8013568 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b6e2:	bf00      	nop
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b6f6:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <ptr_to_mem+0x20>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	88fb      	ldrh	r3, [r7, #6]
 800b6fc:	4413      	add	r3, r2
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	200094bc 	.word	0x200094bc

0800b710 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b718:	4b05      	ldr	r3, [pc, #20]	@ (800b730 <mem_to_ptr+0x20>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	b29b      	uxth	r3, r3
}
 800b722:	4618      	mov	r0, r3
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	200094bc 	.word	0x200094bc

0800b734 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b73c:	4b45      	ldr	r3, [pc, #276]	@ (800b854 <plug_holes+0x120>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	429a      	cmp	r2, r3
 800b744:	d206      	bcs.n	800b754 <plug_holes+0x20>
 800b746:	4b44      	ldr	r3, [pc, #272]	@ (800b858 <plug_holes+0x124>)
 800b748:	f240 12df 	movw	r2, #479	@ 0x1df
 800b74c:	4943      	ldr	r1, [pc, #268]	@ (800b85c <plug_holes+0x128>)
 800b74e:	4844      	ldr	r0, [pc, #272]	@ (800b860 <plug_holes+0x12c>)
 800b750:	f7f5 fcbe 	bl	80010d0 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b754:	4b43      	ldr	r3, [pc, #268]	@ (800b864 <plug_holes+0x130>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d306      	bcc.n	800b76c <plug_holes+0x38>
 800b75e:	4b3e      	ldr	r3, [pc, #248]	@ (800b858 <plug_holes+0x124>)
 800b760:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b764:	4940      	ldr	r1, [pc, #256]	@ (800b868 <plug_holes+0x134>)
 800b766:	483e      	ldr	r0, [pc, #248]	@ (800b860 <plug_holes+0x12c>)
 800b768:	f7f5 fcb2 	bl	80010d0 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	791b      	ldrb	r3, [r3, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d006      	beq.n	800b782 <plug_holes+0x4e>
 800b774:	4b38      	ldr	r3, [pc, #224]	@ (800b858 <plug_holes+0x124>)
 800b776:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b77a:	493c      	ldr	r1, [pc, #240]	@ (800b86c <plug_holes+0x138>)
 800b77c:	4838      	ldr	r0, [pc, #224]	@ (800b860 <plug_holes+0x12c>)
 800b77e:	f7f5 fca7 	bl	80010d0 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b78a:	d906      	bls.n	800b79a <plug_holes+0x66>
 800b78c:	4b32      	ldr	r3, [pc, #200]	@ (800b858 <plug_holes+0x124>)
 800b78e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b792:	4937      	ldr	r1, [pc, #220]	@ (800b870 <plug_holes+0x13c>)
 800b794:	4832      	ldr	r0, [pc, #200]	@ (800b860 <plug_holes+0x12c>)
 800b796:	f7f5 fc9b 	bl	80010d0 <printf>

  nmem = ptr_to_mem(mem->next);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff ffa4 	bl	800b6ec <ptr_to_mem>
 800b7a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d024      	beq.n	800b7f8 <plug_holes+0xc4>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	791b      	ldrb	r3, [r3, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d120      	bne.n	800b7f8 <plug_holes+0xc4>
 800b7b6:	4b2b      	ldr	r3, [pc, #172]	@ (800b864 <plug_holes+0x130>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d01b      	beq.n	800b7f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b7c0:	4b2c      	ldr	r3, [pc, #176]	@ (800b874 <plug_holes+0x140>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d102      	bne.n	800b7d0 <plug_holes+0x9c>
      lfree = mem;
 800b7ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b874 <plug_holes+0x140>)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	881a      	ldrh	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b7e0:	d00a      	beq.n	800b7f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff ff80 	bl	800b6ec <ptr_to_mem>
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff ff8e 	bl	800b710 <mem_to_ptr>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	885b      	ldrh	r3, [r3, #2]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff ff75 	bl	800b6ec <ptr_to_mem>
 800b802:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d01f      	beq.n	800b84c <plug_holes+0x118>
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	791b      	ldrb	r3, [r3, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d11b      	bne.n	800b84c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b814:	4b17      	ldr	r3, [pc, #92]	@ (800b874 <plug_holes+0x140>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d102      	bne.n	800b824 <plug_holes+0xf0>
      lfree = pmem;
 800b81e:	4a15      	ldr	r2, [pc, #84]	@ (800b874 <plug_holes+0x140>)
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	881a      	ldrh	r2, [r3, #0]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b834:	d00a      	beq.n	800b84c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff ff56 	bl	800b6ec <ptr_to_mem>
 800b840:	4604      	mov	r4, r0
 800b842:	68b8      	ldr	r0, [r7, #8]
 800b844:	f7ff ff64 	bl	800b710 <mem_to_ptr>
 800b848:	4603      	mov	r3, r0
 800b84a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b84c:	bf00      	nop
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	bd90      	pop	{r4, r7, pc}
 800b854:	200094bc 	.word	0x200094bc
 800b858:	080183b4 	.word	0x080183b4
 800b85c:	080183e4 	.word	0x080183e4
 800b860:	080183fc 	.word	0x080183fc
 800b864:	200094c0 	.word	0x200094c0
 800b868:	08018424 	.word	0x08018424
 800b86c:	08018440 	.word	0x08018440
 800b870:	0801845c 	.word	0x0801845c
 800b874:	200094c8 	.word	0x200094c8

0800b878 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b87e:	4b1f      	ldr	r3, [pc, #124]	@ (800b8fc <mem_init+0x84>)
 800b880:	3303      	adds	r3, #3
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	461a      	mov	r2, r3
 800b888:	4b1d      	ldr	r3, [pc, #116]	@ (800b900 <mem_init+0x88>)
 800b88a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b88c:	4b1c      	ldr	r3, [pc, #112]	@ (800b900 <mem_init+0x88>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b898:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b8a6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800b8aa:	f7ff ff1f 	bl	800b6ec <ptr_to_mem>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4a14      	ldr	r2, [pc, #80]	@ (800b904 <mem_init+0x8c>)
 800b8b2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b8b4:	4b13      	ldr	r3, [pc, #76]	@ (800b904 <mem_init+0x8c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b8bc:	4b11      	ldr	r3, [pc, #68]	@ (800b904 <mem_init+0x8c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b8c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b904 <mem_init+0x8c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b8ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b900 <mem_init+0x88>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a0c      	ldr	r2, [pc, #48]	@ (800b908 <mem_init+0x90>)
 800b8d6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b8d8:	480c      	ldr	r0, [pc, #48]	@ (800b90c <mem_init+0x94>)
 800b8da:	f00a fe99 	bl	8016610 <sys_mutex_new>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d006      	beq.n	800b8f2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b910 <mem_init+0x98>)
 800b8e6:	f240 221f 	movw	r2, #543	@ 0x21f
 800b8ea:	490a      	ldr	r1, [pc, #40]	@ (800b914 <mem_init+0x9c>)
 800b8ec:	480a      	ldr	r0, [pc, #40]	@ (800b918 <mem_init+0xa0>)
 800b8ee:	f7f5 fbef 	bl	80010d0 <printf>
  }
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20008e68 	.word	0x20008e68
 800b900:	200094bc 	.word	0x200094bc
 800b904:	200094c0 	.word	0x200094c0
 800b908:	200094c8 	.word	0x200094c8
 800b90c:	200094c4 	.word	0x200094c4
 800b910:	080183b4 	.word	0x080183b4
 800b914:	08018488 	.word	0x08018488
 800b918:	080183fc 	.word	0x080183fc

0800b91c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7ff fef3 	bl	800b710 <mem_to_ptr>
 800b92a:	4603      	mov	r3, r0
 800b92c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	4618      	mov	r0, r3
 800b934:	f7ff feda 	bl	800b6ec <ptr_to_mem>
 800b938:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	885b      	ldrh	r3, [r3, #2]
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff fed4 	bl	800b6ec <ptr_to_mem>
 800b944:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b94e:	d818      	bhi.n	800b982 <mem_link_valid+0x66>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	885b      	ldrh	r3, [r3, #2]
 800b954:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b958:	d813      	bhi.n	800b982 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b95e:	8afa      	ldrh	r2, [r7, #22]
 800b960:	429a      	cmp	r2, r3
 800b962:	d004      	beq.n	800b96e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	8afa      	ldrh	r2, [r7, #22]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d109      	bne.n	800b982 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b96e:	4b08      	ldr	r3, [pc, #32]	@ (800b990 <mem_link_valid+0x74>)
 800b970:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	429a      	cmp	r2, r3
 800b976:	d006      	beq.n	800b986 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	885b      	ldrh	r3, [r3, #2]
 800b97c:	8afa      	ldrh	r2, [r7, #22]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d001      	beq.n	800b986 <mem_link_valid+0x6a>
    return 0;
 800b982:	2300      	movs	r3, #0
 800b984:	e000      	b.n	800b988 <mem_link_valid+0x6c>
  }
  return 1;
 800b986:	2301      	movs	r3, #1
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	200094c0 	.word	0x200094c0

0800b994 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b088      	sub	sp, #32
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d070      	beq.n	800ba84 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f003 0303 	and.w	r3, r3, #3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00d      	beq.n	800b9c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b9ac:	4b37      	ldr	r3, [pc, #220]	@ (800ba8c <mem_free+0xf8>)
 800b9ae:	f240 2273 	movw	r2, #627	@ 0x273
 800b9b2:	4937      	ldr	r1, [pc, #220]	@ (800ba90 <mem_free+0xfc>)
 800b9b4:	4837      	ldr	r0, [pc, #220]	@ (800ba94 <mem_free+0x100>)
 800b9b6:	f7f5 fb8b 	bl	80010d0 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9ba:	f00a fe87 	bl	80166cc <sys_arch_protect>
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f00a fe91 	bl	80166e8 <sys_arch_unprotect>
    return;
 800b9c6:	e05e      	b.n	800ba86 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3b08      	subs	r3, #8
 800b9cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b9ce:	4b32      	ldr	r3, [pc, #200]	@ (800ba98 <mem_free+0x104>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	69fa      	ldr	r2, [r7, #28]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d306      	bcc.n	800b9e6 <mem_free+0x52>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f103 020c 	add.w	r2, r3, #12
 800b9de:	4b2f      	ldr	r3, [pc, #188]	@ (800ba9c <mem_free+0x108>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d90d      	bls.n	800ba02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b9e6:	4b29      	ldr	r3, [pc, #164]	@ (800ba8c <mem_free+0xf8>)
 800b9e8:	f240 227f 	movw	r2, #639	@ 0x27f
 800b9ec:	492c      	ldr	r1, [pc, #176]	@ (800baa0 <mem_free+0x10c>)
 800b9ee:	4829      	ldr	r0, [pc, #164]	@ (800ba94 <mem_free+0x100>)
 800b9f0:	f7f5 fb6e 	bl	80010d0 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9f4:	f00a fe6a 	bl	80166cc <sys_arch_protect>
 800b9f8:	6138      	str	r0, [r7, #16]
 800b9fa:	6938      	ldr	r0, [r7, #16]
 800b9fc:	f00a fe74 	bl	80166e8 <sys_arch_unprotect>
    return;
 800ba00:	e041      	b.n	800ba86 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba02:	4828      	ldr	r0, [pc, #160]	@ (800baa4 <mem_free+0x110>)
 800ba04:	f00a fe20 	bl	8016648 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	791b      	ldrb	r3, [r3, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d110      	bne.n	800ba32 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ba10:	4b1e      	ldr	r3, [pc, #120]	@ (800ba8c <mem_free+0xf8>)
 800ba12:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ba16:	4924      	ldr	r1, [pc, #144]	@ (800baa8 <mem_free+0x114>)
 800ba18:	481e      	ldr	r0, [pc, #120]	@ (800ba94 <mem_free+0x100>)
 800ba1a:	f7f5 fb59 	bl	80010d0 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ba1e:	4821      	ldr	r0, [pc, #132]	@ (800baa4 <mem_free+0x110>)
 800ba20:	f00a fe21 	bl	8016666 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba24:	f00a fe52 	bl	80166cc <sys_arch_protect>
 800ba28:	6178      	str	r0, [r7, #20]
 800ba2a:	6978      	ldr	r0, [r7, #20]
 800ba2c:	f00a fe5c 	bl	80166e8 <sys_arch_unprotect>
    return;
 800ba30:	e029      	b.n	800ba86 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ba32:	69f8      	ldr	r0, [r7, #28]
 800ba34:	f7ff ff72 	bl	800b91c <mem_link_valid>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d110      	bne.n	800ba60 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ba3e:	4b13      	ldr	r3, [pc, #76]	@ (800ba8c <mem_free+0xf8>)
 800ba40:	f240 2295 	movw	r2, #661	@ 0x295
 800ba44:	4919      	ldr	r1, [pc, #100]	@ (800baac <mem_free+0x118>)
 800ba46:	4813      	ldr	r0, [pc, #76]	@ (800ba94 <mem_free+0x100>)
 800ba48:	f7f5 fb42 	bl	80010d0 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ba4c:	4815      	ldr	r0, [pc, #84]	@ (800baa4 <mem_free+0x110>)
 800ba4e:	f00a fe0a 	bl	8016666 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba52:	f00a fe3b 	bl	80166cc <sys_arch_protect>
 800ba56:	61b8      	str	r0, [r7, #24]
 800ba58:	69b8      	ldr	r0, [r7, #24]
 800ba5a:	f00a fe45 	bl	80166e8 <sys_arch_unprotect>
    return;
 800ba5e:	e012      	b.n	800ba86 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	2200      	movs	r2, #0
 800ba64:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ba66:	4b12      	ldr	r3, [pc, #72]	@ (800bab0 <mem_free+0x11c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	69fa      	ldr	r2, [r7, #28]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d202      	bcs.n	800ba76 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ba70:	4a0f      	ldr	r2, [pc, #60]	@ (800bab0 <mem_free+0x11c>)
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ba76:	69f8      	ldr	r0, [r7, #28]
 800ba78:	f7ff fe5c 	bl	800b734 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ba7c:	4809      	ldr	r0, [pc, #36]	@ (800baa4 <mem_free+0x110>)
 800ba7e:	f00a fdf2 	bl	8016666 <sys_mutex_unlock>
 800ba82:	e000      	b.n	800ba86 <mem_free+0xf2>
    return;
 800ba84:	bf00      	nop
}
 800ba86:	3720      	adds	r7, #32
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	080183b4 	.word	0x080183b4
 800ba90:	080184a4 	.word	0x080184a4
 800ba94:	080183fc 	.word	0x080183fc
 800ba98:	200094bc 	.word	0x200094bc
 800ba9c:	200094c0 	.word	0x200094c0
 800baa0:	080184c8 	.word	0x080184c8
 800baa4:	200094c4 	.word	0x200094c4
 800baa8:	080184e4 	.word	0x080184e4
 800baac:	0801850c 	.word	0x0801850c
 800bab0:	200094c8 	.word	0x200094c8

0800bab4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bac0:	887b      	ldrh	r3, [r7, #2]
 800bac2:	3303      	adds	r3, #3
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	f023 0303 	bic.w	r3, r3, #3
 800baca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bacc:	8bfb      	ldrh	r3, [r7, #30]
 800bace:	2b0b      	cmp	r3, #11
 800bad0:	d801      	bhi.n	800bad6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bad2:	230c      	movs	r3, #12
 800bad4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bad6:	8bfb      	ldrh	r3, [r7, #30]
 800bad8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800badc:	d803      	bhi.n	800bae6 <mem_trim+0x32>
 800bade:	8bfa      	ldrh	r2, [r7, #30]
 800bae0:	887b      	ldrh	r3, [r7, #2]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d201      	bcs.n	800baea <mem_trim+0x36>
    return NULL;
 800bae6:	2300      	movs	r3, #0
 800bae8:	e0d8      	b.n	800bc9c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800baea:	4b6e      	ldr	r3, [pc, #440]	@ (800bca4 <mem_trim+0x1f0>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d304      	bcc.n	800bafe <mem_trim+0x4a>
 800baf4:	4b6c      	ldr	r3, [pc, #432]	@ (800bca8 <mem_trim+0x1f4>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d306      	bcc.n	800bb0c <mem_trim+0x58>
 800bafe:	4b6b      	ldr	r3, [pc, #428]	@ (800bcac <mem_trim+0x1f8>)
 800bb00:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bb04:	496a      	ldr	r1, [pc, #424]	@ (800bcb0 <mem_trim+0x1fc>)
 800bb06:	486b      	ldr	r0, [pc, #428]	@ (800bcb4 <mem_trim+0x200>)
 800bb08:	f7f5 fae2 	bl	80010d0 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb0c:	4b65      	ldr	r3, [pc, #404]	@ (800bca4 <mem_trim+0x1f0>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d304      	bcc.n	800bb20 <mem_trim+0x6c>
 800bb16:	4b64      	ldr	r3, [pc, #400]	@ (800bca8 <mem_trim+0x1f4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d307      	bcc.n	800bb30 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb20:	f00a fdd4 	bl	80166cc <sys_arch_protect>
 800bb24:	60b8      	str	r0, [r7, #8]
 800bb26:	68b8      	ldr	r0, [r7, #8]
 800bb28:	f00a fdde 	bl	80166e8 <sys_arch_unprotect>
    return rmem;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	e0b5      	b.n	800bc9c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3b08      	subs	r3, #8
 800bb34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bb36:	69b8      	ldr	r0, [r7, #24]
 800bb38:	f7ff fdea 	bl	800b710 <mem_to_ptr>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	881a      	ldrh	r2, [r3, #0]
 800bb44:	8afb      	ldrh	r3, [r7, #22]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	3b08      	subs	r3, #8
 800bb4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bb4e:	8bfa      	ldrh	r2, [r7, #30]
 800bb50:	8abb      	ldrh	r3, [r7, #20]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d906      	bls.n	800bb64 <mem_trim+0xb0>
 800bb56:	4b55      	ldr	r3, [pc, #340]	@ (800bcac <mem_trim+0x1f8>)
 800bb58:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bb5c:	4956      	ldr	r1, [pc, #344]	@ (800bcb8 <mem_trim+0x204>)
 800bb5e:	4855      	ldr	r0, [pc, #340]	@ (800bcb4 <mem_trim+0x200>)
 800bb60:	f7f5 fab6 	bl	80010d0 <printf>
  if (newsize > size) {
 800bb64:	8bfa      	ldrh	r2, [r7, #30]
 800bb66:	8abb      	ldrh	r3, [r7, #20]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d901      	bls.n	800bb70 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e095      	b.n	800bc9c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bb70:	8bfa      	ldrh	r2, [r7, #30]
 800bb72:	8abb      	ldrh	r3, [r7, #20]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d101      	bne.n	800bb7c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	e08f      	b.n	800bc9c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bb7c:	484f      	ldr	r0, [pc, #316]	@ (800bcbc <mem_trim+0x208>)
 800bb7e:	f00a fd63 	bl	8016648 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff fdb0 	bl	800b6ec <ptr_to_mem>
 800bb8c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	791b      	ldrb	r3, [r3, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d13f      	bne.n	800bc16 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bb9e:	d106      	bne.n	800bbae <mem_trim+0xfa>
 800bba0:	4b42      	ldr	r3, [pc, #264]	@ (800bcac <mem_trim+0x1f8>)
 800bba2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bba6:	4946      	ldr	r1, [pc, #280]	@ (800bcc0 <mem_trim+0x20c>)
 800bba8:	4842      	ldr	r0, [pc, #264]	@ (800bcb4 <mem_trim+0x200>)
 800bbaa:	f7f5 fa91 	bl	80010d0 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bbb4:	8afa      	ldrh	r2, [r7, #22]
 800bbb6:	8bfb      	ldrh	r3, [r7, #30]
 800bbb8:	4413      	add	r3, r2
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bbc0:	4b40      	ldr	r3, [pc, #256]	@ (800bcc4 <mem_trim+0x210>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d106      	bne.n	800bbd8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bbca:	89fb      	ldrh	r3, [r7, #14]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff fd8d 	bl	800b6ec <ptr_to_mem>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	4a3b      	ldr	r2, [pc, #236]	@ (800bcc4 <mem_trim+0x210>)
 800bbd6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bbd8:	89fb      	ldrh	r3, [r7, #14]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff fd86 	bl	800b6ec <ptr_to_mem>
 800bbe0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	89ba      	ldrh	r2, [r7, #12]
 800bbec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	8afa      	ldrh	r2, [r7, #22]
 800bbf2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	89fa      	ldrh	r2, [r7, #14]
 800bbf8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc02:	d047      	beq.n	800bc94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	881b      	ldrh	r3, [r3, #0]
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff fd6f 	bl	800b6ec <ptr_to_mem>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	89fb      	ldrh	r3, [r7, #14]
 800bc12:	8053      	strh	r3, [r2, #2]
 800bc14:	e03e      	b.n	800bc94 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bc16:	8bfb      	ldrh	r3, [r7, #30]
 800bc18:	f103 0214 	add.w	r2, r3, #20
 800bc1c:	8abb      	ldrh	r3, [r7, #20]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d838      	bhi.n	800bc94 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc22:	8afa      	ldrh	r2, [r7, #22]
 800bc24:	8bfb      	ldrh	r3, [r7, #30]
 800bc26:	4413      	add	r3, r2
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	881b      	ldrh	r3, [r3, #0]
 800bc32:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc36:	d106      	bne.n	800bc46 <mem_trim+0x192>
 800bc38:	4b1c      	ldr	r3, [pc, #112]	@ (800bcac <mem_trim+0x1f8>)
 800bc3a:	f240 3216 	movw	r2, #790	@ 0x316
 800bc3e:	4920      	ldr	r1, [pc, #128]	@ (800bcc0 <mem_trim+0x20c>)
 800bc40:	481c      	ldr	r0, [pc, #112]	@ (800bcb4 <mem_trim+0x200>)
 800bc42:	f7f5 fa45 	bl	80010d0 <printf>
    mem2 = ptr_to_mem(ptr2);
 800bc46:	89fb      	ldrh	r3, [r7, #14]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff fd4f 	bl	800b6ec <ptr_to_mem>
 800bc4e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bc50:	4b1c      	ldr	r3, [pc, #112]	@ (800bcc4 <mem_trim+0x210>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d202      	bcs.n	800bc60 <mem_trim+0x1ac>
      lfree = mem2;
 800bc5a:	4a1a      	ldr	r2, [pc, #104]	@ (800bcc4 <mem_trim+0x210>)
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	2200      	movs	r2, #0
 800bc64:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	881a      	ldrh	r2, [r3, #0]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	8afa      	ldrh	r2, [r7, #22]
 800bc72:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	89fa      	ldrh	r2, [r7, #14]
 800bc78:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc82:	d007      	beq.n	800bc94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	881b      	ldrh	r3, [r3, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff fd2f 	bl	800b6ec <ptr_to_mem>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	89fb      	ldrh	r3, [r7, #14]
 800bc92:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc94:	4809      	ldr	r0, [pc, #36]	@ (800bcbc <mem_trim+0x208>)
 800bc96:	f00a fce6 	bl	8016666 <sys_mutex_unlock>
  return rmem;
 800bc9a:	687b      	ldr	r3, [r7, #4]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	200094bc 	.word	0x200094bc
 800bca8:	200094c0 	.word	0x200094c0
 800bcac:	080183b4 	.word	0x080183b4
 800bcb0:	08018540 	.word	0x08018540
 800bcb4:	080183fc 	.word	0x080183fc
 800bcb8:	08018558 	.word	0x08018558
 800bcbc:	200094c4 	.word	0x200094c4
 800bcc0:	08018578 	.word	0x08018578
 800bcc4:	200094c8 	.word	0x200094c8

0800bcc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <mem_malloc+0x14>
    return NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e0e2      	b.n	800bea2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bcdc:	88fb      	ldrh	r3, [r7, #6]
 800bcde:	3303      	adds	r3, #3
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	f023 0303 	bic.w	r3, r3, #3
 800bce6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bce8:	8bbb      	ldrh	r3, [r7, #28]
 800bcea:	2b0b      	cmp	r3, #11
 800bcec:	d801      	bhi.n	800bcf2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bcee:	230c      	movs	r3, #12
 800bcf0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bcf2:	8bbb      	ldrh	r3, [r7, #28]
 800bcf4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bcf8:	d803      	bhi.n	800bd02 <mem_malloc+0x3a>
 800bcfa:	8bba      	ldrh	r2, [r7, #28]
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d201      	bcs.n	800bd06 <mem_malloc+0x3e>
    return NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	e0cd      	b.n	800bea2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bd06:	4869      	ldr	r0, [pc, #420]	@ (800beac <mem_malloc+0x1e4>)
 800bd08:	f00a fc9e 	bl	8016648 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd0c:	4b68      	ldr	r3, [pc, #416]	@ (800beb0 <mem_malloc+0x1e8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff fcfd 	bl	800b710 <mem_to_ptr>
 800bd16:	4603      	mov	r3, r0
 800bd18:	83fb      	strh	r3, [r7, #30]
 800bd1a:	e0b7      	b.n	800be8c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bd1c:	8bfb      	ldrh	r3, [r7, #30]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fce4 	bl	800b6ec <ptr_to_mem>
 800bd24:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	791b      	ldrb	r3, [r3, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 80a7 	bne.w	800be7e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	461a      	mov	r2, r3
 800bd36:	8bfb      	ldrh	r3, [r7, #30]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	f1a3 0208 	sub.w	r2, r3, #8
 800bd3e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bd40:	429a      	cmp	r2, r3
 800bd42:	f0c0 809c 	bcc.w	800be7e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	8bfb      	ldrh	r3, [r7, #30]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	f1a3 0208 	sub.w	r2, r3, #8
 800bd54:	8bbb      	ldrh	r3, [r7, #28]
 800bd56:	3314      	adds	r3, #20
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d333      	bcc.n	800bdc4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bd5c:	8bfa      	ldrh	r2, [r7, #30]
 800bd5e:	8bbb      	ldrh	r3, [r7, #28]
 800bd60:	4413      	add	r3, r2
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	3308      	adds	r3, #8
 800bd66:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bd68:	8a7b      	ldrh	r3, [r7, #18]
 800bd6a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd6e:	d106      	bne.n	800bd7e <mem_malloc+0xb6>
 800bd70:	4b50      	ldr	r3, [pc, #320]	@ (800beb4 <mem_malloc+0x1ec>)
 800bd72:	f240 3287 	movw	r2, #903	@ 0x387
 800bd76:	4950      	ldr	r1, [pc, #320]	@ (800beb8 <mem_malloc+0x1f0>)
 800bd78:	4850      	ldr	r0, [pc, #320]	@ (800bebc <mem_malloc+0x1f4>)
 800bd7a:	f7f5 f9a9 	bl	80010d0 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bd7e:	8a7b      	ldrh	r3, [r7, #18]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fcb3 	bl	800b6ec <ptr_to_mem>
 800bd86:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	881a      	ldrh	r2, [r3, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	8bfa      	ldrh	r2, [r7, #30]
 800bd9a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	8a7a      	ldrh	r2, [r7, #18]
 800bda0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2201      	movs	r2, #1
 800bda6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bdb0:	d00b      	beq.n	800bdca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff fc98 	bl	800b6ec <ptr_to_mem>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	8a7b      	ldrh	r3, [r7, #18]
 800bdc0:	8053      	strh	r3, [r2, #2]
 800bdc2:	e002      	b.n	800bdca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bdca:	4b39      	ldr	r3, [pc, #228]	@ (800beb0 <mem_malloc+0x1e8>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d127      	bne.n	800be24 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bdd4:	4b36      	ldr	r3, [pc, #216]	@ (800beb0 <mem_malloc+0x1e8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bdda:	e005      	b.n	800bde8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7ff fc83 	bl	800b6ec <ptr_to_mem>
 800bde6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	791b      	ldrb	r3, [r3, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d004      	beq.n	800bdfa <mem_malloc+0x132>
 800bdf0:	4b33      	ldr	r3, [pc, #204]	@ (800bec0 <mem_malloc+0x1f8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	69ba      	ldr	r2, [r7, #24]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d1f0      	bne.n	800bddc <mem_malloc+0x114>
          }
          lfree = cur;
 800bdfa:	4a2d      	ldr	r2, [pc, #180]	@ (800beb0 <mem_malloc+0x1e8>)
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be00:	4b2b      	ldr	r3, [pc, #172]	@ (800beb0 <mem_malloc+0x1e8>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	4b2e      	ldr	r3, [pc, #184]	@ (800bec0 <mem_malloc+0x1f8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d00b      	beq.n	800be24 <mem_malloc+0x15c>
 800be0c:	4b28      	ldr	r3, [pc, #160]	@ (800beb0 <mem_malloc+0x1e8>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	791b      	ldrb	r3, [r3, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d006      	beq.n	800be24 <mem_malloc+0x15c>
 800be16:	4b27      	ldr	r3, [pc, #156]	@ (800beb4 <mem_malloc+0x1ec>)
 800be18:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800be1c:	4929      	ldr	r1, [pc, #164]	@ (800bec4 <mem_malloc+0x1fc>)
 800be1e:	4827      	ldr	r0, [pc, #156]	@ (800bebc <mem_malloc+0x1f4>)
 800be20:	f7f5 f956 	bl	80010d0 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800be24:	4821      	ldr	r0, [pc, #132]	@ (800beac <mem_malloc+0x1e4>)
 800be26:	f00a fc1e 	bl	8016666 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800be2a:	8bba      	ldrh	r2, [r7, #28]
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	4413      	add	r3, r2
 800be30:	3308      	adds	r3, #8
 800be32:	4a23      	ldr	r2, [pc, #140]	@ (800bec0 <mem_malloc+0x1f8>)
 800be34:	6812      	ldr	r2, [r2, #0]
 800be36:	4293      	cmp	r3, r2
 800be38:	d906      	bls.n	800be48 <mem_malloc+0x180>
 800be3a:	4b1e      	ldr	r3, [pc, #120]	@ (800beb4 <mem_malloc+0x1ec>)
 800be3c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800be40:	4921      	ldr	r1, [pc, #132]	@ (800bec8 <mem_malloc+0x200>)
 800be42:	481e      	ldr	r0, [pc, #120]	@ (800bebc <mem_malloc+0x1f4>)
 800be44:	f7f5 f944 	bl	80010d0 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f003 0303 	and.w	r3, r3, #3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d006      	beq.n	800be60 <mem_malloc+0x198>
 800be52:	4b18      	ldr	r3, [pc, #96]	@ (800beb4 <mem_malloc+0x1ec>)
 800be54:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800be58:	491c      	ldr	r1, [pc, #112]	@ (800becc <mem_malloc+0x204>)
 800be5a:	4818      	ldr	r0, [pc, #96]	@ (800bebc <mem_malloc+0x1f4>)
 800be5c:	f7f5 f938 	bl	80010d0 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f003 0303 	and.w	r3, r3, #3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d006      	beq.n	800be78 <mem_malloc+0x1b0>
 800be6a:	4b12      	ldr	r3, [pc, #72]	@ (800beb4 <mem_malloc+0x1ec>)
 800be6c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800be70:	4917      	ldr	r1, [pc, #92]	@ (800bed0 <mem_malloc+0x208>)
 800be72:	4812      	ldr	r0, [pc, #72]	@ (800bebc <mem_malloc+0x1f4>)
 800be74:	f7f5 f92c 	bl	80010d0 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	3308      	adds	r3, #8
 800be7c:	e011      	b.n	800bea2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800be7e:	8bfb      	ldrh	r3, [r7, #30]
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff fc33 	bl	800b6ec <ptr_to_mem>
 800be86:	4603      	mov	r3, r0
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800be8c:	8bfa      	ldrh	r2, [r7, #30]
 800be8e:	8bbb      	ldrh	r3, [r7, #28]
 800be90:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800be94:	429a      	cmp	r2, r3
 800be96:	f4ff af41 	bcc.w	800bd1c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800be9a:	4804      	ldr	r0, [pc, #16]	@ (800beac <mem_malloc+0x1e4>)
 800be9c:	f00a fbe3 	bl	8016666 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3720      	adds	r7, #32
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	200094c4 	.word	0x200094c4
 800beb0:	200094c8 	.word	0x200094c8
 800beb4:	080183b4 	.word	0x080183b4
 800beb8:	08018578 	.word	0x08018578
 800bebc:	080183fc 	.word	0x080183fc
 800bec0:	200094c0 	.word	0x200094c0
 800bec4:	0801858c 	.word	0x0801858c
 800bec8:	080185a8 	.word	0x080185a8
 800becc:	080185d8 	.word	0x080185d8
 800bed0:	08018608 	.word	0x08018608

0800bed4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	2200      	movs	r2, #0
 800bee2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	3303      	adds	r3, #3
 800beea:	f023 0303 	bic.w	r3, r3, #3
 800beee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	e011      	b.n	800bf1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	4413      	add	r3, r2
 800bf12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3301      	adds	r3, #1
 800bf18:	60fb      	str	r3, [r7, #12]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	885b      	ldrh	r3, [r3, #2]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4293      	cmp	r3, r2
 800bf24:	dbe7      	blt.n	800bef6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	80fb      	strh	r3, [r7, #6]
 800bf3e:	e009      	b.n	800bf54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bf40:	88fb      	ldrh	r3, [r7, #6]
 800bf42:	4a08      	ldr	r2, [pc, #32]	@ (800bf64 <memp_init+0x30>)
 800bf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff ffc3 	bl	800bed4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	3301      	adds	r3, #1
 800bf52:	80fb      	strh	r3, [r7, #6]
 800bf54:	88fb      	ldrh	r3, [r7, #6]
 800bf56:	2b0c      	cmp	r3, #12
 800bf58:	d9f2      	bls.n	800bf40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bf5a:	bf00      	nop
 800bf5c:	bf00      	nop
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	0801ae20 	.word	0x0801ae20

0800bf68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bf70:	f00a fbac 	bl	80166cc <sys_arch_protect>
 800bf74:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d015      	beq.n	800bfb0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	6812      	ldr	r2, [r2, #0]
 800bf8c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	f003 0303 	and.w	r3, r3, #3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d006      	beq.n	800bfa6 <do_memp_malloc_pool+0x3e>
 800bf98:	4b09      	ldr	r3, [pc, #36]	@ (800bfc0 <do_memp_malloc_pool+0x58>)
 800bf9a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bf9e:	4909      	ldr	r1, [pc, #36]	@ (800bfc4 <do_memp_malloc_pool+0x5c>)
 800bfa0:	4809      	ldr	r0, [pc, #36]	@ (800bfc8 <do_memp_malloc_pool+0x60>)
 800bfa2:	f7f5 f895 	bl	80010d0 <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f00a fb9e 	bl	80166e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	e003      	b.n	800bfb8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f00a fb99 	bl	80166e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	0801862c 	.word	0x0801862c
 800bfc4:	0801865c 	.word	0x0801865c
 800bfc8:	08018680 	.word	0x08018680

0800bfcc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <memp_malloc_pool+0x1c>
 800bfda:	4b0a      	ldr	r3, [pc, #40]	@ (800c004 <memp_malloc_pool+0x38>)
 800bfdc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800bfe0:	4909      	ldr	r1, [pc, #36]	@ (800c008 <memp_malloc_pool+0x3c>)
 800bfe2:	480a      	ldr	r0, [pc, #40]	@ (800c00c <memp_malloc_pool+0x40>)
 800bfe4:	f7f5 f874 	bl	80010d0 <printf>
  if (desc == NULL) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <memp_malloc_pool+0x26>
    return NULL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	e003      	b.n	800bffa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff ffb8 	bl	800bf68 <do_memp_malloc_pool>
 800bff8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	0801862c 	.word	0x0801862c
 800c008:	080186a8 	.word	0x080186a8
 800c00c:	08018680 	.word	0x08018680

0800c010 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	2b0c      	cmp	r3, #12
 800c01e:	d908      	bls.n	800c032 <memp_malloc+0x22>
 800c020:	4b0a      	ldr	r3, [pc, #40]	@ (800c04c <memp_malloc+0x3c>)
 800c022:	f240 1257 	movw	r2, #343	@ 0x157
 800c026:	490a      	ldr	r1, [pc, #40]	@ (800c050 <memp_malloc+0x40>)
 800c028:	480a      	ldr	r0, [pc, #40]	@ (800c054 <memp_malloc+0x44>)
 800c02a:	f7f5 f851 	bl	80010d0 <printf>
 800c02e:	2300      	movs	r3, #0
 800c030:	e008      	b.n	800c044 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	4a08      	ldr	r2, [pc, #32]	@ (800c058 <memp_malloc+0x48>)
 800c036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff ff94 	bl	800bf68 <do_memp_malloc_pool>
 800c040:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c042:	68fb      	ldr	r3, [r7, #12]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	0801862c 	.word	0x0801862c
 800c050:	080186bc 	.word	0x080186bc
 800c054:	08018680 	.word	0x08018680
 800c058:	0801ae20 	.word	0x0801ae20

0800c05c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	f003 0303 	and.w	r3, r3, #3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d006      	beq.n	800c07e <do_memp_free_pool+0x22>
 800c070:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a8 <do_memp_free_pool+0x4c>)
 800c072:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c076:	490d      	ldr	r1, [pc, #52]	@ (800c0ac <do_memp_free_pool+0x50>)
 800c078:	480d      	ldr	r0, [pc, #52]	@ (800c0b0 <do_memp_free_pool+0x54>)
 800c07a:	f7f5 f829 	bl	80010d0 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c082:	f00a fb23 	bl	80166cc <sys_arch_protect>
 800c086:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c09a:	68b8      	ldr	r0, [r7, #8]
 800c09c:	f00a fb24 	bl	80166e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c0a0:	bf00      	nop
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	0801862c 	.word	0x0801862c
 800c0ac:	080186dc 	.word	0x080186dc
 800c0b0:	08018680 	.word	0x08018680

0800c0b4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d106      	bne.n	800c0d2 <memp_free_pool+0x1e>
 800c0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c0f0 <memp_free_pool+0x3c>)
 800c0c6:	f240 1295 	movw	r2, #405	@ 0x195
 800c0ca:	490a      	ldr	r1, [pc, #40]	@ (800c0f4 <memp_free_pool+0x40>)
 800c0cc:	480a      	ldr	r0, [pc, #40]	@ (800c0f8 <memp_free_pool+0x44>)
 800c0ce:	f7f4 ffff 	bl	80010d0 <printf>
  if ((desc == NULL) || (mem == NULL)) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d007      	beq.n	800c0e8 <memp_free_pool+0x34>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d004      	beq.n	800c0e8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f7ff ffbb 	bl	800c05c <do_memp_free_pool>
 800c0e6:	e000      	b.n	800c0ea <memp_free_pool+0x36>
    return;
 800c0e8:	bf00      	nop
}
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	0801862c 	.word	0x0801862c
 800c0f4:	080186a8 	.word	0x080186a8
 800c0f8:	08018680 	.word	0x08018680

0800c0fc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	6039      	str	r1, [r7, #0]
 800c106:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c108:	79fb      	ldrb	r3, [r7, #7]
 800c10a:	2b0c      	cmp	r3, #12
 800c10c:	d907      	bls.n	800c11e <memp_free+0x22>
 800c10e:	4b0c      	ldr	r3, [pc, #48]	@ (800c140 <memp_free+0x44>)
 800c110:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c114:	490b      	ldr	r1, [pc, #44]	@ (800c144 <memp_free+0x48>)
 800c116:	480c      	ldr	r0, [pc, #48]	@ (800c148 <memp_free+0x4c>)
 800c118:	f7f4 ffda 	bl	80010d0 <printf>
 800c11c:	e00c      	b.n	800c138 <memp_free+0x3c>

  if (mem == NULL) {
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d008      	beq.n	800c136 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c124:	79fb      	ldrb	r3, [r7, #7]
 800c126:	4a09      	ldr	r2, [pc, #36]	@ (800c14c <memp_free+0x50>)
 800c128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff ff94 	bl	800c05c <do_memp_free_pool>
 800c134:	e000      	b.n	800c138 <memp_free+0x3c>
    return;
 800c136:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	0801862c 	.word	0x0801862c
 800c144:	080186fc 	.word	0x080186fc
 800c148:	08018680 	.word	0x08018680
 800c14c:	0801ae20 	.word	0x0801ae20

0800c150 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c154:	bf00      	nop
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
	...

0800c160 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d108      	bne.n	800c186 <netif_add+0x26>
 800c174:	4b57      	ldr	r3, [pc, #348]	@ (800c2d4 <netif_add+0x174>)
 800c176:	f240 1227 	movw	r2, #295	@ 0x127
 800c17a:	4957      	ldr	r1, [pc, #348]	@ (800c2d8 <netif_add+0x178>)
 800c17c:	4857      	ldr	r0, [pc, #348]	@ (800c2dc <netif_add+0x17c>)
 800c17e:	f7f4 ffa7 	bl	80010d0 <printf>
 800c182:	2300      	movs	r3, #0
 800c184:	e0a2      	b.n	800c2cc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d108      	bne.n	800c19e <netif_add+0x3e>
 800c18c:	4b51      	ldr	r3, [pc, #324]	@ (800c2d4 <netif_add+0x174>)
 800c18e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c192:	4953      	ldr	r1, [pc, #332]	@ (800c2e0 <netif_add+0x180>)
 800c194:	4851      	ldr	r0, [pc, #324]	@ (800c2dc <netif_add+0x17c>)
 800c196:	f7f4 ff9b 	bl	80010d0 <printf>
 800c19a:	2300      	movs	r3, #0
 800c19c:	e096      	b.n	800c2cc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c1a4:	4b4f      	ldr	r3, [pc, #316]	@ (800c2e4 <netif_add+0x184>)
 800c1a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c1ae:	4b4d      	ldr	r3, [pc, #308]	@ (800c2e4 <netif_add+0x184>)
 800c1b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c1b8:	4b4a      	ldr	r3, [pc, #296]	@ (800c2e4 <netif_add+0x184>)
 800c1ba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	4a45      	ldr	r2, [pc, #276]	@ (800c2e8 <netif_add+0x188>)
 800c1d2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6a3a      	ldr	r2, [r7, #32]
 800c1ec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c1ee:	4b3f      	ldr	r3, [pc, #252]	@ (800c2ec <netif_add+0x18c>)
 800c1f0:	781a      	ldrb	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1fc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	68b9      	ldr	r1, [r7, #8]
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f000 f913 	bl	800c430 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	4798      	blx	r3
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <netif_add+0xba>
    return NULL;
 800c216:	2300      	movs	r3, #0
 800c218:	e058      	b.n	800c2cc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c220:	2bff      	cmp	r3, #255	@ 0xff
 800c222:	d103      	bne.n	800c22c <netif_add+0xcc>
        netif->num = 0;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c230:	4b2f      	ldr	r3, [pc, #188]	@ (800c2f0 <netif_add+0x190>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	617b      	str	r3, [r7, #20]
 800c236:	e02b      	b.n	800c290 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d106      	bne.n	800c24e <netif_add+0xee>
 800c240:	4b24      	ldr	r3, [pc, #144]	@ (800c2d4 <netif_add+0x174>)
 800c242:	f240 128b 	movw	r2, #395	@ 0x18b
 800c246:	492b      	ldr	r1, [pc, #172]	@ (800c2f4 <netif_add+0x194>)
 800c248:	4824      	ldr	r0, [pc, #144]	@ (800c2dc <netif_add+0x17c>)
 800c24a:	f7f4 ff41 	bl	80010d0 <printf>
        num_netifs++;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	3301      	adds	r3, #1
 800c252:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	2bff      	cmp	r3, #255	@ 0xff
 800c258:	dd06      	ble.n	800c268 <netif_add+0x108>
 800c25a:	4b1e      	ldr	r3, [pc, #120]	@ (800c2d4 <netif_add+0x174>)
 800c25c:	f240 128d 	movw	r2, #397	@ 0x18d
 800c260:	4925      	ldr	r1, [pc, #148]	@ (800c2f8 <netif_add+0x198>)
 800c262:	481e      	ldr	r0, [pc, #120]	@ (800c2dc <netif_add+0x17c>)
 800c264:	f7f4 ff34 	bl	80010d0 <printf>
        if (netif2->num == netif->num) {
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c274:	429a      	cmp	r2, r3
 800c276:	d108      	bne.n	800c28a <netif_add+0x12a>
          netif->num++;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c27e:	3301      	adds	r3, #1
 800c280:	b2da      	uxtb	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c288:	e005      	b.n	800c296 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1d0      	bne.n	800c238 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1be      	bne.n	800c21a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2a2:	2bfe      	cmp	r3, #254	@ 0xfe
 800c2a4:	d103      	bne.n	800c2ae <netif_add+0x14e>
    netif_num = 0;
 800c2a6:	4b11      	ldr	r3, [pc, #68]	@ (800c2ec <netif_add+0x18c>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
 800c2ac:	e006      	b.n	800c2bc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c2ec <netif_add+0x18c>)
 800c2ba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c2bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f0 <netif_add+0x190>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800c2f0 <netif_add+0x190>)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	08018718 	.word	0x08018718
 800c2d8:	080187ac 	.word	0x080187ac
 800c2dc:	08018768 	.word	0x08018768
 800c2e0:	080187c8 	.word	0x080187c8
 800c2e4:	0801ae94 	.word	0x0801ae94
 800c2e8:	0800c70b 	.word	0x0800c70b
 800c2ec:	2000c5a0 	.word	0x2000c5a0
 800c2f0:	2000c598 	.word	0x2000c598
 800c2f4:	080187ec 	.word	0x080187ec
 800c2f8:	08018800 	.word	0x08018800

0800c2fc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f002 fe07 	bl	800ef1c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f007 fd21 	bl	8013d58 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d106      	bne.n	800c340 <netif_do_set_ipaddr+0x20>
 800c332:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a8 <netif_do_set_ipaddr+0x88>)
 800c334:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c338:	491c      	ldr	r1, [pc, #112]	@ (800c3ac <netif_do_set_ipaddr+0x8c>)
 800c33a:	481d      	ldr	r0, [pc, #116]	@ (800c3b0 <netif_do_set_ipaddr+0x90>)
 800c33c:	f7f4 fec8 	bl	80010d0 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <netif_do_set_ipaddr+0x34>
 800c346:	4b18      	ldr	r3, [pc, #96]	@ (800c3a8 <netif_do_set_ipaddr+0x88>)
 800c348:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c34c:	4917      	ldr	r1, [pc, #92]	@ (800c3ac <netif_do_set_ipaddr+0x8c>)
 800c34e:	4818      	ldr	r0, [pc, #96]	@ (800c3b0 <netif_do_set_ipaddr+0x90>)
 800c350:	f7f4 febe 	bl	80010d0 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3304      	adds	r3, #4
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d01c      	beq.n	800c39c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	3304      	adds	r3, #4
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c372:	f107 0314 	add.w	r3, r7, #20
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff ffbf 	bl	800c2fc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <netif_do_set_ipaddr+0x6a>
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	e000      	b.n	800c38c <netif_do_set_ipaddr+0x6c>
 800c38a:	2300      	movs	r3, #0
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c390:	2101      	movs	r1, #1
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f000 f8d2 	bl	800c53c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c398:	2301      	movs	r3, #1
 800c39a:	e000      	b.n	800c39e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3718      	adds	r7, #24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	08018718 	.word	0x08018718
 800c3ac:	08018830 	.word	0x08018830
 800c3b0:	08018768 	.word	0x08018768

0800c3b4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d00a      	beq.n	800c3e4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <netif_do_set_netmask+0x26>
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	e000      	b.n	800c3dc <netif_do_set_netmask+0x28>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e000      	b.n	800c3e6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b085      	sub	sp, #20
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	330c      	adds	r3, #12
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d00a      	beq.n	800c422 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <netif_do_set_gw+0x26>
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	e000      	b.n	800c41a <netif_do_set_gw+0x28>
 800c418:	2300      	movs	r3, #0
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c44c:	4b1c      	ldr	r3, [pc, #112]	@ (800c4c0 <netif_set_addr+0x90>)
 800c44e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c456:	4b1a      	ldr	r3, [pc, #104]	@ (800c4c0 <netif_set_addr+0x90>)
 800c458:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c460:	4b17      	ldr	r3, [pc, #92]	@ (800c4c0 <netif_set_addr+0x90>)
 800c462:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <netif_set_addr+0x42>
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <netif_set_addr+0x46>
 800c472:	2301      	movs	r3, #1
 800c474:	e000      	b.n	800c478 <netif_set_addr+0x48>
 800c476:	2300      	movs	r3, #0
 800c478:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d006      	beq.n	800c48e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c480:	f107 0310 	add.w	r3, r7, #16
 800c484:	461a      	mov	r2, r3
 800c486:	68b9      	ldr	r1, [r7, #8]
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7ff ff49 	bl	800c320 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c48e:	69fa      	ldr	r2, [r7, #28]
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7ff ff8e 	bl	800c3b4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c498:	69ba      	ldr	r2, [r7, #24]
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff ffa8 	bl	800c3f2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d106      	bne.n	800c4b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4a8:	f107 0310 	add.w	r3, r7, #16
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	68b9      	ldr	r1, [r7, #8]
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f7ff ff35 	bl	800c320 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c4b6:	bf00      	nop
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	0801ae94 	.word	0x0801ae94

0800c4c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c4cc:	4a04      	ldr	r2, [pc, #16]	@ (800c4e0 <netif_set_default+0x1c>)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c4d2:	bf00      	nop
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	2000c59c 	.word	0x2000c59c

0800c4e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d107      	bne.n	800c502 <netif_set_up+0x1e>
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c530 <netif_set_up+0x4c>)
 800c4f4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c4f8:	490e      	ldr	r1, [pc, #56]	@ (800c534 <netif_set_up+0x50>)
 800c4fa:	480f      	ldr	r0, [pc, #60]	@ (800c538 <netif_set_up+0x54>)
 800c4fc:	f7f4 fde8 	bl	80010d0 <printf>
 800c500:	e013      	b.n	800c52a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10c      	bne.n	800c52a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c516:	f043 0301 	orr.w	r3, r3, #1
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c522:	2103      	movs	r1, #3
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 f809 	bl	800c53c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	08018718 	.word	0x08018718
 800c534:	080188a0 	.word	0x080188a0
 800c538:	08018768 	.word	0x08018768

0800c53c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d106      	bne.n	800c55c <netif_issue_reports+0x20>
 800c54e:	4b18      	ldr	r3, [pc, #96]	@ (800c5b0 <netif_issue_reports+0x74>)
 800c550:	f240 326d 	movw	r2, #877	@ 0x36d
 800c554:	4917      	ldr	r1, [pc, #92]	@ (800c5b4 <netif_issue_reports+0x78>)
 800c556:	4818      	ldr	r0, [pc, #96]	@ (800c5b8 <netif_issue_reports+0x7c>)
 800c558:	f7f4 fdba 	bl	80010d0 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c562:	f003 0304 	and.w	r3, r3, #4
 800c566:	2b00      	cmp	r3, #0
 800c568:	d01e      	beq.n	800c5a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c570:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c574:	2b00      	cmp	r3, #0
 800c576:	d017      	beq.n	800c5a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c578:	78fb      	ldrb	r3, [r7, #3]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d013      	beq.n	800c5aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	3304      	adds	r3, #4
 800c586:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00e      	beq.n	800c5aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c592:	f003 0308 	and.w	r3, r3, #8
 800c596:	2b00      	cmp	r3, #0
 800c598:	d007      	beq.n	800c5aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3304      	adds	r3, #4
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f008 fb43 	bl	8014c2c <etharp_request>
 800c5a6:	e000      	b.n	800c5aa <netif_issue_reports+0x6e>
    return;
 800c5a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	08018718 	.word	0x08018718
 800c5b4:	080188bc 	.word	0x080188bc
 800c5b8:	08018768 	.word	0x08018768

0800c5bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d107      	bne.n	800c5da <netif_set_down+0x1e>
 800c5ca:	4b12      	ldr	r3, [pc, #72]	@ (800c614 <netif_set_down+0x58>)
 800c5cc:	f240 329b 	movw	r2, #923	@ 0x39b
 800c5d0:	4911      	ldr	r1, [pc, #68]	@ (800c618 <netif_set_down+0x5c>)
 800c5d2:	4812      	ldr	r0, [pc, #72]	@ (800c61c <netif_set_down+0x60>)
 800c5d4:	f7f4 fd7c 	bl	80010d0 <printf>
 800c5d8:	e019      	b.n	800c60e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d012      	beq.n	800c60e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c5ee:	f023 0301 	bic.w	r3, r3, #1
 800c5f2:	b2da      	uxtb	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c600:	f003 0308 	and.w	r3, r3, #8
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f007 fecd 	bl	80143a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	08018718 	.word	0x08018718
 800c618:	080188e0 	.word	0x080188e0
 800c61c:	08018768 	.word	0x08018768

0800c620 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d107      	bne.n	800c63e <netif_set_link_up+0x1e>
 800c62e:	4b13      	ldr	r3, [pc, #76]	@ (800c67c <netif_set_link_up+0x5c>)
 800c630:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c634:	4912      	ldr	r1, [pc, #72]	@ (800c680 <netif_set_link_up+0x60>)
 800c636:	4813      	ldr	r0, [pc, #76]	@ (800c684 <netif_set_link_up+0x64>)
 800c638:	f7f4 fd4a 	bl	80010d0 <printf>
 800c63c:	e01b      	b.n	800c676 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c644:	f003 0304 	and.w	r3, r3, #4
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d114      	bne.n	800c676 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c652:	f043 0304 	orr.w	r3, r3, #4
 800c656:	b2da      	uxtb	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c65e:	2103      	movs	r1, #3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff ff6b 	bl	800c53c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	69db      	ldr	r3, [r3, #28]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <netif_set_link_up+0x56>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	08018718 	.word	0x08018718
 800c680:	08018900 	.word	0x08018900
 800c684:	08018768 	.word	0x08018768

0800c688 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d107      	bne.n	800c6a6 <netif_set_link_down+0x1e>
 800c696:	4b11      	ldr	r3, [pc, #68]	@ (800c6dc <netif_set_link_down+0x54>)
 800c698:	f240 4206 	movw	r2, #1030	@ 0x406
 800c69c:	4910      	ldr	r1, [pc, #64]	@ (800c6e0 <netif_set_link_down+0x58>)
 800c69e:	4811      	ldr	r0, [pc, #68]	@ (800c6e4 <netif_set_link_down+0x5c>)
 800c6a0:	f7f4 fd16 	bl	80010d0 <printf>
 800c6a4:	e017      	b.n	800c6d6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6ac:	f003 0304 	and.w	r3, r3, #4
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d010      	beq.n	800c6d6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6ba:	f023 0304 	bic.w	r3, r3, #4
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <netif_set_link_down+0x4e>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	08018718 	.word	0x08018718
 800c6e0:	08018924 	.word	0x08018924
 800c6e4:	08018768 	.word	0x08018768

0800c6e8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	61da      	str	r2, [r3, #28]
  }
}
 800c6fe:	bf00      	nop
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b085      	sub	sp, #20
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c716:	f06f 030b 	mvn.w	r3, #11
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
	...

0800c728 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d013      	beq.n	800c760 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c738:	4b0d      	ldr	r3, [pc, #52]	@ (800c770 <netif_get_by_index+0x48>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	e00c      	b.n	800c75a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c746:	3301      	adds	r3, #1
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	79fa      	ldrb	r2, [r7, #7]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d101      	bne.n	800c754 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	e006      	b.n	800c762 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60fb      	str	r3, [r7, #12]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1ef      	bne.n	800c740 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	2000c598 	.word	0x2000c598

0800c774 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c77a:	f009 ffa7 	bl	80166cc <sys_arch_protect>
 800c77e:	6038      	str	r0, [r7, #0]
 800c780:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b8 <pbuf_free_ooseq+0x44>)
 800c782:	2200      	movs	r2, #0
 800c784:	701a      	strb	r2, [r3, #0]
 800c786:	6838      	ldr	r0, [r7, #0]
 800c788:	f009 ffae 	bl	80166e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c78c:	4b0b      	ldr	r3, [pc, #44]	@ (800c7bc <pbuf_free_ooseq+0x48>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	607b      	str	r3, [r7, #4]
 800c792:	e00a      	b.n	800c7aa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f002 fbfb 	bl	800ef98 <tcp_free_ooseq>
      return;
 800c7a2:	e005      	b.n	800c7b0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	607b      	str	r3, [r7, #4]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1f1      	bne.n	800c794 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	2000c5a1 	.word	0x2000c5a1
 800c7bc:	2000c5b0 	.word	0x2000c5b0

0800c7c0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c7c8:	f7ff ffd4 	bl	800c774 <pbuf_free_ooseq>
}
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c7da:	f009 ff77 	bl	80166cc <sys_arch_protect>
 800c7de:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c820 <pbuf_pool_is_empty+0x4c>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c7e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c820 <pbuf_pool_is_empty+0x4c>)
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f009 ff7b 	bl	80166e8 <sys_arch_unprotect>

  if (!queued) {
 800c7f2:	78fb      	ldrb	r3, [r7, #3]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d10f      	bne.n	800c818 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	480a      	ldr	r0, [pc, #40]	@ (800c824 <pbuf_pool_is_empty+0x50>)
 800c7fc:	f7fe fe90 	bl	800b520 <tcpip_try_callback>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d008      	beq.n	800c818 <pbuf_pool_is_empty+0x44>
 800c806:	f009 ff61 	bl	80166cc <sys_arch_protect>
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	4b04      	ldr	r3, [pc, #16]	@ (800c820 <pbuf_pool_is_empty+0x4c>)
 800c80e:	2200      	movs	r2, #0
 800c810:	701a      	strb	r2, [r3, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f009 ff68 	bl	80166e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	2000c5a1 	.word	0x2000c5a1
 800c824:	0800c7c1 	.word	0x0800c7c1

0800c828 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	4611      	mov	r1, r2
 800c834:	461a      	mov	r2, r3
 800c836:	460b      	mov	r3, r1
 800c838:	80fb      	strh	r3, [r7, #6]
 800c83a:	4613      	mov	r3, r2
 800c83c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	88fa      	ldrh	r2, [r7, #6]
 800c84e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	88ba      	ldrh	r2, [r7, #4]
 800c854:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c856:	8b3b      	ldrh	r3, [r7, #24]
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	7f3a      	ldrb	r2, [r7, #28]
 800c862:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2201      	movs	r2, #1
 800c868:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	73da      	strb	r2, [r3, #15]
}
 800c870:	bf00      	nop
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08c      	sub	sp, #48	@ 0x30
 800c880:	af02      	add	r7, sp, #8
 800c882:	4603      	mov	r3, r0
 800c884:	71fb      	strb	r3, [r7, #7]
 800c886:	460b      	mov	r3, r1
 800c888:	80bb      	strh	r3, [r7, #4]
 800c88a:	4613      	mov	r3, r2
 800c88c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c892:	887b      	ldrh	r3, [r7, #2]
 800c894:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c898:	d07f      	beq.n	800c99a <pbuf_alloc+0x11e>
 800c89a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c89e:	f300 80c8 	bgt.w	800ca32 <pbuf_alloc+0x1b6>
 800c8a2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c8a6:	d010      	beq.n	800c8ca <pbuf_alloc+0x4e>
 800c8a8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c8ac:	f300 80c1 	bgt.w	800ca32 <pbuf_alloc+0x1b6>
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d002      	beq.n	800c8ba <pbuf_alloc+0x3e>
 800c8b4:	2b41      	cmp	r3, #65	@ 0x41
 800c8b6:	f040 80bc 	bne.w	800ca32 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c8ba:	887a      	ldrh	r2, [r7, #2]
 800c8bc:	88bb      	ldrh	r3, [r7, #4]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	f000 f8d1 	bl	800ca68 <pbuf_alloc_reference>
 800c8c6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c8c8:	e0bd      	b.n	800ca46 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c8d2:	88bb      	ldrh	r3, [r7, #4]
 800c8d4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c8d6:	200c      	movs	r0, #12
 800c8d8:	f7ff fb9a 	bl	800c010 <memp_malloc>
 800c8dc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d109      	bne.n	800c8f8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c8e4:	f7ff ff76 	bl	800c7d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d002      	beq.n	800c8f4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c8ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c8f0:	f000 faa8 	bl	800ce44 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e0a7      	b.n	800ca48 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c8f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8fa:	3303      	adds	r3, #3
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	f023 0303 	bic.w	r3, r3, #3
 800c902:	b29b      	uxth	r3, r3
 800c904:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c908:	b29b      	uxth	r3, r3
 800c90a:	8b7a      	ldrh	r2, [r7, #26]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	bf28      	it	cs
 800c910:	4613      	movcs	r3, r2
 800c912:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c914:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c916:	3310      	adds	r3, #16
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	4413      	add	r3, r2
 800c91c:	3303      	adds	r3, #3
 800c91e:	f023 0303 	bic.w	r3, r3, #3
 800c922:	4618      	mov	r0, r3
 800c924:	89f9      	ldrh	r1, [r7, #14]
 800c926:	8b7a      	ldrh	r2, [r7, #26]
 800c928:	2300      	movs	r3, #0
 800c92a:	9301      	str	r3, [sp, #4]
 800c92c:	887b      	ldrh	r3, [r7, #2]
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	460b      	mov	r3, r1
 800c932:	4601      	mov	r1, r0
 800c934:	6938      	ldr	r0, [r7, #16]
 800c936:	f7ff ff77 	bl	800c828 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	f003 0303 	and.w	r3, r3, #3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d006      	beq.n	800c954 <pbuf_alloc+0xd8>
 800c946:	4b42      	ldr	r3, [pc, #264]	@ (800ca50 <pbuf_alloc+0x1d4>)
 800c948:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c94c:	4941      	ldr	r1, [pc, #260]	@ (800ca54 <pbuf_alloc+0x1d8>)
 800c94e:	4842      	ldr	r0, [pc, #264]	@ (800ca58 <pbuf_alloc+0x1dc>)
 800c950:	f7f4 fbbe 	bl	80010d0 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c954:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c956:	3303      	adds	r3, #3
 800c958:	f023 0303 	bic.w	r3, r3, #3
 800c95c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c960:	d106      	bne.n	800c970 <pbuf_alloc+0xf4>
 800c962:	4b3b      	ldr	r3, [pc, #236]	@ (800ca50 <pbuf_alloc+0x1d4>)
 800c964:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c968:	493c      	ldr	r1, [pc, #240]	@ (800ca5c <pbuf_alloc+0x1e0>)
 800c96a:	483b      	ldr	r0, [pc, #236]	@ (800ca58 <pbuf_alloc+0x1dc>)
 800c96c:	f7f4 fbb0 	bl	80010d0 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c972:	2b00      	cmp	r3, #0
 800c974:	d102      	bne.n	800c97c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	627b      	str	r3, [r7, #36]	@ 0x24
 800c97a:	e002      	b.n	800c982 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	693a      	ldr	r2, [r7, #16]
 800c980:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c986:	8b7a      	ldrh	r2, [r7, #26]
 800c988:	89fb      	ldrh	r3, [r7, #14]
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c992:	8b7b      	ldrh	r3, [r7, #26]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d19e      	bne.n	800c8d6 <pbuf_alloc+0x5a>
      break;
 800c998:	e055      	b.n	800ca46 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c99a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c99c:	3303      	adds	r3, #3
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	f023 0303 	bic.w	r3, r3, #3
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	88bb      	ldrh	r3, [r7, #4]
 800c9a8:	3303      	adds	r3, #3
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	f023 0303 	bic.w	r3, r3, #3
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	4413      	add	r3, r2
 800c9b4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c9b6:	8b3b      	ldrh	r3, [r7, #24]
 800c9b8:	3310      	adds	r3, #16
 800c9ba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9bc:	8b3a      	ldrh	r2, [r7, #24]
 800c9be:	88bb      	ldrh	r3, [r7, #4]
 800c9c0:	3303      	adds	r3, #3
 800c9c2:	f023 0303 	bic.w	r3, r3, #3
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d306      	bcc.n	800c9d8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c9ca:	8afa      	ldrh	r2, [r7, #22]
 800c9cc:	88bb      	ldrh	r3, [r7, #4]
 800c9ce:	3303      	adds	r3, #3
 800c9d0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d201      	bcs.n	800c9dc <pbuf_alloc+0x160>
        return NULL;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	e035      	b.n	800ca48 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c9dc:	8afb      	ldrh	r3, [r7, #22]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff f972 	bl	800bcc8 <mem_malloc>
 800c9e4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <pbuf_alloc+0x174>
        return NULL;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e02b      	b.n	800ca48 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c9f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9f2:	3310      	adds	r3, #16
 800c9f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3303      	adds	r3, #3
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	4618      	mov	r0, r3
 800ca00:	88b9      	ldrh	r1, [r7, #4]
 800ca02:	88ba      	ldrh	r2, [r7, #4]
 800ca04:	2300      	movs	r3, #0
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	887b      	ldrh	r3, [r7, #2]
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4601      	mov	r1, r0
 800ca10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca12:	f7ff ff09 	bl	800c828 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	f003 0303 	and.w	r3, r3, #3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d010      	beq.n	800ca44 <pbuf_alloc+0x1c8>
 800ca22:	4b0b      	ldr	r3, [pc, #44]	@ (800ca50 <pbuf_alloc+0x1d4>)
 800ca24:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ca28:	490d      	ldr	r1, [pc, #52]	@ (800ca60 <pbuf_alloc+0x1e4>)
 800ca2a:	480b      	ldr	r0, [pc, #44]	@ (800ca58 <pbuf_alloc+0x1dc>)
 800ca2c:	f7f4 fb50 	bl	80010d0 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ca30:	e008      	b.n	800ca44 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ca32:	4b07      	ldr	r3, [pc, #28]	@ (800ca50 <pbuf_alloc+0x1d4>)
 800ca34:	f240 1227 	movw	r2, #295	@ 0x127
 800ca38:	490a      	ldr	r1, [pc, #40]	@ (800ca64 <pbuf_alloc+0x1e8>)
 800ca3a:	4807      	ldr	r0, [pc, #28]	@ (800ca58 <pbuf_alloc+0x1dc>)
 800ca3c:	f7f4 fb48 	bl	80010d0 <printf>
      return NULL;
 800ca40:	2300      	movs	r3, #0
 800ca42:	e001      	b.n	800ca48 <pbuf_alloc+0x1cc>
      break;
 800ca44:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3728      	adds	r7, #40	@ 0x28
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	08018948 	.word	0x08018948
 800ca54:	08018978 	.word	0x08018978
 800ca58:	080189a8 	.word	0x080189a8
 800ca5c:	080189d0 	.word	0x080189d0
 800ca60:	08018a04 	.word	0x08018a04
 800ca64:	08018a30 	.word	0x08018a30

0800ca68 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af02      	add	r7, sp, #8
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	807b      	strh	r3, [r7, #2]
 800ca74:	4613      	mov	r3, r2
 800ca76:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ca78:	883b      	ldrh	r3, [r7, #0]
 800ca7a:	2b41      	cmp	r3, #65	@ 0x41
 800ca7c:	d009      	beq.n	800ca92 <pbuf_alloc_reference+0x2a>
 800ca7e:	883b      	ldrh	r3, [r7, #0]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d006      	beq.n	800ca92 <pbuf_alloc_reference+0x2a>
 800ca84:	4b0f      	ldr	r3, [pc, #60]	@ (800cac4 <pbuf_alloc_reference+0x5c>)
 800ca86:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ca8a:	490f      	ldr	r1, [pc, #60]	@ (800cac8 <pbuf_alloc_reference+0x60>)
 800ca8c:	480f      	ldr	r0, [pc, #60]	@ (800cacc <pbuf_alloc_reference+0x64>)
 800ca8e:	f7f4 fb1f 	bl	80010d0 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ca92:	200b      	movs	r0, #11
 800ca94:	f7ff fabc 	bl	800c010 <memp_malloc>
 800ca98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	e00b      	b.n	800cabc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800caa4:	8879      	ldrh	r1, [r7, #2]
 800caa6:	887a      	ldrh	r2, [r7, #2]
 800caa8:	2300      	movs	r3, #0
 800caaa:	9301      	str	r3, [sp, #4]
 800caac:	883b      	ldrh	r3, [r7, #0]
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	460b      	mov	r3, r1
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f7ff feb7 	bl	800c828 <pbuf_init_alloced_pbuf>
  return p;
 800caba:	68fb      	ldr	r3, [r7, #12]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	08018948 	.word	0x08018948
 800cac8:	08018a4c 	.word	0x08018a4c
 800cacc:	080189a8 	.word	0x080189a8

0800cad0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af02      	add	r7, sp, #8
 800cad6:	607b      	str	r3, [r7, #4]
 800cad8:	4603      	mov	r3, r0
 800cada:	73fb      	strb	r3, [r7, #15]
 800cadc:	460b      	mov	r3, r1
 800cade:	81bb      	strh	r3, [r7, #12]
 800cae0:	4613      	mov	r3, r2
 800cae2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cae8:	8a7b      	ldrh	r3, [r7, #18]
 800caea:	3303      	adds	r3, #3
 800caec:	f023 0203 	bic.w	r2, r3, #3
 800caf0:	89bb      	ldrh	r3, [r7, #12]
 800caf2:	441a      	add	r2, r3
 800caf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d901      	bls.n	800cafe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e018      	b.n	800cb30 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cafe:	6a3b      	ldr	r3, [r7, #32]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d007      	beq.n	800cb14 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cb04:	8a7b      	ldrh	r3, [r7, #18]
 800cb06:	3303      	adds	r3, #3
 800cb08:	f023 0303 	bic.w	r3, r3, #3
 800cb0c:	6a3a      	ldr	r2, [r7, #32]
 800cb0e:	4413      	add	r3, r2
 800cb10:	617b      	str	r3, [r7, #20]
 800cb12:	e001      	b.n	800cb18 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	89b9      	ldrh	r1, [r7, #12]
 800cb1c:	89ba      	ldrh	r2, [r7, #12]
 800cb1e:	2302      	movs	r3, #2
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	897b      	ldrh	r3, [r7, #10]
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	460b      	mov	r3, r1
 800cb28:	6979      	ldr	r1, [r7, #20]
 800cb2a:	f7ff fe7d 	bl	800c828 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cb2e:	687b      	ldr	r3, [r7, #4]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <pbuf_realloc+0x20>
 800cb4a:	4b3a      	ldr	r3, [pc, #232]	@ (800cc34 <pbuf_realloc+0xfc>)
 800cb4c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cb50:	4939      	ldr	r1, [pc, #228]	@ (800cc38 <pbuf_realloc+0x100>)
 800cb52:	483a      	ldr	r0, [pc, #232]	@ (800cc3c <pbuf_realloc+0x104>)
 800cb54:	f7f4 fabc 	bl	80010d0 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	891b      	ldrh	r3, [r3, #8]
 800cb5c:	887a      	ldrh	r2, [r7, #2]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d263      	bcs.n	800cc2a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	891a      	ldrh	r2, [r3, #8]
 800cb66:	887b      	ldrh	r3, [r7, #2]
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cb6c:	887b      	ldrh	r3, [r7, #2]
 800cb6e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cb74:	e018      	b.n	800cba8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	895b      	ldrh	r3, [r3, #10]
 800cb7a:	897a      	ldrh	r2, [r7, #10]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	891a      	ldrh	r2, [r3, #8]
 800cb84:	893b      	ldrh	r3, [r7, #8]
 800cb86:	1ad3      	subs	r3, r2, r3
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d106      	bne.n	800cba8 <pbuf_realloc+0x70>
 800cb9a:	4b26      	ldr	r3, [pc, #152]	@ (800cc34 <pbuf_realloc+0xfc>)
 800cb9c:	f240 12af 	movw	r2, #431	@ 0x1af
 800cba0:	4927      	ldr	r1, [pc, #156]	@ (800cc40 <pbuf_realloc+0x108>)
 800cba2:	4826      	ldr	r0, [pc, #152]	@ (800cc3c <pbuf_realloc+0x104>)
 800cba4:	f7f4 fa94 	bl	80010d0 <printf>
  while (rem_len > q->len) {
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	895b      	ldrh	r3, [r3, #10]
 800cbac:	897a      	ldrh	r2, [r7, #10]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d8e1      	bhi.n	800cb76 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	7b1b      	ldrb	r3, [r3, #12]
 800cbb6:	f003 030f 	and.w	r3, r3, #15
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d121      	bne.n	800cc02 <pbuf_realloc+0xca>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	895b      	ldrh	r3, [r3, #10]
 800cbc2:	897a      	ldrh	r2, [r7, #10]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d01c      	beq.n	800cc02 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	7b5b      	ldrb	r3, [r3, #13]
 800cbcc:	f003 0302 	and.w	r3, r3, #2
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d116      	bne.n	800cc02 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	897b      	ldrh	r3, [r7, #10]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f7fe ff64 	bl	800bab4 <mem_trim>
 800cbec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d106      	bne.n	800cc02 <pbuf_realloc+0xca>
 800cbf4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc34 <pbuf_realloc+0xfc>)
 800cbf6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cbfa:	4912      	ldr	r1, [pc, #72]	@ (800cc44 <pbuf_realloc+0x10c>)
 800cbfc:	480f      	ldr	r0, [pc, #60]	@ (800cc3c <pbuf_realloc+0x104>)
 800cbfe:	f7f4 fa67 	bl	80010d0 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	897a      	ldrh	r2, [r7, #10]
 800cc06:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	895a      	ldrh	r2, [r3, #10]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d004      	beq.n	800cc22 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 f911 	bl	800ce44 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2200      	movs	r2, #0
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	e000      	b.n	800cc2c <pbuf_realloc+0xf4>
    return;
 800cc2a:	bf00      	nop

}
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	08018948 	.word	0x08018948
 800cc38:	08018a60 	.word	0x08018a60
 800cc3c:	080189a8 	.word	0x080189a8
 800cc40:	08018a78 	.word	0x08018a78
 800cc44:	08018a90 	.word	0x08018a90

0800cc48 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	4613      	mov	r3, r2
 800cc54:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d106      	bne.n	800cc6a <pbuf_add_header_impl+0x22>
 800cc5c:	4b2b      	ldr	r3, [pc, #172]	@ (800cd0c <pbuf_add_header_impl+0xc4>)
 800cc5e:	f240 12df 	movw	r2, #479	@ 0x1df
 800cc62:	492b      	ldr	r1, [pc, #172]	@ (800cd10 <pbuf_add_header_impl+0xc8>)
 800cc64:	482b      	ldr	r0, [pc, #172]	@ (800cd14 <pbuf_add_header_impl+0xcc>)
 800cc66:	f7f4 fa33 	bl	80010d0 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d003      	beq.n	800cc78 <pbuf_add_header_impl+0x30>
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc76:	d301      	bcc.n	800cc7c <pbuf_add_header_impl+0x34>
    return 1;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e043      	b.n	800cd04 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <pbuf_add_header_impl+0x3e>
    return 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e03e      	b.n	800cd04 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	891a      	ldrh	r2, [r3, #8]
 800cc8e:	8a7b      	ldrh	r3, [r7, #18]
 800cc90:	4413      	add	r3, r2
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	8a7a      	ldrh	r2, [r7, #18]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d901      	bls.n	800cc9e <pbuf_add_header_impl+0x56>
    return 1;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e032      	b.n	800cd04 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	7b1b      	ldrb	r3, [r3, #12]
 800cca2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cca4:	8a3b      	ldrh	r3, [r7, #16]
 800cca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00c      	beq.n	800ccc8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	4413      	add	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3310      	adds	r3, #16
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d20d      	bcs.n	800cce0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e01d      	b.n	800cd04 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d006      	beq.n	800ccdc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	425b      	negs	r3, r3
 800ccd6:	4413      	add	r3, r2
 800ccd8:	617b      	str	r3, [r7, #20]
 800ccda:	e001      	b.n	800cce0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e011      	b.n	800cd04 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	895a      	ldrh	r2, [r3, #10]
 800ccea:	8a7b      	ldrh	r3, [r7, #18]
 800ccec:	4413      	add	r3, r2
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	891a      	ldrh	r2, [r3, #8]
 800ccf8:	8a7b      	ldrh	r3, [r7, #18]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	811a      	strh	r2, [r3, #8]


  return 0;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	08018948 	.word	0x08018948
 800cd10:	08018aac 	.word	0x08018aac
 800cd14:	080189a8 	.word	0x080189a8

0800cd18 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cd22:	2200      	movs	r2, #0
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f7ff ff8e 	bl	800cc48 <pbuf_add_header_impl>
 800cd2c:	4603      	mov	r3, r0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d106      	bne.n	800cd56 <pbuf_remove_header+0x1e>
 800cd48:	4b20      	ldr	r3, [pc, #128]	@ (800cdcc <pbuf_remove_header+0x94>)
 800cd4a:	f240 224b 	movw	r2, #587	@ 0x24b
 800cd4e:	4920      	ldr	r1, [pc, #128]	@ (800cdd0 <pbuf_remove_header+0x98>)
 800cd50:	4820      	ldr	r0, [pc, #128]	@ (800cdd4 <pbuf_remove_header+0x9c>)
 800cd52:	f7f4 f9bd 	bl	80010d0 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <pbuf_remove_header+0x2c>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd62:	d301      	bcc.n	800cd68 <pbuf_remove_header+0x30>
    return 1;
 800cd64:	2301      	movs	r3, #1
 800cd66:	e02c      	b.n	800cdc2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <pbuf_remove_header+0x3a>
    return 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e027      	b.n	800cdc2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	895b      	ldrh	r3, [r3, #10]
 800cd7a:	89fa      	ldrh	r2, [r7, #14]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d908      	bls.n	800cd92 <pbuf_remove_header+0x5a>
 800cd80:	4b12      	ldr	r3, [pc, #72]	@ (800cdcc <pbuf_remove_header+0x94>)
 800cd82:	f240 2255 	movw	r2, #597	@ 0x255
 800cd86:	4914      	ldr	r1, [pc, #80]	@ (800cdd8 <pbuf_remove_header+0xa0>)
 800cd88:	4812      	ldr	r0, [pc, #72]	@ (800cdd4 <pbuf_remove_header+0x9c>)
 800cd8a:	f7f4 f9a1 	bl	80010d0 <printf>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e017      	b.n	800cdc2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	441a      	add	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	895a      	ldrh	r2, [r3, #10]
 800cda8:	89fb      	ldrh	r3, [r7, #14]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	891a      	ldrh	r2, [r3, #8]
 800cdb6:	89fb      	ldrh	r3, [r7, #14]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	08018948 	.word	0x08018948
 800cdd0:	08018aac 	.word	0x08018aac
 800cdd4:	080189a8 	.word	0x080189a8
 800cdd8:	08018ab8 	.word	0x08018ab8

0800cddc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	460b      	mov	r3, r1
 800cde6:	807b      	strh	r3, [r7, #2]
 800cde8:	4613      	mov	r3, r2
 800cdea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cdec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	da08      	bge.n	800ce06 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cdf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdf8:	425b      	negs	r3, r3
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff ff9b 	bl	800cd38 <pbuf_remove_header>
 800ce02:	4603      	mov	r3, r0
 800ce04:	e007      	b.n	800ce16 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ce06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce0a:	787a      	ldrb	r2, [r7, #1]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7ff ff1a 	bl	800cc48 <pbuf_add_header_impl>
 800ce14:	4603      	mov	r3, r0
  }
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	460b      	mov	r3, r1
 800ce28:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ce2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff ffd2 	bl	800cddc <pbuf_header_impl>
 800ce38:	4603      	mov	r3, r0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
	...

0800ce44 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b088      	sub	sp, #32
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10b      	bne.n	800ce6a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <pbuf_free+0x22>
 800ce58:	4b3b      	ldr	r3, [pc, #236]	@ (800cf48 <pbuf_free+0x104>)
 800ce5a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ce5e:	493b      	ldr	r1, [pc, #236]	@ (800cf4c <pbuf_free+0x108>)
 800ce60:	483b      	ldr	r0, [pc, #236]	@ (800cf50 <pbuf_free+0x10c>)
 800ce62:	f7f4 f935 	bl	80010d0 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	e069      	b.n	800cf3e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ce6e:	e062      	b.n	800cf36 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ce70:	f009 fc2c 	bl	80166cc <sys_arch_protect>
 800ce74:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	7b9b      	ldrb	r3, [r3, #14]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <pbuf_free+0x48>
 800ce7e:	4b32      	ldr	r3, [pc, #200]	@ (800cf48 <pbuf_free+0x104>)
 800ce80:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ce84:	4933      	ldr	r1, [pc, #204]	@ (800cf54 <pbuf_free+0x110>)
 800ce86:	4832      	ldr	r0, [pc, #200]	@ (800cf50 <pbuf_free+0x10c>)
 800ce88:	f7f4 f922 	bl	80010d0 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	7b9b      	ldrb	r3, [r3, #14]
 800ce90:	3b01      	subs	r3, #1
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	739a      	strb	r2, [r3, #14]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	7b9b      	ldrb	r3, [r3, #14]
 800ce9c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ce9e:	69b8      	ldr	r0, [r7, #24]
 800cea0:	f009 fc22 	bl	80166e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d143      	bne.n	800cf32 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7b1b      	ldrb	r3, [r3, #12]
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7b5b      	ldrb	r3, [r3, #13]
 800cebe:	f003 0302 	and.w	r3, r3, #2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d011      	beq.n	800ceea <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <pbuf_free+0x9c>
 800ced2:	4b1d      	ldr	r3, [pc, #116]	@ (800cf48 <pbuf_free+0x104>)
 800ced4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ced8:	491f      	ldr	r1, [pc, #124]	@ (800cf58 <pbuf_free+0x114>)
 800ceda:	481d      	ldr	r0, [pc, #116]	@ (800cf50 <pbuf_free+0x10c>)
 800cedc:	f7f4 f8f8 	bl	80010d0 <printf>
        pc->custom_free_function(p);
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	4798      	blx	r3
 800cee8:	e01d      	b.n	800cf26 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d104      	bne.n	800cefa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cef0:	6879      	ldr	r1, [r7, #4]
 800cef2:	200c      	movs	r0, #12
 800cef4:	f7ff f902 	bl	800c0fc <memp_free>
 800cef8:	e015      	b.n	800cf26 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d104      	bne.n	800cf0a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	200b      	movs	r0, #11
 800cf04:	f7ff f8fa 	bl	800c0fc <memp_free>
 800cf08:	e00d      	b.n	800cf26 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <pbuf_free+0xd4>
          mem_free(p);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7fe fd3f 	bl	800b994 <mem_free>
 800cf16:	e006      	b.n	800cf26 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cf18:	4b0b      	ldr	r3, [pc, #44]	@ (800cf48 <pbuf_free+0x104>)
 800cf1a:	f240 320f 	movw	r2, #783	@ 0x30f
 800cf1e:	490f      	ldr	r1, [pc, #60]	@ (800cf5c <pbuf_free+0x118>)
 800cf20:	480b      	ldr	r0, [pc, #44]	@ (800cf50 <pbuf_free+0x10c>)
 800cf22:	f7f4 f8d5 	bl	80010d0 <printf>
        }
      }
      count++;
 800cf26:	7ffb      	ldrb	r3, [r7, #31]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	607b      	str	r3, [r7, #4]
 800cf30:	e001      	b.n	800cf36 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d199      	bne.n	800ce70 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cf3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3720      	adds	r7, #32
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	08018948 	.word	0x08018948
 800cf4c:	08018aac 	.word	0x08018aac
 800cf50:	080189a8 	.word	0x080189a8
 800cf54:	08018ad8 	.word	0x08018ad8
 800cf58:	08018af0 	.word	0x08018af0
 800cf5c:	08018b14 	.word	0x08018b14

0800cf60 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf6c:	e005      	b.n	800cf7a <pbuf_clen+0x1a>
    ++len;
 800cf6e:	89fb      	ldrh	r3, [r7, #14]
 800cf70:	3301      	adds	r3, #1
 800cf72:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1f6      	bne.n	800cf6e <pbuf_clen+0xe>
  }
  return len;
 800cf80:	89fb      	ldrh	r3, [r7, #14]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
	...

0800cf90 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d016      	beq.n	800cfcc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cf9e:	f009 fb95 	bl	80166cc <sys_arch_protect>
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7b9b      	ldrb	r3, [r3, #14]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	739a      	strb	r2, [r3, #14]
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f009 fb99 	bl	80166e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	7b9b      	ldrb	r3, [r3, #14]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <pbuf_ref+0x3c>
 800cfbe:	4b05      	ldr	r3, [pc, #20]	@ (800cfd4 <pbuf_ref+0x44>)
 800cfc0:	f240 3242 	movw	r2, #834	@ 0x342
 800cfc4:	4904      	ldr	r1, [pc, #16]	@ (800cfd8 <pbuf_ref+0x48>)
 800cfc6:	4805      	ldr	r0, [pc, #20]	@ (800cfdc <pbuf_ref+0x4c>)
 800cfc8:	f7f4 f882 	bl	80010d0 <printf>
  }
}
 800cfcc:	bf00      	nop
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	08018948 	.word	0x08018948
 800cfd8:	08018b28 	.word	0x08018b28
 800cfdc:	080189a8 	.word	0x080189a8

0800cfe0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <pbuf_cat+0x16>
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d107      	bne.n	800d006 <pbuf_cat+0x26>
 800cff6:	4b20      	ldr	r3, [pc, #128]	@ (800d078 <pbuf_cat+0x98>)
 800cff8:	f240 3259 	movw	r2, #857	@ 0x359
 800cffc:	491f      	ldr	r1, [pc, #124]	@ (800d07c <pbuf_cat+0x9c>)
 800cffe:	4820      	ldr	r0, [pc, #128]	@ (800d080 <pbuf_cat+0xa0>)
 800d000:	f7f4 f866 	bl	80010d0 <printf>
 800d004:	e034      	b.n	800d070 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	60fb      	str	r3, [r7, #12]
 800d00a:	e00a      	b.n	800d022 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	891a      	ldrh	r2, [r3, #8]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	891b      	ldrh	r3, [r3, #8]
 800d014:	4413      	add	r3, r2
 800d016:	b29a      	uxth	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	60fb      	str	r3, [r7, #12]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1f0      	bne.n	800d00c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	891a      	ldrh	r2, [r3, #8]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	895b      	ldrh	r3, [r3, #10]
 800d032:	429a      	cmp	r2, r3
 800d034:	d006      	beq.n	800d044 <pbuf_cat+0x64>
 800d036:	4b10      	ldr	r3, [pc, #64]	@ (800d078 <pbuf_cat+0x98>)
 800d038:	f240 3262 	movw	r2, #866	@ 0x362
 800d03c:	4911      	ldr	r1, [pc, #68]	@ (800d084 <pbuf_cat+0xa4>)
 800d03e:	4810      	ldr	r0, [pc, #64]	@ (800d080 <pbuf_cat+0xa0>)
 800d040:	f7f4 f846 	bl	80010d0 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d006      	beq.n	800d05a <pbuf_cat+0x7a>
 800d04c:	4b0a      	ldr	r3, [pc, #40]	@ (800d078 <pbuf_cat+0x98>)
 800d04e:	f240 3263 	movw	r2, #867	@ 0x363
 800d052:	490d      	ldr	r1, [pc, #52]	@ (800d088 <pbuf_cat+0xa8>)
 800d054:	480a      	ldr	r0, [pc, #40]	@ (800d080 <pbuf_cat+0xa0>)
 800d056:	f7f4 f83b 	bl	80010d0 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	891a      	ldrh	r2, [r3, #8]
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	891b      	ldrh	r3, [r3, #8]
 800d062:	4413      	add	r3, r2
 800d064:	b29a      	uxth	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	08018948 	.word	0x08018948
 800d07c:	08018b3c 	.word	0x08018b3c
 800d080:	080189a8 	.word	0x080189a8
 800d084:	08018b74 	.word	0x08018b74
 800d088:	08018ba4 	.word	0x08018ba4

0800d08c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]
 800d09a:	2300      	movs	r3, #0
 800d09c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d008      	beq.n	800d0b6 <pbuf_copy+0x2a>
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <pbuf_copy+0x2a>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	891a      	ldrh	r2, [r3, #8]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	891b      	ldrh	r3, [r3, #8]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d209      	bcs.n	800d0ca <pbuf_copy+0x3e>
 800d0b6:	4b57      	ldr	r3, [pc, #348]	@ (800d214 <pbuf_copy+0x188>)
 800d0b8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d0bc:	4956      	ldr	r1, [pc, #344]	@ (800d218 <pbuf_copy+0x18c>)
 800d0be:	4857      	ldr	r0, [pc, #348]	@ (800d21c <pbuf_copy+0x190>)
 800d0c0:	f7f4 f806 	bl	80010d0 <printf>
 800d0c4:	f06f 030f 	mvn.w	r3, #15
 800d0c8:	e09f      	b.n	800d20a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	895b      	ldrh	r3, [r3, #10]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	1ad2      	subs	r2, r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	895b      	ldrh	r3, [r3, #10]
 800d0d8:	4619      	mov	r1, r3
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	1acb      	subs	r3, r1, r3
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d306      	bcc.n	800d0f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	895b      	ldrh	r3, [r3, #10]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e005      	b.n	800d0fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	895b      	ldrh	r3, [r3, #10]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	18d0      	adds	r0, r2, r3
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	685a      	ldr	r2, [r3, #4]
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	4413      	add	r3, r2
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4619      	mov	r1, r3
 800d110:	f009 fd19 	bl	8016b46 <memcpy>
    offset_to += len;
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	4413      	add	r3, r2
 800d11a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	4413      	add	r3, r2
 800d122:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	895b      	ldrh	r3, [r3, #10]
 800d128:	461a      	mov	r2, r3
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d906      	bls.n	800d13e <pbuf_copy+0xb2>
 800d130:	4b38      	ldr	r3, [pc, #224]	@ (800d214 <pbuf_copy+0x188>)
 800d132:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d136:	493a      	ldr	r1, [pc, #232]	@ (800d220 <pbuf_copy+0x194>)
 800d138:	4838      	ldr	r0, [pc, #224]	@ (800d21c <pbuf_copy+0x190>)
 800d13a:	f7f3 ffc9 	bl	80010d0 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	895b      	ldrh	r3, [r3, #10]
 800d142:	461a      	mov	r2, r3
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	4293      	cmp	r3, r2
 800d148:	d906      	bls.n	800d158 <pbuf_copy+0xcc>
 800d14a:	4b32      	ldr	r3, [pc, #200]	@ (800d214 <pbuf_copy+0x188>)
 800d14c:	f240 32da 	movw	r2, #986	@ 0x3da
 800d150:	4934      	ldr	r1, [pc, #208]	@ (800d224 <pbuf_copy+0x198>)
 800d152:	4832      	ldr	r0, [pc, #200]	@ (800d21c <pbuf_copy+0x190>)
 800d154:	f7f3 ffbc 	bl	80010d0 <printf>
    if (offset_from >= p_from->len) {
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	895b      	ldrh	r3, [r3, #10]
 800d15c:	461a      	mov	r2, r3
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	4293      	cmp	r3, r2
 800d162:	d304      	bcc.n	800d16e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d164:	2300      	movs	r3, #0
 800d166:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	895b      	ldrh	r3, [r3, #10]
 800d172:	461a      	mov	r2, r3
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	4293      	cmp	r3, r2
 800d178:	d114      	bne.n	800d1a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10c      	bne.n	800d1a4 <pbuf_copy+0x118>
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d009      	beq.n	800d1a4 <pbuf_copy+0x118>
 800d190:	4b20      	ldr	r3, [pc, #128]	@ (800d214 <pbuf_copy+0x188>)
 800d192:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d196:	4924      	ldr	r1, [pc, #144]	@ (800d228 <pbuf_copy+0x19c>)
 800d198:	4820      	ldr	r0, [pc, #128]	@ (800d21c <pbuf_copy+0x190>)
 800d19a:	f7f3 ff99 	bl	80010d0 <printf>
 800d19e:	f06f 030f 	mvn.w	r3, #15
 800d1a2:	e032      	b.n	800d20a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d013      	beq.n	800d1d2 <pbuf_copy+0x146>
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	895a      	ldrh	r2, [r3, #10]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	891b      	ldrh	r3, [r3, #8]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d10d      	bne.n	800d1d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d009      	beq.n	800d1d2 <pbuf_copy+0x146>
 800d1be:	4b15      	ldr	r3, [pc, #84]	@ (800d214 <pbuf_copy+0x188>)
 800d1c0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d1c4:	4919      	ldr	r1, [pc, #100]	@ (800d22c <pbuf_copy+0x1a0>)
 800d1c6:	4815      	ldr	r0, [pc, #84]	@ (800d21c <pbuf_copy+0x190>)
 800d1c8:	f7f3 ff82 	bl	80010d0 <printf>
 800d1cc:	f06f 0305 	mvn.w	r3, #5
 800d1d0:	e01b      	b.n	800d20a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d013      	beq.n	800d200 <pbuf_copy+0x174>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	895a      	ldrh	r2, [r3, #10]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	891b      	ldrh	r3, [r3, #8]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d10d      	bne.n	800d200 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <pbuf_copy+0x174>
 800d1ec:	4b09      	ldr	r3, [pc, #36]	@ (800d214 <pbuf_copy+0x188>)
 800d1ee:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d1f2:	490e      	ldr	r1, [pc, #56]	@ (800d22c <pbuf_copy+0x1a0>)
 800d1f4:	4809      	ldr	r0, [pc, #36]	@ (800d21c <pbuf_copy+0x190>)
 800d1f6:	f7f3 ff6b 	bl	80010d0 <printf>
 800d1fa:	f06f 0305 	mvn.w	r3, #5
 800d1fe:	e004      	b.n	800d20a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	f47f af61 	bne.w	800d0ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3718      	adds	r7, #24
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	08018948 	.word	0x08018948
 800d218:	08018bf0 	.word	0x08018bf0
 800d21c:	080189a8 	.word	0x080189a8
 800d220:	08018c20 	.word	0x08018c20
 800d224:	08018c38 	.word	0x08018c38
 800d228:	08018c54 	.word	0x08018c54
 800d22c:	08018c64 	.word	0x08018c64

0800d230 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	4611      	mov	r1, r2
 800d23c:	461a      	mov	r2, r3
 800d23e:	460b      	mov	r3, r1
 800d240:	80fb      	strh	r3, [r7, #6]
 800d242:	4613      	mov	r3, r2
 800d244:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d108      	bne.n	800d266 <pbuf_copy_partial+0x36>
 800d254:	4b2b      	ldr	r3, [pc, #172]	@ (800d304 <pbuf_copy_partial+0xd4>)
 800d256:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d25a:	492b      	ldr	r1, [pc, #172]	@ (800d308 <pbuf_copy_partial+0xd8>)
 800d25c:	482b      	ldr	r0, [pc, #172]	@ (800d30c <pbuf_copy_partial+0xdc>)
 800d25e:	f7f3 ff37 	bl	80010d0 <printf>
 800d262:	2300      	movs	r3, #0
 800d264:	e04a      	b.n	800d2fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d108      	bne.n	800d27e <pbuf_copy_partial+0x4e>
 800d26c:	4b25      	ldr	r3, [pc, #148]	@ (800d304 <pbuf_copy_partial+0xd4>)
 800d26e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d272:	4927      	ldr	r1, [pc, #156]	@ (800d310 <pbuf_copy_partial+0xe0>)
 800d274:	4825      	ldr	r0, [pc, #148]	@ (800d30c <pbuf_copy_partial+0xdc>)
 800d276:	f7f3 ff2b 	bl	80010d0 <printf>
 800d27a:	2300      	movs	r3, #0
 800d27c:	e03e      	b.n	800d2fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	61fb      	str	r3, [r7, #28]
 800d282:	e034      	b.n	800d2ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d284:	88bb      	ldrh	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00a      	beq.n	800d2a0 <pbuf_copy_partial+0x70>
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	895b      	ldrh	r3, [r3, #10]
 800d28e:	88ba      	ldrh	r2, [r7, #4]
 800d290:	429a      	cmp	r2, r3
 800d292:	d305      	bcc.n	800d2a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	895b      	ldrh	r3, [r3, #10]
 800d298:	88ba      	ldrh	r2, [r7, #4]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	80bb      	strh	r3, [r7, #4]
 800d29e:	e023      	b.n	800d2e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	895a      	ldrh	r2, [r3, #10]
 800d2a4:	88bb      	ldrh	r3, [r7, #4]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d2aa:	8b3a      	ldrh	r2, [r7, #24]
 800d2ac:	88fb      	ldrh	r3, [r7, #6]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d901      	bls.n	800d2b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d2b2:	88fb      	ldrh	r3, [r7, #6]
 800d2b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d2b6:	8b7b      	ldrh	r3, [r7, #26]
 800d2b8:	68ba      	ldr	r2, [r7, #8]
 800d2ba:	18d0      	adds	r0, r2, r3
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	685a      	ldr	r2, [r3, #4]
 800d2c0:	88bb      	ldrh	r3, [r7, #4]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	8b3a      	ldrh	r2, [r7, #24]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	f009 fc3d 	bl	8016b46 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d2cc:	8afa      	ldrh	r2, [r7, #22]
 800d2ce:	8b3b      	ldrh	r3, [r7, #24]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d2d4:	8b7a      	ldrh	r2, [r7, #26]
 800d2d6:	8b3b      	ldrh	r3, [r7, #24]
 800d2d8:	4413      	add	r3, r2
 800d2da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d2dc:	88fa      	ldrh	r2, [r7, #6]
 800d2de:	8b3b      	ldrh	r3, [r7, #24]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	61fb      	str	r3, [r7, #28]
 800d2ee:	88fb      	ldrh	r3, [r7, #6]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <pbuf_copy_partial+0xca>
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1c4      	bne.n	800d284 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d2fa:	8afb      	ldrh	r3, [r7, #22]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3720      	adds	r7, #32
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	08018948 	.word	0x08018948
 800d308:	08018c90 	.word	0x08018c90
 800d30c:	080189a8 	.word	0x080189a8
 800d310:	08018cb0 	.word	0x08018cb0

0800d314 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	603a      	str	r2, [r7, #0]
 800d31e:	71fb      	strb	r3, [r7, #7]
 800d320:	460b      	mov	r3, r1
 800d322:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	8919      	ldrh	r1, [r3, #8]
 800d328:	88ba      	ldrh	r2, [r7, #4]
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff faa5 	bl	800c87c <pbuf_alloc>
 800d332:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <pbuf_clone+0x2a>
    return NULL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	e011      	b.n	800d362 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f7ff fea3 	bl	800d08c <pbuf_copy>
 800d346:	4603      	mov	r3, r0
 800d348:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d34a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d006      	beq.n	800d360 <pbuf_clone+0x4c>
 800d352:	4b06      	ldr	r3, [pc, #24]	@ (800d36c <pbuf_clone+0x58>)
 800d354:	f240 5224 	movw	r2, #1316	@ 0x524
 800d358:	4905      	ldr	r1, [pc, #20]	@ (800d370 <pbuf_clone+0x5c>)
 800d35a:	4806      	ldr	r0, [pc, #24]	@ (800d374 <pbuf_clone+0x60>)
 800d35c:	f7f3 feb8 	bl	80010d0 <printf>
  return q;
 800d360:	68fb      	ldr	r3, [r7, #12]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	08018948 	.word	0x08018948
 800d370:	08018dbc 	.word	0x08018dbc
 800d374:	080189a8 	.word	0x080189a8

0800d378 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d37c:	f009 f9c4 	bl	8016708 <rand>
 800d380:	4603      	mov	r3, r0
 800d382:	b29b      	uxth	r3, r3
 800d384:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d388:	b29b      	uxth	r3, r3
 800d38a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d38e:	b29a      	uxth	r2, r3
 800d390:	4b01      	ldr	r3, [pc, #4]	@ (800d398 <tcp_init+0x20>)
 800d392:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d394:	bf00      	nop
 800d396:	bd80      	pop	{r7, pc}
 800d398:	20000024 	.word	0x20000024

0800d39c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7d1b      	ldrb	r3, [r3, #20]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d105      	bne.n	800d3b8 <tcp_free+0x1c>
 800d3ac:	4b06      	ldr	r3, [pc, #24]	@ (800d3c8 <tcp_free+0x2c>)
 800d3ae:	22d4      	movs	r2, #212	@ 0xd4
 800d3b0:	4906      	ldr	r1, [pc, #24]	@ (800d3cc <tcp_free+0x30>)
 800d3b2:	4807      	ldr	r0, [pc, #28]	@ (800d3d0 <tcp_free+0x34>)
 800d3b4:	f7f3 fe8c 	bl	80010d0 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	f7fe fe9e 	bl	800c0fc <memp_free>
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	08018e48 	.word	0x08018e48
 800d3cc:	08018e78 	.word	0x08018e78
 800d3d0:	08018e8c 	.word	0x08018e8c

0800d3d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	7d1b      	ldrb	r3, [r3, #20]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d105      	bne.n	800d3f0 <tcp_free_listen+0x1c>
 800d3e4:	4b06      	ldr	r3, [pc, #24]	@ (800d400 <tcp_free_listen+0x2c>)
 800d3e6:	22df      	movs	r2, #223	@ 0xdf
 800d3e8:	4906      	ldr	r1, [pc, #24]	@ (800d404 <tcp_free_listen+0x30>)
 800d3ea:	4807      	ldr	r0, [pc, #28]	@ (800d408 <tcp_free_listen+0x34>)
 800d3ec:	f7f3 fe70 	bl	80010d0 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	2002      	movs	r0, #2
 800d3f4:	f7fe fe82 	bl	800c0fc <memp_free>
}
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	08018e48 	.word	0x08018e48
 800d404:	08018eb4 	.word	0x08018eb4
 800d408:	08018e8c 	.word	0x08018e8c

0800d40c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d410:	f001 f85e 	bl	800e4d0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d414:	4b07      	ldr	r3, [pc, #28]	@ (800d434 <tcp_tmr+0x28>)
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	3301      	adds	r3, #1
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	4b05      	ldr	r3, [pc, #20]	@ (800d434 <tcp_tmr+0x28>)
 800d41e:	701a      	strb	r2, [r3, #0]
 800d420:	4b04      	ldr	r3, [pc, #16]	@ (800d434 <tcp_tmr+0x28>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d42c:	f000 fd0e 	bl	800de4c <tcp_slowtmr>
  }
}
 800d430:	bf00      	nop
 800d432:	bd80      	pop	{r7, pc}
 800d434:	2000c5b9 	.word	0x2000c5b9

0800d438 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d105      	bne.n	800d454 <tcp_remove_listener+0x1c>
 800d448:	4b0d      	ldr	r3, [pc, #52]	@ (800d480 <tcp_remove_listener+0x48>)
 800d44a:	22ff      	movs	r2, #255	@ 0xff
 800d44c:	490d      	ldr	r1, [pc, #52]	@ (800d484 <tcp_remove_listener+0x4c>)
 800d44e:	480e      	ldr	r0, [pc, #56]	@ (800d488 <tcp_remove_listener+0x50>)
 800d450:	f7f3 fe3e 	bl	80010d0 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	60fb      	str	r3, [r7, #12]
 800d458:	e00a      	b.n	800d470 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	429a      	cmp	r2, r3
 800d462:	d102      	bne.n	800d46a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1f1      	bne.n	800d45a <tcp_remove_listener+0x22>
    }
  }
}
 800d476:	bf00      	nop
 800d478:	bf00      	nop
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	08018e48 	.word	0x08018e48
 800d484:	08018ed0 	.word	0x08018ed0
 800d488:	08018e8c 	.word	0x08018e8c

0800d48c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <tcp_listen_closed+0x1c>
 800d49a:	4b14      	ldr	r3, [pc, #80]	@ (800d4ec <tcp_listen_closed+0x60>)
 800d49c:	f240 1211 	movw	r2, #273	@ 0x111
 800d4a0:	4913      	ldr	r1, [pc, #76]	@ (800d4f0 <tcp_listen_closed+0x64>)
 800d4a2:	4814      	ldr	r0, [pc, #80]	@ (800d4f4 <tcp_listen_closed+0x68>)
 800d4a4:	f7f3 fe14 	bl	80010d0 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	7d1b      	ldrb	r3, [r3, #20]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d006      	beq.n	800d4be <tcp_listen_closed+0x32>
 800d4b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ec <tcp_listen_closed+0x60>)
 800d4b2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d4b6:	4910      	ldr	r1, [pc, #64]	@ (800d4f8 <tcp_listen_closed+0x6c>)
 800d4b8:	480e      	ldr	r0, [pc, #56]	@ (800d4f4 <tcp_listen_closed+0x68>)
 800d4ba:	f7f3 fe09 	bl	80010d0 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d4be:	2301      	movs	r3, #1
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	e00b      	b.n	800d4dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d4c4:	4a0d      	ldr	r2, [pc, #52]	@ (800d4fc <tcp_listen_closed+0x70>)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff ffb1 	bl	800d438 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	60fb      	str	r3, [r7, #12]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d9f0      	bls.n	800d4c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	3710      	adds	r7, #16
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	08018e48 	.word	0x08018e48
 800d4f0:	08018ef8 	.word	0x08018ef8
 800d4f4:	08018e8c 	.word	0x08018e8c
 800d4f8:	08018f04 	.word	0x08018f04
 800d4fc:	0801ae6c 	.word	0x0801ae6c

0800d500 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d500:	b5b0      	push	{r4, r5, r7, lr}
 800d502:	b088      	sub	sp, #32
 800d504:	af04      	add	r7, sp, #16
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	460b      	mov	r3, r1
 800d50a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <tcp_close_shutdown+0x20>
 800d512:	4b63      	ldr	r3, [pc, #396]	@ (800d6a0 <tcp_close_shutdown+0x1a0>)
 800d514:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d518:	4962      	ldr	r1, [pc, #392]	@ (800d6a4 <tcp_close_shutdown+0x1a4>)
 800d51a:	4863      	ldr	r0, [pc, #396]	@ (800d6a8 <tcp_close_shutdown+0x1a8>)
 800d51c:	f7f3 fdd8 	bl	80010d0 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d066      	beq.n	800d5f4 <tcp_close_shutdown+0xf4>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	7d1b      	ldrb	r3, [r3, #20]
 800d52a:	2b04      	cmp	r3, #4
 800d52c:	d003      	beq.n	800d536 <tcp_close_shutdown+0x36>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	7d1b      	ldrb	r3, [r3, #20]
 800d532:	2b07      	cmp	r3, #7
 800d534:	d15e      	bne.n	800d5f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d104      	bne.n	800d548 <tcp_close_shutdown+0x48>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d542:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d546:	d055      	beq.n	800d5f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	8b5b      	ldrh	r3, [r3, #26]
 800d54c:	f003 0310 	and.w	r3, r3, #16
 800d550:	2b00      	cmp	r3, #0
 800d552:	d106      	bne.n	800d562 <tcp_close_shutdown+0x62>
 800d554:	4b52      	ldr	r3, [pc, #328]	@ (800d6a0 <tcp_close_shutdown+0x1a0>)
 800d556:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d55a:	4954      	ldr	r1, [pc, #336]	@ (800d6ac <tcp_close_shutdown+0x1ac>)
 800d55c:	4852      	ldr	r0, [pc, #328]	@ (800d6a8 <tcp_close_shutdown+0x1a8>)
 800d55e:	f7f3 fdb7 	bl	80010d0 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d56a:	687d      	ldr	r5, [r7, #4]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	3304      	adds	r3, #4
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	8ad2      	ldrh	r2, [r2, #22]
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	8b09      	ldrh	r1, [r1, #24]
 800d578:	9102      	str	r1, [sp, #8]
 800d57a:	9201      	str	r2, [sp, #4]
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	462b      	mov	r3, r5
 800d580:	4622      	mov	r2, r4
 800d582:	4601      	mov	r1, r0
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f005 fd6d 	bl	8013064 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f001 fb50 	bl	800ec30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d590:	4b47      	ldr	r3, [pc, #284]	@ (800d6b0 <tcp_close_shutdown+0x1b0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	429a      	cmp	r2, r3
 800d598:	d105      	bne.n	800d5a6 <tcp_close_shutdown+0xa6>
 800d59a:	4b45      	ldr	r3, [pc, #276]	@ (800d6b0 <tcp_close_shutdown+0x1b0>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	4a43      	ldr	r2, [pc, #268]	@ (800d6b0 <tcp_close_shutdown+0x1b0>)
 800d5a2:	6013      	str	r3, [r2, #0]
 800d5a4:	e013      	b.n	800d5ce <tcp_close_shutdown+0xce>
 800d5a6:	4b42      	ldr	r3, [pc, #264]	@ (800d6b0 <tcp_close_shutdown+0x1b0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	e00c      	b.n	800d5c8 <tcp_close_shutdown+0xc8>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d104      	bne.n	800d5c2 <tcp_close_shutdown+0xc2>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	68da      	ldr	r2, [r3, #12]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	60da      	str	r2, [r3, #12]
 800d5c0:	e005      	b.n	800d5ce <tcp_close_shutdown+0xce>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1ef      	bne.n	800d5ae <tcp_close_shutdown+0xae>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	60da      	str	r2, [r3, #12]
 800d5d4:	4b37      	ldr	r3, [pc, #220]	@ (800d6b4 <tcp_close_shutdown+0x1b4>)
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d5da:	4b37      	ldr	r3, [pc, #220]	@ (800d6b8 <tcp_close_shutdown+0x1b8>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d102      	bne.n	800d5ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d5e4:	f003 ffe4 	bl	80115b0 <tcp_trigger_input_pcb_close>
 800d5e8:	e002      	b.n	800d5f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7ff fed6 	bl	800d39c <tcp_free>
      }
      return ERR_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	e050      	b.n	800d696 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	7d1b      	ldrb	r3, [r3, #20]
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d03b      	beq.n	800d674 <tcp_close_shutdown+0x174>
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	dc44      	bgt.n	800d68a <tcp_close_shutdown+0x18a>
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <tcp_close_shutdown+0x10a>
 800d604:	2b01      	cmp	r3, #1
 800d606:	d02a      	beq.n	800d65e <tcp_close_shutdown+0x15e>
 800d608:	e03f      	b.n	800d68a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	8adb      	ldrh	r3, [r3, #22]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d021      	beq.n	800d656 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d612:	4b2a      	ldr	r3, [pc, #168]	@ (800d6bc <tcp_close_shutdown+0x1bc>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d105      	bne.n	800d628 <tcp_close_shutdown+0x128>
 800d61c:	4b27      	ldr	r3, [pc, #156]	@ (800d6bc <tcp_close_shutdown+0x1bc>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	4a26      	ldr	r2, [pc, #152]	@ (800d6bc <tcp_close_shutdown+0x1bc>)
 800d624:	6013      	str	r3, [r2, #0]
 800d626:	e013      	b.n	800d650 <tcp_close_shutdown+0x150>
 800d628:	4b24      	ldr	r3, [pc, #144]	@ (800d6bc <tcp_close_shutdown+0x1bc>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	60bb      	str	r3, [r7, #8]
 800d62e:	e00c      	b.n	800d64a <tcp_close_shutdown+0x14a>
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	d104      	bne.n	800d644 <tcp_close_shutdown+0x144>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68da      	ldr	r2, [r3, #12]
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	60da      	str	r2, [r3, #12]
 800d642:	e005      	b.n	800d650 <tcp_close_shutdown+0x150>
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	60bb      	str	r3, [r7, #8]
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1ef      	bne.n	800d630 <tcp_close_shutdown+0x130>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff fea0 	bl	800d39c <tcp_free>
      break;
 800d65c:	e01a      	b.n	800d694 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff ff14 	bl	800d48c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	4816      	ldr	r0, [pc, #88]	@ (800d6c0 <tcp_close_shutdown+0x1c0>)
 800d668:	f001 fb32 	bl	800ecd0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7ff feb1 	bl	800d3d4 <tcp_free_listen>
      break;
 800d672:	e00f      	b.n	800d694 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	480e      	ldr	r0, [pc, #56]	@ (800d6b0 <tcp_close_shutdown+0x1b0>)
 800d678:	f001 fb2a 	bl	800ecd0 <tcp_pcb_remove>
 800d67c:	4b0d      	ldr	r3, [pc, #52]	@ (800d6b4 <tcp_close_shutdown+0x1b4>)
 800d67e:	2201      	movs	r2, #1
 800d680:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff fe8a 	bl	800d39c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d688:	e004      	b.n	800d694 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f81a 	bl	800d6c4 <tcp_close_shutdown_fin>
 800d690:	4603      	mov	r3, r0
 800d692:	e000      	b.n	800d696 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bdb0      	pop	{r4, r5, r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	08018e48 	.word	0x08018e48
 800d6a4:	08018f1c 	.word	0x08018f1c
 800d6a8:	08018e8c 	.word	0x08018e8c
 800d6ac:	08018f3c 	.word	0x08018f3c
 800d6b0:	2000c5b0 	.word	0x2000c5b0
 800d6b4:	2000c5b8 	.word	0x2000c5b8
 800d6b8:	2000c5f0 	.word	0x2000c5f0
 800d6bc:	2000c5a8 	.word	0x2000c5a8
 800d6c0:	2000c5ac 	.word	0x2000c5ac

0800d6c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d106      	bne.n	800d6e0 <tcp_close_shutdown_fin+0x1c>
 800d6d2:	4b2e      	ldr	r3, [pc, #184]	@ (800d78c <tcp_close_shutdown_fin+0xc8>)
 800d6d4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d6d8:	492d      	ldr	r1, [pc, #180]	@ (800d790 <tcp_close_shutdown_fin+0xcc>)
 800d6da:	482e      	ldr	r0, [pc, #184]	@ (800d794 <tcp_close_shutdown_fin+0xd0>)
 800d6dc:	f7f3 fcf8 	bl	80010d0 <printf>

  switch (pcb->state) {
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7d1b      	ldrb	r3, [r3, #20]
 800d6e4:	2b07      	cmp	r3, #7
 800d6e6:	d020      	beq.n	800d72a <tcp_close_shutdown_fin+0x66>
 800d6e8:	2b07      	cmp	r3, #7
 800d6ea:	dc2b      	bgt.n	800d744 <tcp_close_shutdown_fin+0x80>
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d002      	beq.n	800d6f6 <tcp_close_shutdown_fin+0x32>
 800d6f0:	2b04      	cmp	r3, #4
 800d6f2:	d00d      	beq.n	800d710 <tcp_close_shutdown_fin+0x4c>
 800d6f4:	e026      	b.n	800d744 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f004 fdc2 	bl	8012280 <tcp_send_fin>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d11f      	bne.n	800d748 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2205      	movs	r2, #5
 800d70c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d70e:	e01b      	b.n	800d748 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f004 fdb5 	bl	8012280 <tcp_send_fin>
 800d716:	4603      	mov	r3, r0
 800d718:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d114      	bne.n	800d74c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2205      	movs	r2, #5
 800d726:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d728:	e010      	b.n	800d74c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f004 fda8 	bl	8012280 <tcp_send_fin>
 800d730:	4603      	mov	r3, r0
 800d732:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d109      	bne.n	800d750 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2209      	movs	r2, #9
 800d740:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d742:	e005      	b.n	800d750 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	e01c      	b.n	800d782 <tcp_close_shutdown_fin+0xbe>
      break;
 800d748:	bf00      	nop
 800d74a:	e002      	b.n	800d752 <tcp_close_shutdown_fin+0x8e>
      break;
 800d74c:	bf00      	nop
 800d74e:	e000      	b.n	800d752 <tcp_close_shutdown_fin+0x8e>
      break;
 800d750:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d103      	bne.n	800d762 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f004 fece 	bl	80124fc <tcp_output>
 800d760:	e00d      	b.n	800d77e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d108      	bne.n	800d77e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	8b5b      	ldrh	r3, [r3, #26]
 800d770:	f043 0308 	orr.w	r3, r3, #8
 800d774:	b29a      	uxth	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	e001      	b.n	800d782 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d77e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	08018e48 	.word	0x08018e48
 800d790:	08018ef8 	.word	0x08018ef8
 800d794:	08018e8c 	.word	0x08018e8c

0800d798 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d109      	bne.n	800d7ba <tcp_close+0x22>
 800d7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d7e4 <tcp_close+0x4c>)
 800d7a8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d7ac:	490e      	ldr	r1, [pc, #56]	@ (800d7e8 <tcp_close+0x50>)
 800d7ae:	480f      	ldr	r0, [pc, #60]	@ (800d7ec <tcp_close+0x54>)
 800d7b0:	f7f3 fc8e 	bl	80010d0 <printf>
 800d7b4:	f06f 030f 	mvn.w	r3, #15
 800d7b8:	e00f      	b.n	800d7da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	7d1b      	ldrb	r3, [r3, #20]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d006      	beq.n	800d7d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	8b5b      	ldrh	r3, [r3, #26]
 800d7c6:	f043 0310 	orr.w	r3, r3, #16
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d7d0:	2101      	movs	r1, #1
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fe94 	bl	800d500 <tcp_close_shutdown>
 800d7d8:	4603      	mov	r3, r0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	08018e48 	.word	0x08018e48
 800d7e8:	08018f58 	.word	0x08018f58
 800d7ec:	08018e8c 	.word	0x08018e8c

0800d7f0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d109      	bne.n	800d816 <tcp_shutdown+0x26>
 800d802:	4b26      	ldr	r3, [pc, #152]	@ (800d89c <tcp_shutdown+0xac>)
 800d804:	f240 2207 	movw	r2, #519	@ 0x207
 800d808:	4925      	ldr	r1, [pc, #148]	@ (800d8a0 <tcp_shutdown+0xb0>)
 800d80a:	4826      	ldr	r0, [pc, #152]	@ (800d8a4 <tcp_shutdown+0xb4>)
 800d80c:	f7f3 fc60 	bl	80010d0 <printf>
 800d810:	f06f 030f 	mvn.w	r3, #15
 800d814:	e03d      	b.n	800d892 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	7d1b      	ldrb	r3, [r3, #20]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d102      	bne.n	800d824 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d81e:	f06f 030a 	mvn.w	r3, #10
 800d822:	e036      	b.n	800d892 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d01b      	beq.n	800d862 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	8b5b      	ldrh	r3, [r3, #26]
 800d82e:	f043 0310 	orr.w	r3, r3, #16
 800d832:	b29a      	uxth	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d005      	beq.n	800d84a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d83e:	2101      	movs	r1, #1
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f7ff fe5d 	bl	800d500 <tcp_close_shutdown>
 800d846:	4603      	mov	r3, r0
 800d848:	e023      	b.n	800d892 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d007      	beq.n	800d862 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d856:	4618      	mov	r0, r3
 800d858:	f7ff faf4 	bl	800ce44 <pbuf_free>
      pcb->refused_data = NULL;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d013      	beq.n	800d890 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	7d1b      	ldrb	r3, [r3, #20]
 800d86c:	2b04      	cmp	r3, #4
 800d86e:	dc02      	bgt.n	800d876 <tcp_shutdown+0x86>
 800d870:	2b03      	cmp	r3, #3
 800d872:	da02      	bge.n	800d87a <tcp_shutdown+0x8a>
 800d874:	e009      	b.n	800d88a <tcp_shutdown+0x9a>
 800d876:	2b07      	cmp	r3, #7
 800d878:	d107      	bne.n	800d88a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	4619      	mov	r1, r3
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f7ff fe3d 	bl	800d500 <tcp_close_shutdown>
 800d886:	4603      	mov	r3, r0
 800d888:	e003      	b.n	800d892 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d88a:	f06f 030a 	mvn.w	r3, #10
 800d88e:	e000      	b.n	800d892 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	08018e48 	.word	0x08018e48
 800d8a0:	08018f70 	.word	0x08018f70
 800d8a4:	08018e8c 	.word	0x08018e8c

0800d8a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b08e      	sub	sp, #56	@ 0x38
 800d8ac:	af04      	add	r7, sp, #16
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d107      	bne.n	800d8c8 <tcp_abandon+0x20>
 800d8b8:	4b52      	ldr	r3, [pc, #328]	@ (800da04 <tcp_abandon+0x15c>)
 800d8ba:	f240 223d 	movw	r2, #573	@ 0x23d
 800d8be:	4952      	ldr	r1, [pc, #328]	@ (800da08 <tcp_abandon+0x160>)
 800d8c0:	4852      	ldr	r0, [pc, #328]	@ (800da0c <tcp_abandon+0x164>)
 800d8c2:	f7f3 fc05 	bl	80010d0 <printf>
 800d8c6:	e099      	b.n	800d9fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7d1b      	ldrb	r3, [r3, #20]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d106      	bne.n	800d8de <tcp_abandon+0x36>
 800d8d0:	4b4c      	ldr	r3, [pc, #304]	@ (800da04 <tcp_abandon+0x15c>)
 800d8d2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d8d6:	494e      	ldr	r1, [pc, #312]	@ (800da10 <tcp_abandon+0x168>)
 800d8d8:	484c      	ldr	r0, [pc, #304]	@ (800da0c <tcp_abandon+0x164>)
 800d8da:	f7f3 fbf9 	bl	80010d0 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	7d1b      	ldrb	r3, [r3, #20]
 800d8e2:	2b0a      	cmp	r3, #10
 800d8e4:	d107      	bne.n	800d8f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	484a      	ldr	r0, [pc, #296]	@ (800da14 <tcp_abandon+0x16c>)
 800d8ea:	f001 f9f1 	bl	800ecd0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff fd54 	bl	800d39c <tcp_free>
 800d8f4:	e082      	b.n	800d9fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d902:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d908:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d910:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7d1b      	ldrb	r3, [r3, #20]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d126      	bne.n	800d96e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	8adb      	ldrh	r3, [r3, #22]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d02e      	beq.n	800d986 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d928:	4b3b      	ldr	r3, [pc, #236]	@ (800da18 <tcp_abandon+0x170>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d105      	bne.n	800d93e <tcp_abandon+0x96>
 800d932:	4b39      	ldr	r3, [pc, #228]	@ (800da18 <tcp_abandon+0x170>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	4a37      	ldr	r2, [pc, #220]	@ (800da18 <tcp_abandon+0x170>)
 800d93a:	6013      	str	r3, [r2, #0]
 800d93c:	e013      	b.n	800d966 <tcp_abandon+0xbe>
 800d93e:	4b36      	ldr	r3, [pc, #216]	@ (800da18 <tcp_abandon+0x170>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	61fb      	str	r3, [r7, #28]
 800d944:	e00c      	b.n	800d960 <tcp_abandon+0xb8>
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d104      	bne.n	800d95a <tcp_abandon+0xb2>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	60da      	str	r2, [r3, #12]
 800d958:	e005      	b.n	800d966 <tcp_abandon+0xbe>
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	61fb      	str	r3, [r7, #28]
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1ef      	bne.n	800d946 <tcp_abandon+0x9e>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	60da      	str	r2, [r3, #12]
 800d96c:	e00b      	b.n	800d986 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	8adb      	ldrh	r3, [r3, #22]
 800d976:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d978:	6879      	ldr	r1, [r7, #4]
 800d97a:	4828      	ldr	r0, [pc, #160]	@ (800da1c <tcp_abandon+0x174>)
 800d97c:	f001 f9a8 	bl	800ecd0 <tcp_pcb_remove>
 800d980:	4b27      	ldr	r3, [pc, #156]	@ (800da20 <tcp_abandon+0x178>)
 800d982:	2201      	movs	r2, #1
 800d984:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d004      	beq.n	800d998 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d992:	4618      	mov	r0, r3
 800d994:	f000 fe7c 	bl	800e690 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d004      	beq.n	800d9aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 fe73 	bl	800e690 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d004      	beq.n	800d9bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 fe6a 	bl	800e690 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00e      	beq.n	800d9e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d9c2:	6879      	ldr	r1, [r7, #4]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	8b12      	ldrh	r2, [r2, #24]
 800d9cc:	9202      	str	r2, [sp, #8]
 800d9ce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d9d0:	9201      	str	r2, [sp, #4]
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	69b9      	ldr	r1, [r7, #24]
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f005 fb42 	bl	8013064 <tcp_rst>
    }
    last_state = pcb->state;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7d1b      	ldrb	r3, [r3, #20]
 800d9e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7ff fcd8 	bl	800d39c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <tcp_abandon+0x154>
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f06f 010c 	mvn.w	r1, #12
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	4798      	blx	r3
  }
}
 800d9fc:	3728      	adds	r7, #40	@ 0x28
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	08018e48 	.word	0x08018e48
 800da08:	08018f8c 	.word	0x08018f8c
 800da0c:	08018e8c 	.word	0x08018e8c
 800da10:	08018fa8 	.word	0x08018fa8
 800da14:	2000c5b4 	.word	0x2000c5b4
 800da18:	2000c5a8 	.word	0x2000c5a8
 800da1c:	2000c5b0 	.word	0x2000c5b0
 800da20:	2000c5b8 	.word	0x2000c5b8

0800da24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800da2c:	2101      	movs	r1, #1
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7ff ff3a 	bl	800d8a8 <tcp_abandon>
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d106      	bne.n	800da58 <tcp_update_rcv_ann_wnd+0x1c>
 800da4a:	4b25      	ldr	r3, [pc, #148]	@ (800dae0 <tcp_update_rcv_ann_wnd+0xa4>)
 800da4c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800da50:	4924      	ldr	r1, [pc, #144]	@ (800dae4 <tcp_update_rcv_ann_wnd+0xa8>)
 800da52:	4825      	ldr	r0, [pc, #148]	@ (800dae8 <tcp_update_rcv_ann_wnd+0xac>)
 800da54:	f7f3 fb3c 	bl	80010d0 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800da60:	4413      	add	r3, r2
 800da62:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800da6c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800da70:	bf28      	it	cs
 800da72:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800da76:	b292      	uxth	r2, r2
 800da78:	4413      	add	r3, r2
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	2b00      	cmp	r3, #0
 800da80:	db08      	blt.n	800da94 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	e020      	b.n	800dad6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	dd03      	ble.n	800daaa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800daa8:	e014      	b.n	800dad4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dabc:	d306      	bcc.n	800dacc <tcp_update_rcv_ann_wnd+0x90>
 800dabe:	4b08      	ldr	r3, [pc, #32]	@ (800dae0 <tcp_update_rcv_ann_wnd+0xa4>)
 800dac0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800dac4:	4909      	ldr	r1, [pc, #36]	@ (800daec <tcp_update_rcv_ann_wnd+0xb0>)
 800dac6:	4808      	ldr	r0, [pc, #32]	@ (800dae8 <tcp_update_rcv_ann_wnd+0xac>)
 800dac8:	f7f3 fb02 	bl	80010d0 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	b29a      	uxth	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800dad4:	2300      	movs	r3, #0
  }
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	08018e48 	.word	0x08018e48
 800dae4:	080190a4 	.word	0x080190a4
 800dae8:	08018e8c 	.word	0x08018e8c
 800daec:	080190c8 	.word	0x080190c8

0800daf0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	460b      	mov	r3, r1
 800dafa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d107      	bne.n	800db12 <tcp_recved+0x22>
 800db02:	4b1f      	ldr	r3, [pc, #124]	@ (800db80 <tcp_recved+0x90>)
 800db04:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800db08:	491e      	ldr	r1, [pc, #120]	@ (800db84 <tcp_recved+0x94>)
 800db0a:	481f      	ldr	r0, [pc, #124]	@ (800db88 <tcp_recved+0x98>)
 800db0c:	f7f3 fae0 	bl	80010d0 <printf>
 800db10:	e032      	b.n	800db78 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	7d1b      	ldrb	r3, [r3, #20]
 800db16:	2b01      	cmp	r3, #1
 800db18:	d106      	bne.n	800db28 <tcp_recved+0x38>
 800db1a:	4b19      	ldr	r3, [pc, #100]	@ (800db80 <tcp_recved+0x90>)
 800db1c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800db20:	491a      	ldr	r1, [pc, #104]	@ (800db8c <tcp_recved+0x9c>)
 800db22:	4819      	ldr	r0, [pc, #100]	@ (800db88 <tcp_recved+0x98>)
 800db24:	f7f3 fad4 	bl	80010d0 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800db2c:	887b      	ldrh	r3, [r7, #2]
 800db2e:	4413      	add	r3, r2
 800db30:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800db32:	89fb      	ldrh	r3, [r7, #14]
 800db34:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800db38:	d804      	bhi.n	800db44 <tcp_recved+0x54>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db3e:	89fa      	ldrh	r2, [r7, #14]
 800db40:	429a      	cmp	r2, r3
 800db42:	d204      	bcs.n	800db4e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800db4a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800db4c:	e002      	b.n	800db54 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	89fa      	ldrh	r2, [r7, #14]
 800db52:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff ff71 	bl	800da3c <tcp_update_rcv_ann_wnd>
 800db5a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800db62:	d309      	bcc.n	800db78 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	8b5b      	ldrh	r3, [r3, #26]
 800db68:	f043 0302 	orr.w	r3, r3, #2
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f004 fcc2 	bl	80124fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	08018e48 	.word	0x08018e48
 800db84:	080190e4 	.word	0x080190e4
 800db88:	08018e8c 	.word	0x08018e8c
 800db8c:	080190fc 	.word	0x080190fc

0800db90 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800db9a:	4b1e      	ldr	r3, [pc, #120]	@ (800dc14 <tcp_new_port+0x84>)
 800db9c:	881b      	ldrh	r3, [r3, #0]
 800db9e:	3301      	adds	r3, #1
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	4b1c      	ldr	r3, [pc, #112]	@ (800dc14 <tcp_new_port+0x84>)
 800dba4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dba6:	4b1b      	ldr	r3, [pc, #108]	@ (800dc14 <tcp_new_port+0x84>)
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d103      	bne.n	800dbba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dbb2:	4b18      	ldr	r3, [pc, #96]	@ (800dc14 <tcp_new_port+0x84>)
 800dbb4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800dbb8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dbba:	2300      	movs	r3, #0
 800dbbc:	71fb      	strb	r3, [r7, #7]
 800dbbe:	e01e      	b.n	800dbfe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	4a15      	ldr	r2, [pc, #84]	@ (800dc18 <tcp_new_port+0x88>)
 800dbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	603b      	str	r3, [r7, #0]
 800dbcc:	e011      	b.n	800dbf2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	8ada      	ldrh	r2, [r3, #22]
 800dbd2:	4b10      	ldr	r3, [pc, #64]	@ (800dc14 <tcp_new_port+0x84>)
 800dbd4:	881b      	ldrh	r3, [r3, #0]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d108      	bne.n	800dbec <tcp_new_port+0x5c>
        n++;
 800dbda:	88bb      	ldrh	r3, [r7, #4]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dbe0:	88bb      	ldrh	r3, [r7, #4]
 800dbe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dbe6:	d3d8      	bcc.n	800db9a <tcp_new_port+0xa>
          return 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	e00d      	b.n	800dc08 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	603b      	str	r3, [r7, #0]
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1ea      	bne.n	800dbce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dbf8:	79fb      	ldrb	r3, [r7, #7]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	71fb      	strb	r3, [r7, #7]
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	2b03      	cmp	r3, #3
 800dc02:	d9dd      	bls.n	800dbc0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dc04:	4b03      	ldr	r3, [pc, #12]	@ (800dc14 <tcp_new_port+0x84>)
 800dc06:	881b      	ldrh	r3, [r3, #0]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr
 800dc14:	20000024 	.word	0x20000024
 800dc18:	0801ae6c 	.word	0x0801ae6c

0800dc1c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08a      	sub	sp, #40	@ 0x28
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d109      	bne.n	800dc4a <tcp_connect+0x2e>
 800dc36:	4b7d      	ldr	r3, [pc, #500]	@ (800de2c <tcp_connect+0x210>)
 800dc38:	f240 4235 	movw	r2, #1077	@ 0x435
 800dc3c:	497c      	ldr	r1, [pc, #496]	@ (800de30 <tcp_connect+0x214>)
 800dc3e:	487d      	ldr	r0, [pc, #500]	@ (800de34 <tcp_connect+0x218>)
 800dc40:	f7f3 fa46 	bl	80010d0 <printf>
 800dc44:	f06f 030f 	mvn.w	r3, #15
 800dc48:	e0ec      	b.n	800de24 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d109      	bne.n	800dc64 <tcp_connect+0x48>
 800dc50:	4b76      	ldr	r3, [pc, #472]	@ (800de2c <tcp_connect+0x210>)
 800dc52:	f240 4236 	movw	r2, #1078	@ 0x436
 800dc56:	4978      	ldr	r1, [pc, #480]	@ (800de38 <tcp_connect+0x21c>)
 800dc58:	4876      	ldr	r0, [pc, #472]	@ (800de34 <tcp_connect+0x218>)
 800dc5a:	f7f3 fa39 	bl	80010d0 <printf>
 800dc5e:	f06f 030f 	mvn.w	r3, #15
 800dc62:	e0df      	b.n	800de24 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	7d1b      	ldrb	r3, [r3, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d009      	beq.n	800dc80 <tcp_connect+0x64>
 800dc6c:	4b6f      	ldr	r3, [pc, #444]	@ (800de2c <tcp_connect+0x210>)
 800dc6e:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800dc72:	4972      	ldr	r1, [pc, #456]	@ (800de3c <tcp_connect+0x220>)
 800dc74:	486f      	ldr	r0, [pc, #444]	@ (800de34 <tcp_connect+0x218>)
 800dc76:	f7f3 fa2b 	bl	80010d0 <printf>
 800dc7a:	f06f 0309 	mvn.w	r3, #9
 800dc7e:	e0d1      	b.n	800de24 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <tcp_connect+0x70>
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	e000      	b.n	800dc8e <tcp_connect+0x72>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	88fa      	ldrh	r2, [r7, #6]
 800dc96:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	7a1b      	ldrb	r3, [r3, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d006      	beq.n	800dcae <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	7a1b      	ldrb	r3, [r3, #8]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fe fd3f 	bl	800c728 <netif_get_by_index>
 800dcaa:	6278      	str	r0, [r7, #36]	@ 0x24
 800dcac:	e005      	b.n	800dcba <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f007 f95a 	bl	8014f6c <ip4_route>
 800dcb8:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800dcc0:	f06f 0303 	mvn.w	r3, #3
 800dcc4:	e0ae      	b.n	800de24 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <tcp_connect+0xb8>
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d111      	bne.n	800dcf8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d002      	beq.n	800dce0 <tcp_connect+0xc4>
 800dcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcdc:	3304      	adds	r3, #4
 800dcde:	e000      	b.n	800dce2 <tcp_connect+0xc6>
 800dce0:	2300      	movs	r3, #0
 800dce2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d102      	bne.n	800dcf0 <tcp_connect+0xd4>
      return ERR_RTE;
 800dcea:	f06f 0303 	mvn.w	r3, #3
 800dcee:	e099      	b.n	800de24 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	8adb      	ldrh	r3, [r3, #22]
 800dcfc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	8adb      	ldrh	r3, [r3, #22]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10c      	bne.n	800dd20 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800dd06:	f7ff ff43 	bl	800db90 <tcp_new_port>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	8adb      	ldrh	r3, [r3, #22]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d102      	bne.n	800dd20 <tcp_connect+0x104>
      return ERR_BUF;
 800dd1a:	f06f 0301 	mvn.w	r3, #1
 800dd1e:	e081      	b.n	800de24 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f001 f869 	bl	800edf8 <tcp_next_iss>
 800dd26:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	697a      	ldr	r2, [r7, #20]
 800dd32:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	1e5a      	subs	r2, r3, #1
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	1e5a      	subs	r2, r3, #1
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	1e5a      	subs	r2, r3, #1
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dd52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dd6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dd74:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	461a      	mov	r2, r3
 800dd80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd82:	f001 f85f 	bl	800ee44 <tcp_eff_send_mss_netif>
 800dd86:	4603      	mov	r3, r0
 800dd88:	461a      	mov	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800dd9e:	2102      	movs	r1, #2
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f004 fabd 	bl	8012320 <tcp_enqueue_flags>
 800dda6:	4603      	mov	r3, r0
 800dda8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ddaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d136      	bne.n	800de20 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2202      	movs	r2, #2
 800ddb6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800ddb8:	8b7b      	ldrh	r3, [r7, #26]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d021      	beq.n	800de02 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ddbe:	4b20      	ldr	r3, [pc, #128]	@ (800de40 <tcp_connect+0x224>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d105      	bne.n	800ddd4 <tcp_connect+0x1b8>
 800ddc8:	4b1d      	ldr	r3, [pc, #116]	@ (800de40 <tcp_connect+0x224>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	4a1c      	ldr	r2, [pc, #112]	@ (800de40 <tcp_connect+0x224>)
 800ddd0:	6013      	str	r3, [r2, #0]
 800ddd2:	e013      	b.n	800ddfc <tcp_connect+0x1e0>
 800ddd4:	4b1a      	ldr	r3, [pc, #104]	@ (800de40 <tcp_connect+0x224>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	623b      	str	r3, [r7, #32]
 800ddda:	e00c      	b.n	800ddf6 <tcp_connect+0x1da>
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d104      	bne.n	800ddf0 <tcp_connect+0x1d4>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	68da      	ldr	r2, [r3, #12]
 800ddea:	6a3b      	ldr	r3, [r7, #32]
 800ddec:	60da      	str	r2, [r3, #12]
 800ddee:	e005      	b.n	800ddfc <tcp_connect+0x1e0>
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	623b      	str	r3, [r7, #32]
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1ef      	bne.n	800dddc <tcp_connect+0x1c0>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800de02:	4b10      	ldr	r3, [pc, #64]	@ (800de44 <tcp_connect+0x228>)
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	60da      	str	r2, [r3, #12]
 800de0a:	4a0e      	ldr	r2, [pc, #56]	@ (800de44 <tcp_connect+0x228>)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6013      	str	r3, [r2, #0]
 800de10:	f005 faea 	bl	80133e8 <tcp_timer_needed>
 800de14:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <tcp_connect+0x22c>)
 800de16:	2201      	movs	r2, #1
 800de18:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f004 fb6e 	bl	80124fc <tcp_output>
  }
  return ret;
 800de20:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3728      	adds	r7, #40	@ 0x28
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	08018e48 	.word	0x08018e48
 800de30:	08019124 	.word	0x08019124
 800de34:	08018e8c 	.word	0x08018e8c
 800de38:	08019140 	.word	0x08019140
 800de3c:	0801915c 	.word	0x0801915c
 800de40:	2000c5a8 	.word	0x2000c5a8
 800de44:	2000c5b0 	.word	0x2000c5b0
 800de48:	2000c5b8 	.word	0x2000c5b8

0800de4c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800de4c:	b5b0      	push	{r4, r5, r7, lr}
 800de4e:	b090      	sub	sp, #64	@ 0x40
 800de50:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800de52:	2300      	movs	r3, #0
 800de54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800de58:	4b95      	ldr	r3, [pc, #596]	@ (800e0b0 <tcp_slowtmr+0x264>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	3301      	adds	r3, #1
 800de5e:	4a94      	ldr	r2, [pc, #592]	@ (800e0b0 <tcp_slowtmr+0x264>)
 800de60:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800de62:	4b94      	ldr	r3, [pc, #592]	@ (800e0b4 <tcp_slowtmr+0x268>)
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	3301      	adds	r3, #1
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	4b92      	ldr	r3, [pc, #584]	@ (800e0b4 <tcp_slowtmr+0x268>)
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	e000      	b.n	800de72 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800de70:	bf00      	nop
  prev = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800de76:	4b90      	ldr	r3, [pc, #576]	@ (800e0b8 <tcp_slowtmr+0x26c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800de7c:	e29d      	b.n	800e3ba <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800de7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de80:	7d1b      	ldrb	r3, [r3, #20]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <tcp_slowtmr+0x48>
 800de86:	4b8d      	ldr	r3, [pc, #564]	@ (800e0bc <tcp_slowtmr+0x270>)
 800de88:	f240 42be 	movw	r2, #1214	@ 0x4be
 800de8c:	498c      	ldr	r1, [pc, #560]	@ (800e0c0 <tcp_slowtmr+0x274>)
 800de8e:	488d      	ldr	r0, [pc, #564]	@ (800e0c4 <tcp_slowtmr+0x278>)
 800de90:	f7f3 f91e 	bl	80010d0 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800de94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de96:	7d1b      	ldrb	r3, [r3, #20]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d106      	bne.n	800deaa <tcp_slowtmr+0x5e>
 800de9c:	4b87      	ldr	r3, [pc, #540]	@ (800e0bc <tcp_slowtmr+0x270>)
 800de9e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800dea2:	4989      	ldr	r1, [pc, #548]	@ (800e0c8 <tcp_slowtmr+0x27c>)
 800dea4:	4887      	ldr	r0, [pc, #540]	@ (800e0c4 <tcp_slowtmr+0x278>)
 800dea6:	f7f3 f913 	bl	80010d0 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800deaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deac:	7d1b      	ldrb	r3, [r3, #20]
 800deae:	2b0a      	cmp	r3, #10
 800deb0:	d106      	bne.n	800dec0 <tcp_slowtmr+0x74>
 800deb2:	4b82      	ldr	r3, [pc, #520]	@ (800e0bc <tcp_slowtmr+0x270>)
 800deb4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800deb8:	4984      	ldr	r1, [pc, #528]	@ (800e0cc <tcp_slowtmr+0x280>)
 800deba:	4882      	ldr	r0, [pc, #520]	@ (800e0c4 <tcp_slowtmr+0x278>)
 800debc:	f7f3 f908 	bl	80010d0 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec2:	7f9a      	ldrb	r2, [r3, #30]
 800dec4:	4b7b      	ldr	r3, [pc, #492]	@ (800e0b4 <tcp_slowtmr+0x268>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d105      	bne.n	800ded8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800decc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dece:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ded0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ded6:	e270      	b.n	800e3ba <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800ded8:	4b76      	ldr	r3, [pc, #472]	@ (800e0b4 <tcp_slowtmr+0x268>)
 800deda:	781a      	ldrb	r2, [r3, #0]
 800dedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dede:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800dee0:	2300      	movs	r3, #0
 800dee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800deec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deee:	7d1b      	ldrb	r3, [r3, #20]
 800def0:	2b02      	cmp	r3, #2
 800def2:	d10a      	bne.n	800df0a <tcp_slowtmr+0xbe>
 800def4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800defa:	2b05      	cmp	r3, #5
 800defc:	d905      	bls.n	800df0a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800defe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df02:	3301      	adds	r3, #1
 800df04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df08:	e11e      	b.n	800e148 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800df0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df10:	2b0b      	cmp	r3, #11
 800df12:	d905      	bls.n	800df20 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800df14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df18:	3301      	adds	r3, #1
 800df1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df1e:	e113      	b.n	800e148 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800df20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df22:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800df26:	2b00      	cmp	r3, #0
 800df28:	d075      	beq.n	800e016 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800df2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d006      	beq.n	800df40 <tcp_slowtmr+0xf4>
 800df32:	4b62      	ldr	r3, [pc, #392]	@ (800e0bc <tcp_slowtmr+0x270>)
 800df34:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800df38:	4965      	ldr	r1, [pc, #404]	@ (800e0d0 <tcp_slowtmr+0x284>)
 800df3a:	4862      	ldr	r0, [pc, #392]	@ (800e0c4 <tcp_slowtmr+0x278>)
 800df3c:	f7f3 f8c8 	bl	80010d0 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800df40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d106      	bne.n	800df56 <tcp_slowtmr+0x10a>
 800df48:	4b5c      	ldr	r3, [pc, #368]	@ (800e0bc <tcp_slowtmr+0x270>)
 800df4a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800df4e:	4961      	ldr	r1, [pc, #388]	@ (800e0d4 <tcp_slowtmr+0x288>)
 800df50:	485c      	ldr	r0, [pc, #368]	@ (800e0c4 <tcp_slowtmr+0x278>)
 800df52:	f7f3 f8bd 	bl	80010d0 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800df56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df58:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800df5c:	2b0b      	cmp	r3, #11
 800df5e:	d905      	bls.n	800df6c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800df60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df64:	3301      	adds	r3, #1
 800df66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df6a:	e0ed      	b.n	800e148 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800df6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800df72:	3b01      	subs	r3, #1
 800df74:	4a58      	ldr	r2, [pc, #352]	@ (800e0d8 <tcp_slowtmr+0x28c>)
 800df76:	5cd3      	ldrb	r3, [r2, r3]
 800df78:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800df7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df7c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800df80:	7c7a      	ldrb	r2, [r7, #17]
 800df82:	429a      	cmp	r2, r3
 800df84:	d907      	bls.n	800df96 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800df86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df88:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800df8c:	3301      	adds	r3, #1
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df92:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800df96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800df9c:	7c7a      	ldrb	r2, [r7, #17]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	f200 80d2 	bhi.w	800e148 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800dfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d108      	bne.n	800dfc4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dfb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dfb4:	f005 f94a 	bl	801324c <tcp_zero_window_probe>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d014      	beq.n	800dfe8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	623b      	str	r3, [r7, #32]
 800dfc2:	e011      	b.n	800dfe8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dfce:	f004 f80f 	bl	8011ff0 <tcp_split_unsent_seg>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d107      	bne.n	800dfe8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800dfd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dfda:	f004 fa8f 	bl	80124fc <tcp_output>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800dfe8:	6a3b      	ldr	r3, [r7, #32]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f000 80ac 	beq.w	800e148 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800dff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dffe:	2b06      	cmp	r3, #6
 800e000:	f200 80a2 	bhi.w	800e148 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e006:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e00a:	3301      	adds	r3, #1
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e010:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e014:	e098      	b.n	800e148 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e018:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	db0f      	blt.n	800e040 <tcp_slowtmr+0x1f4>
 800e020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e022:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e026:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d008      	beq.n	800e040 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e030:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e034:	b29b      	uxth	r3, r3
 800e036:	3301      	adds	r3, #1
 800e038:	b29b      	uxth	r3, r3
 800e03a:	b21a      	sxth	r2, r3
 800e03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e042:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e048:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e04c:	429a      	cmp	r2, r3
 800e04e:	db7b      	blt.n	800e148 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e050:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e052:	f004 fd47 	bl	8012ae4 <tcp_rexmit_rto_prepare>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d007      	beq.n	800e06c <tcp_slowtmr+0x220>
 800e05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e060:	2b00      	cmp	r3, #0
 800e062:	d171      	bne.n	800e148 <tcp_slowtmr+0x2fc>
 800e064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d06d      	beq.n	800e148 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06e:	7d1b      	ldrb	r3, [r3, #20]
 800e070:	2b02      	cmp	r3, #2
 800e072:	d03a      	beq.n	800e0ea <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e076:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e07a:	2b0c      	cmp	r3, #12
 800e07c:	bf28      	it	cs
 800e07e:	230c      	movcs	r3, #12
 800e080:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e084:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e088:	10db      	asrs	r3, r3, #3
 800e08a:	b21b      	sxth	r3, r3
 800e08c:	461a      	mov	r2, r3
 800e08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e090:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e094:	4413      	add	r3, r2
 800e096:	7efa      	ldrb	r2, [r7, #27]
 800e098:	4910      	ldr	r1, [pc, #64]	@ (800e0dc <tcp_slowtmr+0x290>)
 800e09a:	5c8a      	ldrb	r2, [r1, r2]
 800e09c:	4093      	lsls	r3, r2
 800e09e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	dc1a      	bgt.n	800e0e0 <tcp_slowtmr+0x294>
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	b21a      	sxth	r2, r3
 800e0ae:	e019      	b.n	800e0e4 <tcp_slowtmr+0x298>
 800e0b0:	2000c5a4 	.word	0x2000c5a4
 800e0b4:	2000c5ba 	.word	0x2000c5ba
 800e0b8:	2000c5b0 	.word	0x2000c5b0
 800e0bc:	08018e48 	.word	0x08018e48
 800e0c0:	0801918c 	.word	0x0801918c
 800e0c4:	08018e8c 	.word	0x08018e8c
 800e0c8:	080191b8 	.word	0x080191b8
 800e0cc:	080191e4 	.word	0x080191e4
 800e0d0:	08019214 	.word	0x08019214
 800e0d4:	08019248 	.word	0x08019248
 800e0d8:	0801ae64 	.word	0x0801ae64
 800e0dc:	0801ae54 	.word	0x0801ae54
 800e0e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	bf28      	it	cs
 800e100:	4613      	movcs	r3, r2
 800e102:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e104:	8a7b      	ldrh	r3, [r7, #18]
 800e106:	085b      	lsrs	r3, r3, #1
 800e108:	b29a      	uxth	r2, r3
 800e10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e112:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e118:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	429a      	cmp	r2, r3
 800e120:	d206      	bcs.n	800e130 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e126:	005b      	lsls	r3, r3, #1
 800e128:	b29a      	uxth	r2, r3
 800e12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e132:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e136:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13c:	2200      	movs	r2, #0
 800e13e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e142:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e144:	f004 fd3e 	bl	8012bc4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14a:	7d1b      	ldrb	r3, [r3, #20]
 800e14c:	2b06      	cmp	r3, #6
 800e14e:	d111      	bne.n	800e174 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e152:	8b5b      	ldrh	r3, [r3, #26]
 800e154:	f003 0310 	and.w	r3, r3, #16
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00b      	beq.n	800e174 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e15c:	4b9c      	ldr	r3, [pc, #624]	@ (800e3d0 <tcp_slowtmr+0x584>)
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e162:	6a1b      	ldr	r3, [r3, #32]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	2b28      	cmp	r3, #40	@ 0x28
 800e168:	d904      	bls.n	800e174 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e16a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e16e:	3301      	adds	r3, #1
 800e170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e176:	7a5b      	ldrb	r3, [r3, #9]
 800e178:	f003 0308 	and.w	r3, r3, #8
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d04a      	beq.n	800e216 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e182:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e184:	2b04      	cmp	r3, #4
 800e186:	d003      	beq.n	800e190 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e18c:	2b07      	cmp	r3, #7
 800e18e:	d142      	bne.n	800e216 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e190:	4b8f      	ldr	r3, [pc, #572]	@ (800e3d0 <tcp_slowtmr+0x584>)
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e196:	6a1b      	ldr	r3, [r3, #32]
 800e198:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e1a0:	4b8c      	ldr	r3, [pc, #560]	@ (800e3d4 <tcp_slowtmr+0x588>)
 800e1a2:	440b      	add	r3, r1
 800e1a4:	498c      	ldr	r1, [pc, #560]	@ (800e3d8 <tcp_slowtmr+0x58c>)
 800e1a6:	fba1 1303 	umull	r1, r3, r1, r3
 800e1aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d90a      	bls.n	800e1c6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e1ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e1be:	3301      	adds	r3, #1
 800e1c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e1c4:	e027      	b.n	800e216 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1c6:	4b82      	ldr	r3, [pc, #520]	@ (800e3d0 <tcp_slowtmr+0x584>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e1dc:	4618      	mov	r0, r3
 800e1de:	4b7f      	ldr	r3, [pc, #508]	@ (800e3dc <tcp_slowtmr+0x590>)
 800e1e0:	fb00 f303 	mul.w	r3, r0, r3
 800e1e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e1e6:	497c      	ldr	r1, [pc, #496]	@ (800e3d8 <tcp_slowtmr+0x58c>)
 800e1e8:	fba1 1303 	umull	r1, r3, r1, r3
 800e1ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d911      	bls.n	800e216 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e1f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e1f4:	f004 ffea 	bl	80131cc <tcp_keepalive>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e1fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e202:	2b00      	cmp	r3, #0
 800e204:	d107      	bne.n	800e216 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e208:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e20c:	3301      	adds	r3, #1
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e212:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d011      	beq.n	800e242 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e21e:	4b6c      	ldr	r3, [pc, #432]	@ (800e3d0 <tcp_slowtmr+0x584>)
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	1ad2      	subs	r2, r2, r3
 800e228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e22e:	4619      	mov	r1, r3
 800e230:	460b      	mov	r3, r1
 800e232:	005b      	lsls	r3, r3, #1
 800e234:	440b      	add	r3, r1
 800e236:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e238:	429a      	cmp	r2, r3
 800e23a:	d302      	bcc.n	800e242 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e23c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e23e:	f000 feab 	bl	800ef98 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e244:	7d1b      	ldrb	r3, [r3, #20]
 800e246:	2b03      	cmp	r3, #3
 800e248:	d10b      	bne.n	800e262 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e24a:	4b61      	ldr	r3, [pc, #388]	@ (800e3d0 <tcp_slowtmr+0x584>)
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e250:	6a1b      	ldr	r3, [r3, #32]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	2b28      	cmp	r3, #40	@ 0x28
 800e256:	d904      	bls.n	800e262 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e25c:	3301      	adds	r3, #1
 800e25e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e264:	7d1b      	ldrb	r3, [r3, #20]
 800e266:	2b09      	cmp	r3, #9
 800e268:	d10b      	bne.n	800e282 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e26a:	4b59      	ldr	r3, [pc, #356]	@ (800e3d0 <tcp_slowtmr+0x584>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	2bf0      	cmp	r3, #240	@ 0xf0
 800e276:	d904      	bls.n	800e282 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e27c:	3301      	adds	r3, #1
 800e27e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e286:	2b00      	cmp	r3, #0
 800e288:	d060      	beq.n	800e34c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e290:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e294:	f000 fccc 	bl	800ec30 <tcp_pcb_purge>
      if (prev != NULL) {
 800e298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d010      	beq.n	800e2c0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e29e:	4b50      	ldr	r3, [pc, #320]	@ (800e3e0 <tcp_slowtmr+0x594>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d106      	bne.n	800e2b6 <tcp_slowtmr+0x46a>
 800e2a8:	4b4e      	ldr	r3, [pc, #312]	@ (800e3e4 <tcp_slowtmr+0x598>)
 800e2aa:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e2ae:	494e      	ldr	r1, [pc, #312]	@ (800e3e8 <tcp_slowtmr+0x59c>)
 800e2b0:	484e      	ldr	r0, [pc, #312]	@ (800e3ec <tcp_slowtmr+0x5a0>)
 800e2b2:	f7f2 ff0d 	bl	80010d0 <printf>
        prev->next = pcb->next;
 800e2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b8:	68da      	ldr	r2, [r3, #12]
 800e2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2bc:	60da      	str	r2, [r3, #12]
 800e2be:	e00f      	b.n	800e2e0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e2c0:	4b47      	ldr	r3, [pc, #284]	@ (800e3e0 <tcp_slowtmr+0x594>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d006      	beq.n	800e2d8 <tcp_slowtmr+0x48c>
 800e2ca:	4b46      	ldr	r3, [pc, #280]	@ (800e3e4 <tcp_slowtmr+0x598>)
 800e2cc:	f240 5271 	movw	r2, #1393	@ 0x571
 800e2d0:	4947      	ldr	r1, [pc, #284]	@ (800e3f0 <tcp_slowtmr+0x5a4>)
 800e2d2:	4846      	ldr	r0, [pc, #280]	@ (800e3ec <tcp_slowtmr+0x5a0>)
 800e2d4:	f7f2 fefc 	bl	80010d0 <printf>
        tcp_active_pcbs = pcb->next;
 800e2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	4a40      	ldr	r2, [pc, #256]	@ (800e3e0 <tcp_slowtmr+0x594>)
 800e2de:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e2e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d013      	beq.n	800e310 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ea:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e2f0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2f8:	8ad2      	ldrh	r2, [r2, #22]
 800e2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2fc:	8b09      	ldrh	r1, [r1, #24]
 800e2fe:	9102      	str	r1, [sp, #8]
 800e300:	9201      	str	r2, [sp, #4]
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	462b      	mov	r3, r5
 800e306:	4622      	mov	r2, r4
 800e308:	4601      	mov	r1, r0
 800e30a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e30c:	f004 feaa 	bl	8013064 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e318:	7d1b      	ldrb	r3, [r3, #20]
 800e31a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e326:	6838      	ldr	r0, [r7, #0]
 800e328:	f7ff f838 	bl	800d39c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e32c:	4b31      	ldr	r3, [pc, #196]	@ (800e3f4 <tcp_slowtmr+0x5a8>)
 800e32e:	2200      	movs	r2, #0
 800e330:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <tcp_slowtmr+0x4f6>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f06f 010c 	mvn.w	r1, #12
 800e33e:	68b8      	ldr	r0, [r7, #8]
 800e340:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e342:	4b2c      	ldr	r3, [pc, #176]	@ (800e3f4 <tcp_slowtmr+0x5a8>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d037      	beq.n	800e3ba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e34a:	e592      	b.n	800de72 <tcp_slowtmr+0x26>
      prev = pcb;
 800e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e358:	7f1b      	ldrb	r3, [r3, #28]
 800e35a:	3301      	adds	r3, #1
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e360:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e364:	7f1a      	ldrb	r2, [r3, #28]
 800e366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e368:	7f5b      	ldrb	r3, [r3, #29]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d325      	bcc.n	800e3ba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e370:	2200      	movs	r2, #0
 800e372:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e374:	4b1f      	ldr	r3, [pc, #124]	@ (800e3f4 <tcp_slowtmr+0x5a8>)
 800e376:	2200      	movs	r2, #0
 800e378:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00b      	beq.n	800e39c <tcp_slowtmr+0x550>
 800e384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e38a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e38c:	6912      	ldr	r2, [r2, #16]
 800e38e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e390:	4610      	mov	r0, r2
 800e392:	4798      	blx	r3
 800e394:	4603      	mov	r3, r0
 800e396:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e39a:	e002      	b.n	800e3a2 <tcp_slowtmr+0x556>
 800e39c:	2300      	movs	r3, #0
 800e39e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e3a2:	4b14      	ldr	r3, [pc, #80]	@ (800e3f4 <tcp_slowtmr+0x5a8>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f47f ad62 	bne.w	800de70 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e3ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d102      	bne.n	800e3ba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e3b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3b6:	f004 f8a1 	bl	80124fc <tcp_output>
  while (pcb != NULL) {
 800e3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f47f ad5e 	bne.w	800de7e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e3f8 <tcp_slowtmr+0x5ac>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e3cc:	e069      	b.n	800e4a2 <tcp_slowtmr+0x656>
 800e3ce:	bf00      	nop
 800e3d0:	2000c5a4 	.word	0x2000c5a4
 800e3d4:	000a4cb8 	.word	0x000a4cb8
 800e3d8:	10624dd3 	.word	0x10624dd3
 800e3dc:	000124f8 	.word	0x000124f8
 800e3e0:	2000c5b0 	.word	0x2000c5b0
 800e3e4:	08018e48 	.word	0x08018e48
 800e3e8:	08019280 	.word	0x08019280
 800e3ec:	08018e8c 	.word	0x08018e8c
 800e3f0:	080192ac 	.word	0x080192ac
 800e3f4:	2000c5b8 	.word	0x2000c5b8
 800e3f8:	2000c5b4 	.word	0x2000c5b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fe:	7d1b      	ldrb	r3, [r3, #20]
 800e400:	2b0a      	cmp	r3, #10
 800e402:	d006      	beq.n	800e412 <tcp_slowtmr+0x5c6>
 800e404:	4b2b      	ldr	r3, [pc, #172]	@ (800e4b4 <tcp_slowtmr+0x668>)
 800e406:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e40a:	492b      	ldr	r1, [pc, #172]	@ (800e4b8 <tcp_slowtmr+0x66c>)
 800e40c:	482b      	ldr	r0, [pc, #172]	@ (800e4bc <tcp_slowtmr+0x670>)
 800e40e:	f7f2 fe5f 	bl	80010d0 <printf>
    pcb_remove = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e418:	4b29      	ldr	r3, [pc, #164]	@ (800e4c0 <tcp_slowtmr+0x674>)
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41e:	6a1b      	ldr	r3, [r3, #32]
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	2bf0      	cmp	r3, #240	@ 0xf0
 800e424:	d904      	bls.n	800e430 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e42a:	3301      	adds	r3, #1
 800e42c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e434:	2b00      	cmp	r3, #0
 800e436:	d02f      	beq.n	800e498 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e438:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e43a:	f000 fbf9 	bl	800ec30 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e440:	2b00      	cmp	r3, #0
 800e442:	d010      	beq.n	800e466 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e444:	4b1f      	ldr	r3, [pc, #124]	@ (800e4c4 <tcp_slowtmr+0x678>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d106      	bne.n	800e45c <tcp_slowtmr+0x610>
 800e44e:	4b19      	ldr	r3, [pc, #100]	@ (800e4b4 <tcp_slowtmr+0x668>)
 800e450:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e454:	491c      	ldr	r1, [pc, #112]	@ (800e4c8 <tcp_slowtmr+0x67c>)
 800e456:	4819      	ldr	r0, [pc, #100]	@ (800e4bc <tcp_slowtmr+0x670>)
 800e458:	f7f2 fe3a 	bl	80010d0 <printf>
        prev->next = pcb->next;
 800e45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e45e:	68da      	ldr	r2, [r3, #12]
 800e460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e462:	60da      	str	r2, [r3, #12]
 800e464:	e00f      	b.n	800e486 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e466:	4b17      	ldr	r3, [pc, #92]	@ (800e4c4 <tcp_slowtmr+0x678>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d006      	beq.n	800e47e <tcp_slowtmr+0x632>
 800e470:	4b10      	ldr	r3, [pc, #64]	@ (800e4b4 <tcp_slowtmr+0x668>)
 800e472:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e476:	4915      	ldr	r1, [pc, #84]	@ (800e4cc <tcp_slowtmr+0x680>)
 800e478:	4810      	ldr	r0, [pc, #64]	@ (800e4bc <tcp_slowtmr+0x670>)
 800e47a:	f7f2 fe29 	bl	80010d0 <printf>
        tcp_tw_pcbs = pcb->next;
 800e47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	4a10      	ldr	r2, [pc, #64]	@ (800e4c4 <tcp_slowtmr+0x678>)
 800e484:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e488:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e490:	69f8      	ldr	r0, [r7, #28]
 800e492:	f7fe ff83 	bl	800d39c <tcp_free>
 800e496:	e004      	b.n	800e4a2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1a9      	bne.n	800e3fc <tcp_slowtmr+0x5b0>
    }
  }
}
 800e4a8:	bf00      	nop
 800e4aa:	bf00      	nop
 800e4ac:	3730      	adds	r7, #48	@ 0x30
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	08018e48 	.word	0x08018e48
 800e4b8:	080192d8 	.word	0x080192d8
 800e4bc:	08018e8c 	.word	0x08018e8c
 800e4c0:	2000c5a4 	.word	0x2000c5a4
 800e4c4:	2000c5b4 	.word	0x2000c5b4
 800e4c8:	08019308 	.word	0x08019308
 800e4cc:	08019330 	.word	0x08019330

0800e4d0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e4d6:	4b2d      	ldr	r3, [pc, #180]	@ (800e58c <tcp_fasttmr+0xbc>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	b2da      	uxtb	r2, r3
 800e4de:	4b2b      	ldr	r3, [pc, #172]	@ (800e58c <tcp_fasttmr+0xbc>)
 800e4e0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e4e2:	4b2b      	ldr	r3, [pc, #172]	@ (800e590 <tcp_fasttmr+0xc0>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e4e8:	e048      	b.n	800e57c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	7f9a      	ldrb	r2, [r3, #30]
 800e4ee:	4b27      	ldr	r3, [pc, #156]	@ (800e58c <tcp_fasttmr+0xbc>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d03f      	beq.n	800e576 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e4f6:	4b25      	ldr	r3, [pc, #148]	@ (800e58c <tcp_fasttmr+0xbc>)
 800e4f8:	781a      	ldrb	r2, [r3, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	8b5b      	ldrh	r3, [r3, #26]
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	d010      	beq.n	800e52c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	8b5b      	ldrh	r3, [r3, #26]
 800e50e:	f043 0302 	orr.w	r3, r3, #2
 800e512:	b29a      	uxth	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f003 ffef 	bl	80124fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	8b5b      	ldrh	r3, [r3, #26]
 800e522:	f023 0303 	bic.w	r3, r3, #3
 800e526:	b29a      	uxth	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	8b5b      	ldrh	r3, [r3, #26]
 800e530:	f003 0308 	and.w	r3, r3, #8
 800e534:	2b00      	cmp	r3, #0
 800e536:	d009      	beq.n	800e54c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	8b5b      	ldrh	r3, [r3, #26]
 800e53c:	f023 0308 	bic.w	r3, r3, #8
 800e540:	b29a      	uxth	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7ff f8bc 	bl	800d6c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00a      	beq.n	800e570 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e55a:	4b0e      	ldr	r3, [pc, #56]	@ (800e594 <tcp_fasttmr+0xc4>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f819 	bl	800e598 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e566:	4b0b      	ldr	r3, [pc, #44]	@ (800e594 <tcp_fasttmr+0xc4>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d000      	beq.n	800e570 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e56e:	e7b8      	b.n	800e4e2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	607b      	str	r3, [r7, #4]
 800e574:	e002      	b.n	800e57c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1b3      	bne.n	800e4ea <tcp_fasttmr+0x1a>
    }
  }
}
 800e582:	bf00      	nop
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	2000c5ba 	.word	0x2000c5ba
 800e590:	2000c5b0 	.word	0x2000c5b0
 800e594:	2000c5b8 	.word	0x2000c5b8

0800e598 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e598:	b590      	push	{r4, r7, lr}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d109      	bne.n	800e5ba <tcp_process_refused_data+0x22>
 800e5a6:	4b37      	ldr	r3, [pc, #220]	@ (800e684 <tcp_process_refused_data+0xec>)
 800e5a8:	f240 6209 	movw	r2, #1545	@ 0x609
 800e5ac:	4936      	ldr	r1, [pc, #216]	@ (800e688 <tcp_process_refused_data+0xf0>)
 800e5ae:	4837      	ldr	r0, [pc, #220]	@ (800e68c <tcp_process_refused_data+0xf4>)
 800e5b0:	f7f2 fd8e 	bl	80010d0 <printf>
 800e5b4:	f06f 030f 	mvn.w	r3, #15
 800e5b8:	e060      	b.n	800e67c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5be:	7b5b      	ldrb	r3, [r3, #13]
 800e5c0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5c6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00b      	beq.n	800e5f0 <tcp_process_refused_data+0x58>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6918      	ldr	r0, [r3, #16]
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	6879      	ldr	r1, [r7, #4]
 800e5e8:	47a0      	blx	r4
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	73fb      	strb	r3, [r7, #15]
 800e5ee:	e007      	b.n	800e600 <tcp_process_refused_data+0x68>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	6879      	ldr	r1, [r7, #4]
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	f000 f8a4 	bl	800e744 <tcp_recv_null>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d12a      	bne.n	800e65e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e608:	7bbb      	ldrb	r3, [r7, #14]
 800e60a:	f003 0320 	and.w	r3, r3, #32
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d033      	beq.n	800e67a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e616:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e61a:	d005      	beq.n	800e628 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e620:	3301      	adds	r3, #1
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00b      	beq.n	800e64a <tcp_process_refused_data+0xb2>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6918      	ldr	r0, [r3, #16]
 800e63c:	2300      	movs	r3, #0
 800e63e:	2200      	movs	r2, #0
 800e640:	6879      	ldr	r1, [r7, #4]
 800e642:	47a0      	blx	r4
 800e644:	4603      	mov	r3, r0
 800e646:	73fb      	strb	r3, [r7, #15]
 800e648:	e001      	b.n	800e64e <tcp_process_refused_data+0xb6>
 800e64a:	2300      	movs	r3, #0
 800e64c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e652:	f113 0f0d 	cmn.w	r3, #13
 800e656:	d110      	bne.n	800e67a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e658:	f06f 030c 	mvn.w	r3, #12
 800e65c:	e00e      	b.n	800e67c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e662:	f113 0f0d 	cmn.w	r3, #13
 800e666:	d102      	bne.n	800e66e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e668:	f06f 030c 	mvn.w	r3, #12
 800e66c:	e006      	b.n	800e67c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e674:	f06f 0304 	mvn.w	r3, #4
 800e678:	e000      	b.n	800e67c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3714      	adds	r7, #20
 800e680:	46bd      	mov	sp, r7
 800e682:	bd90      	pop	{r4, r7, pc}
 800e684:	08018e48 	.word	0x08018e48
 800e688:	08019358 	.word	0x08019358
 800e68c:	08018e8c 	.word	0x08018e8c

0800e690 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e698:	e007      	b.n	800e6aa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 f80a 	bl	800e6ba <tcp_seg_free>
    seg = next;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1f4      	bne.n	800e69a <tcp_segs_free+0xa>
  }
}
 800e6b0:	bf00      	nop
 800e6b2:	bf00      	nop
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b082      	sub	sp, #8
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00c      	beq.n	800e6e2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe fbb5 	bl	800ce44 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e6da:	6879      	ldr	r1, [r7, #4]
 800e6dc:	2003      	movs	r0, #3
 800e6de:	f7fd fd0d 	bl	800c0fc <memp_free>
  }
}
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
	...

0800e6ec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d106      	bne.n	800e708 <tcp_seg_copy+0x1c>
 800e6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e738 <tcp_seg_copy+0x4c>)
 800e6fc:	f240 6282 	movw	r2, #1666	@ 0x682
 800e700:	490e      	ldr	r1, [pc, #56]	@ (800e73c <tcp_seg_copy+0x50>)
 800e702:	480f      	ldr	r0, [pc, #60]	@ (800e740 <tcp_seg_copy+0x54>)
 800e704:	f7f2 fce4 	bl	80010d0 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e708:	2003      	movs	r0, #3
 800e70a:	f7fd fc81 	bl	800c010 <memp_malloc>
 800e70e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d101      	bne.n	800e71a <tcp_seg_copy+0x2e>
    return NULL;
 800e716:	2300      	movs	r3, #0
 800e718:	e00a      	b.n	800e730 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e71a:	2210      	movs	r2, #16
 800e71c:	6879      	ldr	r1, [r7, #4]
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f008 fa11 	bl	8016b46 <memcpy>
  pbuf_ref(cseg->p);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fe fc31 	bl	800cf90 <pbuf_ref>
  return cseg;
 800e72e:	68fb      	ldr	r3, [r7, #12]
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	08018e48 	.word	0x08018e48
 800e73c:	0801939c 	.word	0x0801939c
 800e740:	08018e8c 	.word	0x08018e8c

0800e744 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d109      	bne.n	800e76c <tcp_recv_null+0x28>
 800e758:	4b12      	ldr	r3, [pc, #72]	@ (800e7a4 <tcp_recv_null+0x60>)
 800e75a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e75e:	4912      	ldr	r1, [pc, #72]	@ (800e7a8 <tcp_recv_null+0x64>)
 800e760:	4812      	ldr	r0, [pc, #72]	@ (800e7ac <tcp_recv_null+0x68>)
 800e762:	f7f2 fcb5 	bl	80010d0 <printf>
 800e766:	f06f 030f 	mvn.w	r3, #15
 800e76a:	e016      	b.n	800e79a <tcp_recv_null+0x56>

  if (p != NULL) {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	891b      	ldrh	r3, [r3, #8]
 800e776:	4619      	mov	r1, r3
 800e778:	68b8      	ldr	r0, [r7, #8]
 800e77a:	f7ff f9b9 	bl	800daf0 <tcp_recved>
    pbuf_free(p);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7fe fb60 	bl	800ce44 <pbuf_free>
 800e784:	e008      	b.n	800e798 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d104      	bne.n	800e798 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e78e:	68b8      	ldr	r0, [r7, #8]
 800e790:	f7ff f802 	bl	800d798 <tcp_close>
 800e794:	4603      	mov	r3, r0
 800e796:	e000      	b.n	800e79a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	08018e48 	.word	0x08018e48
 800e7a8:	080193b8 	.word	0x080193b8
 800e7ac:	08018e8c 	.word	0x08018e8c

0800e7b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e7ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	db01      	blt.n	800e7c6 <tcp_kill_prio+0x16>
 800e7c2:	79fb      	ldrb	r3, [r7, #7]
 800e7c4:	e000      	b.n	800e7c8 <tcp_kill_prio+0x18>
 800e7c6:	237f      	movs	r3, #127	@ 0x7f
 800e7c8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e7ca:	7afb      	ldrb	r3, [r7, #11]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d034      	beq.n	800e83a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e7d0:	7afb      	ldrb	r3, [r7, #11]
 800e7d2:	3b01      	subs	r3, #1
 800e7d4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7de:	4b19      	ldr	r3, [pc, #100]	@ (800e844 <tcp_kill_prio+0x94>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	e01f      	b.n	800e826 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	7d5b      	ldrb	r3, [r3, #21]
 800e7ea:	7afa      	ldrb	r2, [r7, #11]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d80c      	bhi.n	800e80a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e7f4:	7afa      	ldrb	r2, [r7, #11]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d112      	bne.n	800e820 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e7fa:	4b13      	ldr	r3, [pc, #76]	@ (800e848 <tcp_kill_prio+0x98>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	6a1b      	ldr	r3, [r3, #32]
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	429a      	cmp	r2, r3
 800e808:	d80a      	bhi.n	800e820 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e80a:	4b0f      	ldr	r3, [pc, #60]	@ (800e848 <tcp_kill_prio+0x98>)
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	6a1b      	ldr	r3, [r3, #32]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	7d5b      	ldrb	r3, [r3, #21]
 800e81e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	617b      	str	r3, [r7, #20]
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1dc      	bne.n	800e7e6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d004      	beq.n	800e83c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e832:	6938      	ldr	r0, [r7, #16]
 800e834:	f7ff f8f6 	bl	800da24 <tcp_abort>
 800e838:	e000      	b.n	800e83c <tcp_kill_prio+0x8c>
    return;
 800e83a:	bf00      	nop
  }
}
 800e83c:	3718      	adds	r7, #24
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	2000c5b0 	.word	0x2000c5b0
 800e848:	2000c5a4 	.word	0x2000c5a4

0800e84c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	4603      	mov	r3, r0
 800e854:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	2b08      	cmp	r3, #8
 800e85a:	d009      	beq.n	800e870 <tcp_kill_state+0x24>
 800e85c:	79fb      	ldrb	r3, [r7, #7]
 800e85e:	2b09      	cmp	r3, #9
 800e860:	d006      	beq.n	800e870 <tcp_kill_state+0x24>
 800e862:	4b1a      	ldr	r3, [pc, #104]	@ (800e8cc <tcp_kill_state+0x80>)
 800e864:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e868:	4919      	ldr	r1, [pc, #100]	@ (800e8d0 <tcp_kill_state+0x84>)
 800e86a:	481a      	ldr	r0, [pc, #104]	@ (800e8d4 <tcp_kill_state+0x88>)
 800e86c:	f7f2 fc30 	bl	80010d0 <printf>

  inactivity = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e874:	2300      	movs	r3, #0
 800e876:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e878:	4b17      	ldr	r3, [pc, #92]	@ (800e8d8 <tcp_kill_state+0x8c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	617b      	str	r3, [r7, #20]
 800e87e:	e017      	b.n	800e8b0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	7d1b      	ldrb	r3, [r3, #20]
 800e884:	79fa      	ldrb	r2, [r7, #7]
 800e886:	429a      	cmp	r2, r3
 800e888:	d10f      	bne.n	800e8aa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e88a:	4b14      	ldr	r3, [pc, #80]	@ (800e8dc <tcp_kill_state+0x90>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	429a      	cmp	r2, r3
 800e898:	d807      	bhi.n	800e8aa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e89a:	4b10      	ldr	r3, [pc, #64]	@ (800e8dc <tcp_kill_state+0x90>)
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	6a1b      	ldr	r3, [r3, #32]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e4      	bne.n	800e880 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e8bc:	2100      	movs	r1, #0
 800e8be:	6938      	ldr	r0, [r7, #16]
 800e8c0:	f7fe fff2 	bl	800d8a8 <tcp_abandon>
  }
}
 800e8c4:	bf00      	nop
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	08018e48 	.word	0x08018e48
 800e8d0:	080193d4 	.word	0x080193d4
 800e8d4:	08018e8c 	.word	0x08018e8c
 800e8d8:	2000c5b0 	.word	0x2000c5b0
 800e8dc:	2000c5a4 	.word	0x2000c5a4

0800e8e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8ee:	4b12      	ldr	r3, [pc, #72]	@ (800e938 <tcp_kill_timewait+0x58>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	60fb      	str	r3, [r7, #12]
 800e8f4:	e012      	b.n	800e91c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e8f6:	4b11      	ldr	r3, [pc, #68]	@ (800e93c <tcp_kill_timewait+0x5c>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	429a      	cmp	r2, r3
 800e904:	d807      	bhi.n	800e916 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e906:	4b0d      	ldr	r3, [pc, #52]	@ (800e93c <tcp_kill_timewait+0x5c>)
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	60fb      	str	r3, [r7, #12]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1e9      	bne.n	800e8f6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e928:	68b8      	ldr	r0, [r7, #8]
 800e92a:	f7ff f87b 	bl	800da24 <tcp_abort>
  }
}
 800e92e:	bf00      	nop
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	2000c5b4 	.word	0x2000c5b4
 800e93c:	2000c5a4 	.word	0x2000c5a4

0800e940 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e946:	4b10      	ldr	r3, [pc, #64]	@ (800e988 <tcp_handle_closepend+0x48>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e94c:	e014      	b.n	800e978 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	8b5b      	ldrh	r3, [r3, #26]
 800e958:	f003 0308 	and.w	r3, r3, #8
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d009      	beq.n	800e974 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	8b5b      	ldrh	r3, [r3, #26]
 800e964:	f023 0308 	bic.w	r3, r3, #8
 800e968:	b29a      	uxth	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7fe fea8 	bl	800d6c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1e7      	bne.n	800e94e <tcp_handle_closepend+0xe>
  }
}
 800e97e:	bf00      	nop
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	2000c5b0 	.word	0x2000c5b0

0800e98c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	4603      	mov	r3, r0
 800e994:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e996:	2001      	movs	r0, #1
 800e998:	f7fd fb3a 	bl	800c010 <memp_malloc>
 800e99c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d126      	bne.n	800e9f2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e9a4:	f7ff ffcc 	bl	800e940 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e9a8:	f7ff ff9a 	bl	800e8e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9ac:	2001      	movs	r0, #1
 800e9ae:	f7fd fb2f 	bl	800c010 <memp_malloc>
 800e9b2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d11b      	bne.n	800e9f2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e9ba:	2009      	movs	r0, #9
 800e9bc:	f7ff ff46 	bl	800e84c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9c0:	2001      	movs	r0, #1
 800e9c2:	f7fd fb25 	bl	800c010 <memp_malloc>
 800e9c6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d111      	bne.n	800e9f2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e9ce:	2008      	movs	r0, #8
 800e9d0:	f7ff ff3c 	bl	800e84c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9d4:	2001      	movs	r0, #1
 800e9d6:	f7fd fb1b 	bl	800c010 <memp_malloc>
 800e9da:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d107      	bne.n	800e9f2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e9e2:	79fb      	ldrb	r3, [r7, #7]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff fee3 	bl	800e7b0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9ea:	2001      	movs	r0, #1
 800e9ec:	f7fd fb10 	bl	800c010 <memp_malloc>
 800e9f0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d03f      	beq.n	800ea78 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e9f8:	229c      	movs	r2, #156	@ 0x9c
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f007 ffd6 	bl	80169ae <memset>
    pcb->prio = prio;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	79fa      	ldrb	r2, [r7, #7]
 800ea06:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea0e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ea18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	22ff      	movs	r2, #255	@ 0xff
 800ea26:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ea2e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2206      	movs	r2, #6
 800ea34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2206      	movs	r2, #6
 800ea3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea44:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ea4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea84 <tcp_alloc+0xf8>)
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ea56:	4b0c      	ldr	r3, [pc, #48]	@ (800ea88 <tcp_alloc+0xfc>)
 800ea58:	781a      	ldrb	r2, [r3, #0]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea64:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4a08      	ldr	r2, [pc, #32]	@ (800ea8c <tcp_alloc+0x100>)
 800ea6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	4a07      	ldr	r2, [pc, #28]	@ (800ea90 <tcp_alloc+0x104>)
 800ea74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ea78:	68fb      	ldr	r3, [r7, #12]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	2000c5a4 	.word	0x2000c5a4
 800ea88:	2000c5ba 	.word	0x2000c5ba
 800ea8c:	0800e745 	.word	0x0800e745
 800ea90:	006ddd00 	.word	0x006ddd00

0800ea94 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ea9e:	2040      	movs	r0, #64	@ 0x40
 800eaa0:	f7ff ff74 	bl	800e98c <tcp_alloc>
 800eaa4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	611a      	str	r2, [r3, #16]
  }
}
 800eac6:	bf00      	nop
 800eac8:	370c      	adds	r7, #12
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
	...

0800ead4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00e      	beq.n	800eb02 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	7d1b      	ldrb	r3, [r3, #20]
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d106      	bne.n	800eafa <tcp_recv+0x26>
 800eaec:	4b07      	ldr	r3, [pc, #28]	@ (800eb0c <tcp_recv+0x38>)
 800eaee:	f240 72df 	movw	r2, #2015	@ 0x7df
 800eaf2:	4907      	ldr	r1, [pc, #28]	@ (800eb10 <tcp_recv+0x3c>)
 800eaf4:	4807      	ldr	r0, [pc, #28]	@ (800eb14 <tcp_recv+0x40>)
 800eaf6:	f7f2 faeb 	bl	80010d0 <printf>
    pcb->recv = recv;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800eb02:	bf00      	nop
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	08018e48 	.word	0x08018e48
 800eb10:	080193e4 	.word	0x080193e4
 800eb14:	08018e8c 	.word	0x08018e8c

0800eb18 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00e      	beq.n	800eb46 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	7d1b      	ldrb	r3, [r3, #20]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d106      	bne.n	800eb3e <tcp_sent+0x26>
 800eb30:	4b07      	ldr	r3, [pc, #28]	@ (800eb50 <tcp_sent+0x38>)
 800eb32:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800eb36:	4907      	ldr	r1, [pc, #28]	@ (800eb54 <tcp_sent+0x3c>)
 800eb38:	4807      	ldr	r0, [pc, #28]	@ (800eb58 <tcp_sent+0x40>)
 800eb3a:	f7f2 fac9 	bl	80010d0 <printf>
    pcb->sent = sent;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	683a      	ldr	r2, [r7, #0]
 800eb42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800eb46:	bf00      	nop
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	08018e48 	.word	0x08018e48
 800eb54:	0801940c 	.word	0x0801940c
 800eb58:	08018e8c 	.word	0x08018e8c

0800eb5c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00e      	beq.n	800eb8a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	7d1b      	ldrb	r3, [r3, #20]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d106      	bne.n	800eb82 <tcp_err+0x26>
 800eb74:	4b07      	ldr	r3, [pc, #28]	@ (800eb94 <tcp_err+0x38>)
 800eb76:	f640 020d 	movw	r2, #2061	@ 0x80d
 800eb7a:	4907      	ldr	r1, [pc, #28]	@ (800eb98 <tcp_err+0x3c>)
 800eb7c:	4807      	ldr	r0, [pc, #28]	@ (800eb9c <tcp_err+0x40>)
 800eb7e:	f7f2 faa7 	bl	80010d0 <printf>
    pcb->errf = err;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	08018e48 	.word	0x08018e48
 800eb98:	08019434 	.word	0x08019434
 800eb9c:	08018e8c 	.word	0x08018e8c

0800eba0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d008      	beq.n	800ebc2 <tcp_accept+0x22>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7d1b      	ldrb	r3, [r3, #20]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d104      	bne.n	800ebc2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	619a      	str	r2, [r3, #24]
  }
}
 800ebc2:	bf00      	nop
 800ebc4:	3714      	adds	r7, #20
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
	...

0800ebd0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	4613      	mov	r3, r2
 800ebdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d107      	bne.n	800ebf4 <tcp_poll+0x24>
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	@ (800ec20 <tcp_poll+0x50>)
 800ebe6:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ebea:	490e      	ldr	r1, [pc, #56]	@ (800ec24 <tcp_poll+0x54>)
 800ebec:	480e      	ldr	r0, [pc, #56]	@ (800ec28 <tcp_poll+0x58>)
 800ebee:	f7f2 fa6f 	bl	80010d0 <printf>
 800ebf2:	e011      	b.n	800ec18 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	7d1b      	ldrb	r3, [r3, #20]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d106      	bne.n	800ec0a <tcp_poll+0x3a>
 800ebfc:	4b08      	ldr	r3, [pc, #32]	@ (800ec20 <tcp_poll+0x50>)
 800ebfe:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ec02:	490a      	ldr	r1, [pc, #40]	@ (800ec2c <tcp_poll+0x5c>)
 800ec04:	4808      	ldr	r0, [pc, #32]	@ (800ec28 <tcp_poll+0x58>)
 800ec06:	f7f2 fa63 	bl	80010d0 <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	79fa      	ldrb	r2, [r7, #7]
 800ec16:	775a      	strb	r2, [r3, #29]
}
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	08018e48 	.word	0x08018e48
 800ec24:	0801945c 	.word	0x0801945c
 800ec28:	08018e8c 	.word	0x08018e8c
 800ec2c:	08019474 	.word	0x08019474

0800ec30 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d107      	bne.n	800ec4e <tcp_pcb_purge+0x1e>
 800ec3e:	4b21      	ldr	r3, [pc, #132]	@ (800ecc4 <tcp_pcb_purge+0x94>)
 800ec40:	f640 0251 	movw	r2, #2129	@ 0x851
 800ec44:	4920      	ldr	r1, [pc, #128]	@ (800ecc8 <tcp_pcb_purge+0x98>)
 800ec46:	4821      	ldr	r0, [pc, #132]	@ (800eccc <tcp_pcb_purge+0x9c>)
 800ec48:	f7f2 fa42 	bl	80010d0 <printf>
 800ec4c:	e037      	b.n	800ecbe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	7d1b      	ldrb	r3, [r3, #20]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d033      	beq.n	800ecbe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ec5a:	2b0a      	cmp	r3, #10
 800ec5c:	d02f      	beq.n	800ecbe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d02b      	beq.n	800ecbe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fe f8e6 	bl	800ce44 <pbuf_free>
      pcb->refused_data = NULL;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d002      	beq.n	800ec8c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 f986 	bl	800ef98 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec92:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fcf9 	bl	800e690 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7ff fcf4 	bl	800e690 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	08018e48 	.word	0x08018e48
 800ecc8:	08019494 	.word	0x08019494
 800eccc:	08018e8c 	.word	0x08018e8c

0800ecd0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d106      	bne.n	800ecee <tcp_pcb_remove+0x1e>
 800ece0:	4b3e      	ldr	r3, [pc, #248]	@ (800eddc <tcp_pcb_remove+0x10c>)
 800ece2:	f640 0283 	movw	r2, #2179	@ 0x883
 800ece6:	493e      	ldr	r1, [pc, #248]	@ (800ede0 <tcp_pcb_remove+0x110>)
 800ece8:	483e      	ldr	r0, [pc, #248]	@ (800ede4 <tcp_pcb_remove+0x114>)
 800ecea:	f7f2 f9f1 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d106      	bne.n	800ed02 <tcp_pcb_remove+0x32>
 800ecf4:	4b39      	ldr	r3, [pc, #228]	@ (800eddc <tcp_pcb_remove+0x10c>)
 800ecf6:	f640 0284 	movw	r2, #2180	@ 0x884
 800ecfa:	493b      	ldr	r1, [pc, #236]	@ (800ede8 <tcp_pcb_remove+0x118>)
 800ecfc:	4839      	ldr	r0, [pc, #228]	@ (800ede4 <tcp_pcb_remove+0x114>)
 800ecfe:	f7f2 f9e7 	bl	80010d0 <printf>

  TCP_RMV(pcblist, pcb);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	683a      	ldr	r2, [r7, #0]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d105      	bne.n	800ed18 <tcp_pcb_remove+0x48>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68da      	ldr	r2, [r3, #12]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	e013      	b.n	800ed40 <tcp_pcb_remove+0x70>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	60fb      	str	r3, [r7, #12]
 800ed1e:	e00c      	b.n	800ed3a <tcp_pcb_remove+0x6a>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d104      	bne.n	800ed34 <tcp_pcb_remove+0x64>
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	68da      	ldr	r2, [r3, #12]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	60da      	str	r2, [r3, #12]
 800ed32:	e005      	b.n	800ed40 <tcp_pcb_remove+0x70>
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	60fb      	str	r3, [r7, #12]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1ef      	bne.n	800ed20 <tcp_pcb_remove+0x50>
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	2200      	movs	r2, #0
 800ed44:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ed46:	6838      	ldr	r0, [r7, #0]
 800ed48:	f7ff ff72 	bl	800ec30 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	7d1b      	ldrb	r3, [r3, #20]
 800ed50:	2b0a      	cmp	r3, #10
 800ed52:	d013      	beq.n	800ed7c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d00f      	beq.n	800ed7c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	8b5b      	ldrh	r3, [r3, #26]
 800ed60:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d009      	beq.n	800ed7c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	8b5b      	ldrh	r3, [r3, #26]
 800ed6c:	f043 0302 	orr.w	r3, r3, #2
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed76:	6838      	ldr	r0, [r7, #0]
 800ed78:	f003 fbc0 	bl	80124fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	7d1b      	ldrb	r3, [r3, #20]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d020      	beq.n	800edc6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d006      	beq.n	800ed9a <tcp_pcb_remove+0xca>
 800ed8c:	4b13      	ldr	r3, [pc, #76]	@ (800eddc <tcp_pcb_remove+0x10c>)
 800ed8e:	f640 0293 	movw	r2, #2195	@ 0x893
 800ed92:	4916      	ldr	r1, [pc, #88]	@ (800edec <tcp_pcb_remove+0x11c>)
 800ed94:	4813      	ldr	r0, [pc, #76]	@ (800ede4 <tcp_pcb_remove+0x114>)
 800ed96:	f7f2 f99b 	bl	80010d0 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d006      	beq.n	800edb0 <tcp_pcb_remove+0xe0>
 800eda2:	4b0e      	ldr	r3, [pc, #56]	@ (800eddc <tcp_pcb_remove+0x10c>)
 800eda4:	f640 0294 	movw	r2, #2196	@ 0x894
 800eda8:	4911      	ldr	r1, [pc, #68]	@ (800edf0 <tcp_pcb_remove+0x120>)
 800edaa:	480e      	ldr	r0, [pc, #56]	@ (800ede4 <tcp_pcb_remove+0x114>)
 800edac:	f7f2 f990 	bl	80010d0 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d006      	beq.n	800edc6 <tcp_pcb_remove+0xf6>
 800edb8:	4b08      	ldr	r3, [pc, #32]	@ (800eddc <tcp_pcb_remove+0x10c>)
 800edba:	f640 0296 	movw	r2, #2198	@ 0x896
 800edbe:	490d      	ldr	r1, [pc, #52]	@ (800edf4 <tcp_pcb_remove+0x124>)
 800edc0:	4808      	ldr	r0, [pc, #32]	@ (800ede4 <tcp_pcb_remove+0x114>)
 800edc2:	f7f2 f985 	bl	80010d0 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2200      	movs	r2, #0
 800edca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	2200      	movs	r2, #0
 800edd0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800edd2:	bf00      	nop
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	08018e48 	.word	0x08018e48
 800ede0:	080194b0 	.word	0x080194b0
 800ede4:	08018e8c 	.word	0x08018e8c
 800ede8:	080194cc 	.word	0x080194cc
 800edec:	080194ec 	.word	0x080194ec
 800edf0:	08019504 	.word	0x08019504
 800edf4:	08019520 	.word	0x08019520

0800edf8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <tcp_next_iss+0x1c>
 800ee06:	4b0a      	ldr	r3, [pc, #40]	@ (800ee30 <tcp_next_iss+0x38>)
 800ee08:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ee0c:	4909      	ldr	r1, [pc, #36]	@ (800ee34 <tcp_next_iss+0x3c>)
 800ee0e:	480a      	ldr	r0, [pc, #40]	@ (800ee38 <tcp_next_iss+0x40>)
 800ee10:	f7f2 f95e 	bl	80010d0 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ee14:	4b09      	ldr	r3, [pc, #36]	@ (800ee3c <tcp_next_iss+0x44>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	4b09      	ldr	r3, [pc, #36]	@ (800ee40 <tcp_next_iss+0x48>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	4a07      	ldr	r2, [pc, #28]	@ (800ee3c <tcp_next_iss+0x44>)
 800ee20:	6013      	str	r3, [r2, #0]
  return iss;
 800ee22:	4b06      	ldr	r3, [pc, #24]	@ (800ee3c <tcp_next_iss+0x44>)
 800ee24:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	08018e48 	.word	0x08018e48
 800ee34:	08019538 	.word	0x08019538
 800ee38:	08018e8c 	.word	0x08018e8c
 800ee3c:	20000028 	.word	0x20000028
 800ee40:	2000c5a4 	.word	0x2000c5a4

0800ee44 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	607a      	str	r2, [r7, #4]
 800ee50:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d106      	bne.n	800ee66 <tcp_eff_send_mss_netif+0x22>
 800ee58:	4b14      	ldr	r3, [pc, #80]	@ (800eeac <tcp_eff_send_mss_netif+0x68>)
 800ee5a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ee5e:	4914      	ldr	r1, [pc, #80]	@ (800eeb0 <tcp_eff_send_mss_netif+0x6c>)
 800ee60:	4814      	ldr	r0, [pc, #80]	@ (800eeb4 <tcp_eff_send_mss_netif+0x70>)
 800ee62:	f7f2 f935 	bl	80010d0 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ee6c:	89fb      	ldrh	r3, [r7, #14]
 800ee6e:	e019      	b.n	800eea4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ee74:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ee76:	8afb      	ldrh	r3, [r7, #22]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d012      	beq.n	800eea2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ee7c:	2328      	movs	r3, #40	@ 0x28
 800ee7e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ee80:	8afa      	ldrh	r2, [r7, #22]
 800ee82:	8abb      	ldrh	r3, [r7, #20]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d904      	bls.n	800ee92 <tcp_eff_send_mss_netif+0x4e>
 800ee88:	8afa      	ldrh	r2, [r7, #22]
 800ee8a:	8abb      	ldrh	r3, [r7, #20]
 800ee8c:	1ad3      	subs	r3, r2, r3
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	e000      	b.n	800ee94 <tcp_eff_send_mss_netif+0x50>
 800ee92:	2300      	movs	r3, #0
 800ee94:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ee96:	8a7a      	ldrh	r2, [r7, #18]
 800ee98:	89fb      	ldrh	r3, [r7, #14]
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	bf28      	it	cs
 800ee9e:	4613      	movcs	r3, r2
 800eea0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eea2:	89fb      	ldrh	r3, [r7, #14]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3718      	adds	r7, #24
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	08018e48 	.word	0x08018e48
 800eeb0:	08019554 	.word	0x08019554
 800eeb4:	08018e8c 	.word	0x08018e8c

0800eeb8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d119      	bne.n	800ef00 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eecc:	4b10      	ldr	r3, [pc, #64]	@ (800ef10 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eece:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800eed2:	4910      	ldr	r1, [pc, #64]	@ (800ef14 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eed4:	4810      	ldr	r0, [pc, #64]	@ (800ef18 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eed6:	f7f2 f8fb 	bl	80010d0 <printf>

  while (pcb != NULL) {
 800eeda:	e011      	b.n	800ef00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d108      	bne.n	800eefa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f7fe fd98 	bl	800da24 <tcp_abort>
      pcb = next;
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	e002      	b.n	800ef00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1ea      	bne.n	800eedc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ef06:	bf00      	nop
 800ef08:	bf00      	nop
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	08018e48 	.word	0x08018e48
 800ef14:	0801957c 	.word	0x0801957c
 800ef18:	08018e8c 	.word	0x08018e8c

0800ef1c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d02a      	beq.n	800ef82 <tcp_netif_ip_addr_changed+0x66>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d026      	beq.n	800ef82 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ef34:	4b15      	ldr	r3, [pc, #84]	@ (800ef8c <tcp_netif_ip_addr_changed+0x70>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7ff ffbc 	bl	800eeb8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ef40:	4b13      	ldr	r3, [pc, #76]	@ (800ef90 <tcp_netif_ip_addr_changed+0x74>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4619      	mov	r1, r3
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff ffb6 	bl	800eeb8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d017      	beq.n	800ef82 <tcp_netif_ip_addr_changed+0x66>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d013      	beq.n	800ef82 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ef94 <tcp_netif_ip_addr_changed+0x78>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	e00c      	b.n	800ef7c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d103      	bne.n	800ef76 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	60fb      	str	r3, [r7, #12]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1ef      	bne.n	800ef62 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ef82:	bf00      	nop
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	2000c5b0 	.word	0x2000c5b0
 800ef90:	2000c5a8 	.word	0x2000c5a8
 800ef94:	2000c5ac 	.word	0x2000c5ac

0800ef98 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d007      	beq.n	800efb8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efac:	4618      	mov	r0, r3
 800efae:	f7ff fb6f 	bl	800e690 <tcp_segs_free>
    pcb->ooseq = NULL;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800efb8:	bf00      	nop
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800efc0:	b590      	push	{r4, r7, lr}
 800efc2:	b08d      	sub	sp, #52	@ 0x34
 800efc4:	af04      	add	r7, sp, #16
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d105      	bne.n	800efdc <tcp_input+0x1c>
 800efd0:	4b9b      	ldr	r3, [pc, #620]	@ (800f240 <tcp_input+0x280>)
 800efd2:	2283      	movs	r2, #131	@ 0x83
 800efd4:	499b      	ldr	r1, [pc, #620]	@ (800f244 <tcp_input+0x284>)
 800efd6:	489c      	ldr	r0, [pc, #624]	@ (800f248 <tcp_input+0x288>)
 800efd8:	f7f2 f87a 	bl	80010d0 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	4a9a      	ldr	r2, [pc, #616]	@ (800f24c <tcp_input+0x28c>)
 800efe2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	895b      	ldrh	r3, [r3, #10]
 800efe8:	2b13      	cmp	r3, #19
 800efea:	f240 83d1 	bls.w	800f790 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800efee:	4b98      	ldr	r3, [pc, #608]	@ (800f250 <tcp_input+0x290>)
 800eff0:	695b      	ldr	r3, [r3, #20]
 800eff2:	4a97      	ldr	r2, [pc, #604]	@ (800f250 <tcp_input+0x290>)
 800eff4:	6812      	ldr	r2, [r2, #0]
 800eff6:	4611      	mov	r1, r2
 800eff8:	4618      	mov	r0, r3
 800effa:	f006 fa4d 	bl	8015498 <ip4_addr_isbroadcast_u32>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	f040 83c7 	bne.w	800f794 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f006:	4b92      	ldr	r3, [pc, #584]	@ (800f250 <tcp_input+0x290>)
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f00e:	2be0      	cmp	r3, #224	@ 0xe0
 800f010:	f000 83c0 	beq.w	800f794 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f014:	4b8d      	ldr	r3, [pc, #564]	@ (800f24c <tcp_input+0x28c>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	899b      	ldrh	r3, [r3, #12]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fc fb1f 	bl	800b660 <lwip_htons>
 800f022:	4603      	mov	r3, r0
 800f024:	0b1b      	lsrs	r3, r3, #12
 800f026:	b29b      	uxth	r3, r3
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f02e:	7cbb      	ldrb	r3, [r7, #18]
 800f030:	2b13      	cmp	r3, #19
 800f032:	f240 83b1 	bls.w	800f798 <tcp_input+0x7d8>
 800f036:	7cbb      	ldrb	r3, [r7, #18]
 800f038:	b29a      	uxth	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	891b      	ldrh	r3, [r3, #8]
 800f03e:	429a      	cmp	r2, r3
 800f040:	f200 83aa 	bhi.w	800f798 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f044:	7cbb      	ldrb	r3, [r7, #18]
 800f046:	b29b      	uxth	r3, r3
 800f048:	3b14      	subs	r3, #20
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	4b81      	ldr	r3, [pc, #516]	@ (800f254 <tcp_input+0x294>)
 800f04e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f050:	4b81      	ldr	r3, [pc, #516]	@ (800f258 <tcp_input+0x298>)
 800f052:	2200      	movs	r2, #0
 800f054:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	895a      	ldrh	r2, [r3, #10]
 800f05a:	7cbb      	ldrb	r3, [r7, #18]
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	429a      	cmp	r2, r3
 800f060:	d309      	bcc.n	800f076 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f062:	4b7c      	ldr	r3, [pc, #496]	@ (800f254 <tcp_input+0x294>)
 800f064:	881a      	ldrh	r2, [r3, #0]
 800f066:	4b7d      	ldr	r3, [pc, #500]	@ (800f25c <tcp_input+0x29c>)
 800f068:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f06a:	7cbb      	ldrb	r3, [r7, #18]
 800f06c:	4619      	mov	r1, r3
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7fd fe62 	bl	800cd38 <pbuf_remove_header>
 800f074:	e04e      	b.n	800f114 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d105      	bne.n	800f08a <tcp_input+0xca>
 800f07e:	4b70      	ldr	r3, [pc, #448]	@ (800f240 <tcp_input+0x280>)
 800f080:	22c2      	movs	r2, #194	@ 0xc2
 800f082:	4977      	ldr	r1, [pc, #476]	@ (800f260 <tcp_input+0x2a0>)
 800f084:	4870      	ldr	r0, [pc, #448]	@ (800f248 <tcp_input+0x288>)
 800f086:	f7f2 f823 	bl	80010d0 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f08a:	2114      	movs	r1, #20
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7fd fe53 	bl	800cd38 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	895a      	ldrh	r2, [r3, #10]
 800f096:	4b71      	ldr	r3, [pc, #452]	@ (800f25c <tcp_input+0x29c>)
 800f098:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f09a:	4b6e      	ldr	r3, [pc, #440]	@ (800f254 <tcp_input+0x294>)
 800f09c:	881a      	ldrh	r2, [r3, #0]
 800f09e:	4b6f      	ldr	r3, [pc, #444]	@ (800f25c <tcp_input+0x29c>)
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f0a6:	4b6d      	ldr	r3, [pc, #436]	@ (800f25c <tcp_input+0x29c>)
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7fd fe43 	bl	800cd38 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	895b      	ldrh	r3, [r3, #10]
 800f0b8:	8a3a      	ldrh	r2, [r7, #16]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	f200 836e 	bhi.w	800f79c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	4a64      	ldr	r2, [pc, #400]	@ (800f258 <tcp_input+0x298>)
 800f0c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	8a3a      	ldrh	r2, [r7, #16]
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fd fe30 	bl	800cd38 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	891a      	ldrh	r2, [r3, #8]
 800f0dc:	8a3b      	ldrh	r3, [r7, #16]
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	895b      	ldrh	r3, [r3, #10]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d005      	beq.n	800f0fa <tcp_input+0x13a>
 800f0ee:	4b54      	ldr	r3, [pc, #336]	@ (800f240 <tcp_input+0x280>)
 800f0f0:	22df      	movs	r2, #223	@ 0xdf
 800f0f2:	495c      	ldr	r1, [pc, #368]	@ (800f264 <tcp_input+0x2a4>)
 800f0f4:	4854      	ldr	r0, [pc, #336]	@ (800f248 <tcp_input+0x288>)
 800f0f6:	f7f1 ffeb 	bl	80010d0 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	891a      	ldrh	r2, [r3, #8]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	891b      	ldrh	r3, [r3, #8]
 800f104:	429a      	cmp	r2, r3
 800f106:	d005      	beq.n	800f114 <tcp_input+0x154>
 800f108:	4b4d      	ldr	r3, [pc, #308]	@ (800f240 <tcp_input+0x280>)
 800f10a:	22e0      	movs	r2, #224	@ 0xe0
 800f10c:	4956      	ldr	r1, [pc, #344]	@ (800f268 <tcp_input+0x2a8>)
 800f10e:	484e      	ldr	r0, [pc, #312]	@ (800f248 <tcp_input+0x288>)
 800f110:	f7f1 ffde 	bl	80010d0 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f114:	4b4d      	ldr	r3, [pc, #308]	@ (800f24c <tcp_input+0x28c>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	4a4b      	ldr	r2, [pc, #300]	@ (800f24c <tcp_input+0x28c>)
 800f11e:	6814      	ldr	r4, [r2, #0]
 800f120:	4618      	mov	r0, r3
 800f122:	f7fc fa9d 	bl	800b660 <lwip_htons>
 800f126:	4603      	mov	r3, r0
 800f128:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f12a:	4b48      	ldr	r3, [pc, #288]	@ (800f24c <tcp_input+0x28c>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	885b      	ldrh	r3, [r3, #2]
 800f130:	b29b      	uxth	r3, r3
 800f132:	4a46      	ldr	r2, [pc, #280]	@ (800f24c <tcp_input+0x28c>)
 800f134:	6814      	ldr	r4, [r2, #0]
 800f136:	4618      	mov	r0, r3
 800f138:	f7fc fa92 	bl	800b660 <lwip_htons>
 800f13c:	4603      	mov	r3, r0
 800f13e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f140:	4b42      	ldr	r3, [pc, #264]	@ (800f24c <tcp_input+0x28c>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	4a41      	ldr	r2, [pc, #260]	@ (800f24c <tcp_input+0x28c>)
 800f148:	6814      	ldr	r4, [r2, #0]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fc fa9d 	bl	800b68a <lwip_htonl>
 800f150:	4603      	mov	r3, r0
 800f152:	6063      	str	r3, [r4, #4]
 800f154:	6863      	ldr	r3, [r4, #4]
 800f156:	4a45      	ldr	r2, [pc, #276]	@ (800f26c <tcp_input+0x2ac>)
 800f158:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f15a:	4b3c      	ldr	r3, [pc, #240]	@ (800f24c <tcp_input+0x28c>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	4a3a      	ldr	r2, [pc, #232]	@ (800f24c <tcp_input+0x28c>)
 800f162:	6814      	ldr	r4, [r2, #0]
 800f164:	4618      	mov	r0, r3
 800f166:	f7fc fa90 	bl	800b68a <lwip_htonl>
 800f16a:	4603      	mov	r3, r0
 800f16c:	60a3      	str	r3, [r4, #8]
 800f16e:	68a3      	ldr	r3, [r4, #8]
 800f170:	4a3f      	ldr	r2, [pc, #252]	@ (800f270 <tcp_input+0x2b0>)
 800f172:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f174:	4b35      	ldr	r3, [pc, #212]	@ (800f24c <tcp_input+0x28c>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	89db      	ldrh	r3, [r3, #14]
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	4a33      	ldr	r2, [pc, #204]	@ (800f24c <tcp_input+0x28c>)
 800f17e:	6814      	ldr	r4, [r2, #0]
 800f180:	4618      	mov	r0, r3
 800f182:	f7fc fa6d 	bl	800b660 <lwip_htons>
 800f186:	4603      	mov	r3, r0
 800f188:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f18a:	4b30      	ldr	r3, [pc, #192]	@ (800f24c <tcp_input+0x28c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	899b      	ldrh	r3, [r3, #12]
 800f190:	b29b      	uxth	r3, r3
 800f192:	4618      	mov	r0, r3
 800f194:	f7fc fa64 	bl	800b660 <lwip_htons>
 800f198:	4603      	mov	r3, r0
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	4b34      	ldr	r3, [pc, #208]	@ (800f274 <tcp_input+0x2b4>)
 800f1a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	891a      	ldrh	r2, [r3, #8]
 800f1aa:	4b33      	ldr	r3, [pc, #204]	@ (800f278 <tcp_input+0x2b8>)
 800f1ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f1ae:	4b31      	ldr	r3, [pc, #196]	@ (800f274 <tcp_input+0x2b4>)
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	f003 0303 	and.w	r3, r3, #3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00c      	beq.n	800f1d4 <tcp_input+0x214>
    tcplen++;
 800f1ba:	4b2f      	ldr	r3, [pc, #188]	@ (800f278 <tcp_input+0x2b8>)
 800f1bc:	881b      	ldrh	r3, [r3, #0]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	4b2d      	ldr	r3, [pc, #180]	@ (800f278 <tcp_input+0x2b8>)
 800f1c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	891a      	ldrh	r2, [r3, #8]
 800f1ca:	4b2b      	ldr	r3, [pc, #172]	@ (800f278 <tcp_input+0x2b8>)
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	f200 82e6 	bhi.w	800f7a0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1d8:	4b28      	ldr	r3, [pc, #160]	@ (800f27c <tcp_input+0x2bc>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	61fb      	str	r3, [r7, #28]
 800f1de:	e09d      	b.n	800f31c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	7d1b      	ldrb	r3, [r3, #20]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d105      	bne.n	800f1f4 <tcp_input+0x234>
 800f1e8:	4b15      	ldr	r3, [pc, #84]	@ (800f240 <tcp_input+0x280>)
 800f1ea:	22fb      	movs	r2, #251	@ 0xfb
 800f1ec:	4924      	ldr	r1, [pc, #144]	@ (800f280 <tcp_input+0x2c0>)
 800f1ee:	4816      	ldr	r0, [pc, #88]	@ (800f248 <tcp_input+0x288>)
 800f1f0:	f7f1 ff6e 	bl	80010d0 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	7d1b      	ldrb	r3, [r3, #20]
 800f1f8:	2b0a      	cmp	r3, #10
 800f1fa:	d105      	bne.n	800f208 <tcp_input+0x248>
 800f1fc:	4b10      	ldr	r3, [pc, #64]	@ (800f240 <tcp_input+0x280>)
 800f1fe:	22fc      	movs	r2, #252	@ 0xfc
 800f200:	4920      	ldr	r1, [pc, #128]	@ (800f284 <tcp_input+0x2c4>)
 800f202:	4811      	ldr	r0, [pc, #68]	@ (800f248 <tcp_input+0x288>)
 800f204:	f7f1 ff64 	bl	80010d0 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	7d1b      	ldrb	r3, [r3, #20]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d105      	bne.n	800f21c <tcp_input+0x25c>
 800f210:	4b0b      	ldr	r3, [pc, #44]	@ (800f240 <tcp_input+0x280>)
 800f212:	22fd      	movs	r2, #253	@ 0xfd
 800f214:	491c      	ldr	r1, [pc, #112]	@ (800f288 <tcp_input+0x2c8>)
 800f216:	480c      	ldr	r0, [pc, #48]	@ (800f248 <tcp_input+0x288>)
 800f218:	f7f1 ff5a 	bl	80010d0 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	7a1b      	ldrb	r3, [r3, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d033      	beq.n	800f28c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	7a1a      	ldrb	r2, [r3, #8]
 800f228:	4b09      	ldr	r3, [pc, #36]	@ (800f250 <tcp_input+0x290>)
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f230:	3301      	adds	r3, #1
 800f232:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f234:	429a      	cmp	r2, r3
 800f236:	d029      	beq.n	800f28c <tcp_input+0x2cc>
      prev = pcb;
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	61bb      	str	r3, [r7, #24]
      continue;
 800f23c:	e06b      	b.n	800f316 <tcp_input+0x356>
 800f23e:	bf00      	nop
 800f240:	080195b0 	.word	0x080195b0
 800f244:	080195e4 	.word	0x080195e4
 800f248:	080195fc 	.word	0x080195fc
 800f24c:	2000c5cc 	.word	0x2000c5cc
 800f250:	20008e50 	.word	0x20008e50
 800f254:	2000c5d0 	.word	0x2000c5d0
 800f258:	2000c5d4 	.word	0x2000c5d4
 800f25c:	2000c5d2 	.word	0x2000c5d2
 800f260:	08019624 	.word	0x08019624
 800f264:	08019634 	.word	0x08019634
 800f268:	08019640 	.word	0x08019640
 800f26c:	2000c5dc 	.word	0x2000c5dc
 800f270:	2000c5e0 	.word	0x2000c5e0
 800f274:	2000c5e8 	.word	0x2000c5e8
 800f278:	2000c5e6 	.word	0x2000c5e6
 800f27c:	2000c5b0 	.word	0x2000c5b0
 800f280:	08019660 	.word	0x08019660
 800f284:	08019688 	.word	0x08019688
 800f288:	080196b4 	.word	0x080196b4
    }

    if (pcb->remote_port == tcphdr->src &&
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	8b1a      	ldrh	r2, [r3, #24]
 800f290:	4b72      	ldr	r3, [pc, #456]	@ (800f45c <tcp_input+0x49c>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	881b      	ldrh	r3, [r3, #0]
 800f296:	b29b      	uxth	r3, r3
 800f298:	429a      	cmp	r2, r3
 800f29a:	d13a      	bne.n	800f312 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	8ada      	ldrh	r2, [r3, #22]
 800f2a0:	4b6e      	ldr	r3, [pc, #440]	@ (800f45c <tcp_input+0x49c>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	885b      	ldrh	r3, [r3, #2]
 800f2a6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d132      	bne.n	800f312 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	4b6b      	ldr	r3, [pc, #428]	@ (800f460 <tcp_input+0x4a0>)
 800f2b2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d12c      	bne.n	800f312 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	4b68      	ldr	r3, [pc, #416]	@ (800f460 <tcp_input+0x4a0>)
 800f2be:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d126      	bne.n	800f312 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	69fa      	ldr	r2, [r7, #28]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d106      	bne.n	800f2dc <tcp_input+0x31c>
 800f2ce:	4b65      	ldr	r3, [pc, #404]	@ (800f464 <tcp_input+0x4a4>)
 800f2d0:	f240 120d 	movw	r2, #269	@ 0x10d
 800f2d4:	4964      	ldr	r1, [pc, #400]	@ (800f468 <tcp_input+0x4a8>)
 800f2d6:	4865      	ldr	r0, [pc, #404]	@ (800f46c <tcp_input+0x4ac>)
 800f2d8:	f7f1 fefa 	bl	80010d0 <printf>
      if (prev != NULL) {
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00a      	beq.n	800f2f8 <tcp_input+0x338>
        prev->next = pcb->next;
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	68da      	ldr	r2, [r3, #12]
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f2ea:	4b61      	ldr	r3, [pc, #388]	@ (800f470 <tcp_input+0x4b0>)
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f2f2:	4a5f      	ldr	r2, [pc, #380]	@ (800f470 <tcp_input+0x4b0>)
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	69fa      	ldr	r2, [r7, #28]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d111      	bne.n	800f326 <tcp_input+0x366>
 800f302:	4b58      	ldr	r3, [pc, #352]	@ (800f464 <tcp_input+0x4a4>)
 800f304:	f240 1215 	movw	r2, #277	@ 0x115
 800f308:	495a      	ldr	r1, [pc, #360]	@ (800f474 <tcp_input+0x4b4>)
 800f30a:	4858      	ldr	r0, [pc, #352]	@ (800f46c <tcp_input+0x4ac>)
 800f30c:	f7f1 fee0 	bl	80010d0 <printf>
      break;
 800f310:	e009      	b.n	800f326 <tcp_input+0x366>
    }
    prev = pcb;
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	61fb      	str	r3, [r7, #28]
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f47f af5e 	bne.w	800f1e0 <tcp_input+0x220>
 800f324:	e000      	b.n	800f328 <tcp_input+0x368>
      break;
 800f326:	bf00      	nop
  }

  if (pcb == NULL) {
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	f040 80aa 	bne.w	800f484 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f330:	4b51      	ldr	r3, [pc, #324]	@ (800f478 <tcp_input+0x4b8>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	61fb      	str	r3, [r7, #28]
 800f336:	e03f      	b.n	800f3b8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	7d1b      	ldrb	r3, [r3, #20]
 800f33c:	2b0a      	cmp	r3, #10
 800f33e:	d006      	beq.n	800f34e <tcp_input+0x38e>
 800f340:	4b48      	ldr	r3, [pc, #288]	@ (800f464 <tcp_input+0x4a4>)
 800f342:	f240 121f 	movw	r2, #287	@ 0x11f
 800f346:	494d      	ldr	r1, [pc, #308]	@ (800f47c <tcp_input+0x4bc>)
 800f348:	4848      	ldr	r0, [pc, #288]	@ (800f46c <tcp_input+0x4ac>)
 800f34a:	f7f1 fec1 	bl	80010d0 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	7a1b      	ldrb	r3, [r3, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d009      	beq.n	800f36a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	7a1a      	ldrb	r2, [r3, #8]
 800f35a:	4b41      	ldr	r3, [pc, #260]	@ (800f460 <tcp_input+0x4a0>)
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f362:	3301      	adds	r3, #1
 800f364:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f366:	429a      	cmp	r2, r3
 800f368:	d122      	bne.n	800f3b0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	8b1a      	ldrh	r2, [r3, #24]
 800f36e:	4b3b      	ldr	r3, [pc, #236]	@ (800f45c <tcp_input+0x49c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	b29b      	uxth	r3, r3
 800f376:	429a      	cmp	r2, r3
 800f378:	d11b      	bne.n	800f3b2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	8ada      	ldrh	r2, [r3, #22]
 800f37e:	4b37      	ldr	r3, [pc, #220]	@ (800f45c <tcp_input+0x49c>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	885b      	ldrh	r3, [r3, #2]
 800f384:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f386:	429a      	cmp	r2, r3
 800f388:	d113      	bne.n	800f3b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	685a      	ldr	r2, [r3, #4]
 800f38e:	4b34      	ldr	r3, [pc, #208]	@ (800f460 <tcp_input+0x4a0>)
 800f390:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f392:	429a      	cmp	r2, r3
 800f394:	d10d      	bne.n	800f3b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	4b31      	ldr	r3, [pc, #196]	@ (800f460 <tcp_input+0x4a0>)
 800f39c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d107      	bne.n	800f3b2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f3a2:	69f8      	ldr	r0, [r7, #28]
 800f3a4:	f000 fb56 	bl	800fa54 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7fd fd4b 	bl	800ce44 <pbuf_free>
        return;
 800f3ae:	e1fd      	b.n	800f7ac <tcp_input+0x7ec>
        continue;
 800f3b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	61fb      	str	r3, [r7, #28]
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1bc      	bne.n	800f338 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3c2:	4b2f      	ldr	r3, [pc, #188]	@ (800f480 <tcp_input+0x4c0>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	617b      	str	r3, [r7, #20]
 800f3c8:	e02a      	b.n	800f420 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	7a1b      	ldrb	r3, [r3, #8]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00c      	beq.n	800f3ec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	7a1a      	ldrb	r2, [r3, #8]
 800f3d6:	4b22      	ldr	r3, [pc, #136]	@ (800f460 <tcp_input+0x4a0>)
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f3de:	3301      	adds	r3, #1
 800f3e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d002      	beq.n	800f3ec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	61bb      	str	r3, [r7, #24]
        continue;
 800f3ea:	e016      	b.n	800f41a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	8ada      	ldrh	r2, [r3, #22]
 800f3f0:	4b1a      	ldr	r3, [pc, #104]	@ (800f45c <tcp_input+0x49c>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	885b      	ldrh	r3, [r3, #2]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d10c      	bne.n	800f416 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	4b17      	ldr	r3, [pc, #92]	@ (800f460 <tcp_input+0x4a0>)
 800f402:	695b      	ldr	r3, [r3, #20]
 800f404:	429a      	cmp	r2, r3
 800f406:	d00f      	beq.n	800f428 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00d      	beq.n	800f42a <tcp_input+0x46a>
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d009      	beq.n	800f42a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1d1      	bne.n	800f3ca <tcp_input+0x40a>
 800f426:	e000      	b.n	800f42a <tcp_input+0x46a>
            break;
 800f428:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d029      	beq.n	800f484 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00a      	beq.n	800f44c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	68da      	ldr	r2, [r3, #12]
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f43e:	4b10      	ldr	r3, [pc, #64]	@ (800f480 <tcp_input+0x4c0>)
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f446:	4a0e      	ldr	r2, [pc, #56]	@ (800f480 <tcp_input+0x4c0>)
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f44c:	6978      	ldr	r0, [r7, #20]
 800f44e:	f000 fa03 	bl	800f858 <tcp_listen_input>
      }
      pbuf_free(p);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7fd fcf6 	bl	800ce44 <pbuf_free>
      return;
 800f458:	e1a8      	b.n	800f7ac <tcp_input+0x7ec>
 800f45a:	bf00      	nop
 800f45c:	2000c5cc 	.word	0x2000c5cc
 800f460:	20008e50 	.word	0x20008e50
 800f464:	080195b0 	.word	0x080195b0
 800f468:	080196dc 	.word	0x080196dc
 800f46c:	080195fc 	.word	0x080195fc
 800f470:	2000c5b0 	.word	0x2000c5b0
 800f474:	08019708 	.word	0x08019708
 800f478:	2000c5b4 	.word	0x2000c5b4
 800f47c:	08019734 	.word	0x08019734
 800f480:	2000c5ac 	.word	0x2000c5ac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	2b00      	cmp	r3, #0
 800f488:	f000 8158 	beq.w	800f73c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f48c:	4b95      	ldr	r3, [pc, #596]	@ (800f6e4 <tcp_input+0x724>)
 800f48e:	2200      	movs	r2, #0
 800f490:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	891a      	ldrh	r2, [r3, #8]
 800f496:	4b93      	ldr	r3, [pc, #588]	@ (800f6e4 <tcp_input+0x724>)
 800f498:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f49a:	4a92      	ldr	r2, [pc, #584]	@ (800f6e4 <tcp_input+0x724>)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f4a0:	4b91      	ldr	r3, [pc, #580]	@ (800f6e8 <tcp_input+0x728>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4a8f      	ldr	r2, [pc, #572]	@ (800f6e4 <tcp_input+0x724>)
 800f4a6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f4a8:	4b90      	ldr	r3, [pc, #576]	@ (800f6ec <tcp_input+0x72c>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f4ae:	4b90      	ldr	r3, [pc, #576]	@ (800f6f0 <tcp_input+0x730>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f4b4:	4b8f      	ldr	r3, [pc, #572]	@ (800f6f4 <tcp_input+0x734>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f4ba:	4b8f      	ldr	r3, [pc, #572]	@ (800f6f8 <tcp_input+0x738>)
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	f003 0308 	and.w	r3, r3, #8
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d006      	beq.n	800f4d4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	7b5b      	ldrb	r3, [r3, #13]
 800f4ca:	f043 0301 	orr.w	r3, r3, #1
 800f4ce:	b2da      	uxtb	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d017      	beq.n	800f50c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f4dc:	69f8      	ldr	r0, [r7, #28]
 800f4de:	f7ff f85b 	bl	800e598 <tcp_process_refused_data>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	f113 0f0d 	cmn.w	r3, #13
 800f4e8:	d007      	beq.n	800f4fa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d00c      	beq.n	800f50c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f4f2:	4b82      	ldr	r3, [pc, #520]	@ (800f6fc <tcp_input+0x73c>)
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d008      	beq.n	800f50c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f040 80e3 	bne.w	800f6ca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f504:	69f8      	ldr	r0, [r7, #28]
 800f506:	f003 fdff 	bl	8013108 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f50a:	e0de      	b.n	800f6ca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f50c:	4a7c      	ldr	r2, [pc, #496]	@ (800f700 <tcp_input+0x740>)
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f512:	69f8      	ldr	r0, [r7, #28]
 800f514:	f000 fb18 	bl	800fb48 <tcp_process>
 800f518:	4603      	mov	r3, r0
 800f51a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f51c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f520:	f113 0f0d 	cmn.w	r3, #13
 800f524:	f000 80d3 	beq.w	800f6ce <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f528:	4b71      	ldr	r3, [pc, #452]	@ (800f6f0 <tcp_input+0x730>)
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b00      	cmp	r3, #0
 800f532:	d015      	beq.n	800f560 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d008      	beq.n	800f550 <tcp_input+0x590>
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f544:	69fa      	ldr	r2, [r7, #28]
 800f546:	6912      	ldr	r2, [r2, #16]
 800f548:	f06f 010d 	mvn.w	r1, #13
 800f54c:	4610      	mov	r0, r2
 800f54e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f550:	69f9      	ldr	r1, [r7, #28]
 800f552:	486c      	ldr	r0, [pc, #432]	@ (800f704 <tcp_input+0x744>)
 800f554:	f7ff fbbc 	bl	800ecd0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f558:	69f8      	ldr	r0, [r7, #28]
 800f55a:	f7fd ff1f 	bl	800d39c <tcp_free>
 800f55e:	e0da      	b.n	800f716 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f560:	2300      	movs	r3, #0
 800f562:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f564:	4b63      	ldr	r3, [pc, #396]	@ (800f6f4 <tcp_input+0x734>)
 800f566:	881b      	ldrh	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d01d      	beq.n	800f5a8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f56c:	4b61      	ldr	r3, [pc, #388]	@ (800f6f4 <tcp_input+0x734>)
 800f56e:	881b      	ldrh	r3, [r3, #0]
 800f570:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00a      	beq.n	800f592 <tcp_input+0x5d2>
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f582:	69fa      	ldr	r2, [r7, #28]
 800f584:	6910      	ldr	r0, [r2, #16]
 800f586:	89fa      	ldrh	r2, [r7, #14]
 800f588:	69f9      	ldr	r1, [r7, #28]
 800f58a:	4798      	blx	r3
 800f58c:	4603      	mov	r3, r0
 800f58e:	74fb      	strb	r3, [r7, #19]
 800f590:	e001      	b.n	800f596 <tcp_input+0x5d6>
 800f592:	2300      	movs	r3, #0
 800f594:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f596:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f59a:	f113 0f0d 	cmn.w	r3, #13
 800f59e:	f000 8098 	beq.w	800f6d2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f5a2:	4b54      	ldr	r3, [pc, #336]	@ (800f6f4 <tcp_input+0x734>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f5a8:	69f8      	ldr	r0, [r7, #28]
 800f5aa:	f000 f915 	bl	800f7d8 <tcp_input_delayed_close>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f040 8090 	bne.w	800f6d6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f5b6:	4b4d      	ldr	r3, [pc, #308]	@ (800f6ec <tcp_input+0x72c>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d041      	beq.n	800f642 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d006      	beq.n	800f5d4 <tcp_input+0x614>
 800f5c6:	4b50      	ldr	r3, [pc, #320]	@ (800f708 <tcp_input+0x748>)
 800f5c8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f5cc:	494f      	ldr	r1, [pc, #316]	@ (800f70c <tcp_input+0x74c>)
 800f5ce:	4850      	ldr	r0, [pc, #320]	@ (800f710 <tcp_input+0x750>)
 800f5d0:	f7f1 fd7e 	bl	80010d0 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	8b5b      	ldrh	r3, [r3, #26]
 800f5d8:	f003 0310 	and.w	r3, r3, #16
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d008      	beq.n	800f5f2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f5e0:	4b42      	ldr	r3, [pc, #264]	@ (800f6ec <tcp_input+0x72c>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fd fc2d 	bl	800ce44 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f5ea:	69f8      	ldr	r0, [r7, #28]
 800f5ec:	f7fe fa1a 	bl	800da24 <tcp_abort>
            goto aborted;
 800f5f0:	e091      	b.n	800f716 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00c      	beq.n	800f616 <tcp_input+0x656>
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	6918      	ldr	r0, [r3, #16]
 800f606:	4b39      	ldr	r3, [pc, #228]	@ (800f6ec <tcp_input+0x72c>)
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	2300      	movs	r3, #0
 800f60c:	69f9      	ldr	r1, [r7, #28]
 800f60e:	47a0      	blx	r4
 800f610:	4603      	mov	r3, r0
 800f612:	74fb      	strb	r3, [r7, #19]
 800f614:	e008      	b.n	800f628 <tcp_input+0x668>
 800f616:	4b35      	ldr	r3, [pc, #212]	@ (800f6ec <tcp_input+0x72c>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	2300      	movs	r3, #0
 800f61c:	69f9      	ldr	r1, [r7, #28]
 800f61e:	2000      	movs	r0, #0
 800f620:	f7ff f890 	bl	800e744 <tcp_recv_null>
 800f624:	4603      	mov	r3, r0
 800f626:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f628:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f62c:	f113 0f0d 	cmn.w	r3, #13
 800f630:	d053      	beq.n	800f6da <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f632:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d003      	beq.n	800f642 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f63a:	4b2c      	ldr	r3, [pc, #176]	@ (800f6ec <tcp_input+0x72c>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f642:	4b2b      	ldr	r3, [pc, #172]	@ (800f6f0 <tcp_input+0x730>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	f003 0320 	and.w	r3, r3, #32
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d030      	beq.n	800f6b0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f652:	2b00      	cmp	r3, #0
 800f654:	d009      	beq.n	800f66a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f65a:	7b5a      	ldrb	r2, [r3, #13]
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f660:	f042 0220 	orr.w	r2, r2, #32
 800f664:	b2d2      	uxtb	r2, r2
 800f666:	735a      	strb	r2, [r3, #13]
 800f668:	e022      	b.n	800f6b0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f66e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f672:	d005      	beq.n	800f680 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f678:	3301      	adds	r3, #1
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00b      	beq.n	800f6a2 <tcp_input+0x6e2>
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	6918      	ldr	r0, [r3, #16]
 800f694:	2300      	movs	r3, #0
 800f696:	2200      	movs	r2, #0
 800f698:	69f9      	ldr	r1, [r7, #28]
 800f69a:	47a0      	blx	r4
 800f69c:	4603      	mov	r3, r0
 800f69e:	74fb      	strb	r3, [r7, #19]
 800f6a0:	e001      	b.n	800f6a6 <tcp_input+0x6e6>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f6a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6aa:	f113 0f0d 	cmn.w	r3, #13
 800f6ae:	d016      	beq.n	800f6de <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f6b0:	4b13      	ldr	r3, [pc, #76]	@ (800f700 <tcp_input+0x740>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f6b6:	69f8      	ldr	r0, [r7, #28]
 800f6b8:	f000 f88e 	bl	800f7d8 <tcp_input_delayed_close>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d128      	bne.n	800f714 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f6c2:	69f8      	ldr	r0, [r7, #28]
 800f6c4:	f002 ff1a 	bl	80124fc <tcp_output>
 800f6c8:	e025      	b.n	800f716 <tcp_input+0x756>
        goto aborted;
 800f6ca:	bf00      	nop
 800f6cc:	e023      	b.n	800f716 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f6ce:	bf00      	nop
 800f6d0:	e021      	b.n	800f716 <tcp_input+0x756>
              goto aborted;
 800f6d2:	bf00      	nop
 800f6d4:	e01f      	b.n	800f716 <tcp_input+0x756>
          goto aborted;
 800f6d6:	bf00      	nop
 800f6d8:	e01d      	b.n	800f716 <tcp_input+0x756>
            goto aborted;
 800f6da:	bf00      	nop
 800f6dc:	e01b      	b.n	800f716 <tcp_input+0x756>
              goto aborted;
 800f6de:	bf00      	nop
 800f6e0:	e019      	b.n	800f716 <tcp_input+0x756>
 800f6e2:	bf00      	nop
 800f6e4:	2000c5bc 	.word	0x2000c5bc
 800f6e8:	2000c5cc 	.word	0x2000c5cc
 800f6ec:	2000c5ec 	.word	0x2000c5ec
 800f6f0:	2000c5e9 	.word	0x2000c5e9
 800f6f4:	2000c5e4 	.word	0x2000c5e4
 800f6f8:	2000c5e8 	.word	0x2000c5e8
 800f6fc:	2000c5e6 	.word	0x2000c5e6
 800f700:	2000c5f0 	.word	0x2000c5f0
 800f704:	2000c5b0 	.word	0x2000c5b0
 800f708:	080195b0 	.word	0x080195b0
 800f70c:	08019764 	.word	0x08019764
 800f710:	080195fc 	.word	0x080195fc
          goto aborted;
 800f714:	bf00      	nop
    tcp_input_pcb = NULL;
 800f716:	4b27      	ldr	r3, [pc, #156]	@ (800f7b4 <tcp_input+0x7f4>)
 800f718:	2200      	movs	r2, #0
 800f71a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f71c:	4b26      	ldr	r3, [pc, #152]	@ (800f7b8 <tcp_input+0x7f8>)
 800f71e:	2200      	movs	r2, #0
 800f720:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f722:	4b26      	ldr	r3, [pc, #152]	@ (800f7bc <tcp_input+0x7fc>)
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d03f      	beq.n	800f7aa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f72a:	4b24      	ldr	r3, [pc, #144]	@ (800f7bc <tcp_input+0x7fc>)
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fd fb88 	bl	800ce44 <pbuf_free>
      inseg.p = NULL;
 800f734:	4b21      	ldr	r3, [pc, #132]	@ (800f7bc <tcp_input+0x7fc>)
 800f736:	2200      	movs	r2, #0
 800f738:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f73a:	e036      	b.n	800f7aa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f73c:	4b20      	ldr	r3, [pc, #128]	@ (800f7c0 <tcp_input+0x800>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	899b      	ldrh	r3, [r3, #12]
 800f742:	b29b      	uxth	r3, r3
 800f744:	4618      	mov	r0, r3
 800f746:	f7fb ff8b 	bl	800b660 <lwip_htons>
 800f74a:	4603      	mov	r3, r0
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	f003 0304 	and.w	r3, r3, #4
 800f752:	2b00      	cmp	r3, #0
 800f754:	d118      	bne.n	800f788 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f756:	4b1b      	ldr	r3, [pc, #108]	@ (800f7c4 <tcp_input+0x804>)
 800f758:	6819      	ldr	r1, [r3, #0]
 800f75a:	4b1b      	ldr	r3, [pc, #108]	@ (800f7c8 <tcp_input+0x808>)
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	4b1a      	ldr	r3, [pc, #104]	@ (800f7cc <tcp_input+0x80c>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f766:	4b16      	ldr	r3, [pc, #88]	@ (800f7c0 <tcp_input+0x800>)
 800f768:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f76a:	885b      	ldrh	r3, [r3, #2]
 800f76c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f76e:	4a14      	ldr	r2, [pc, #80]	@ (800f7c0 <tcp_input+0x800>)
 800f770:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f772:	8812      	ldrh	r2, [r2, #0]
 800f774:	b292      	uxth	r2, r2
 800f776:	9202      	str	r2, [sp, #8]
 800f778:	9301      	str	r3, [sp, #4]
 800f77a:	4b15      	ldr	r3, [pc, #84]	@ (800f7d0 <tcp_input+0x810>)
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	4b15      	ldr	r3, [pc, #84]	@ (800f7d4 <tcp_input+0x814>)
 800f780:	4602      	mov	r2, r0
 800f782:	2000      	movs	r0, #0
 800f784:	f003 fc6e 	bl	8013064 <tcp_rst>
    pbuf_free(p);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7fd fb5b 	bl	800ce44 <pbuf_free>
  return;
 800f78e:	e00c      	b.n	800f7aa <tcp_input+0x7ea>
    goto dropped;
 800f790:	bf00      	nop
 800f792:	e006      	b.n	800f7a2 <tcp_input+0x7e2>
    goto dropped;
 800f794:	bf00      	nop
 800f796:	e004      	b.n	800f7a2 <tcp_input+0x7e2>
    goto dropped;
 800f798:	bf00      	nop
 800f79a:	e002      	b.n	800f7a2 <tcp_input+0x7e2>
      goto dropped;
 800f79c:	bf00      	nop
 800f79e:	e000      	b.n	800f7a2 <tcp_input+0x7e2>
      goto dropped;
 800f7a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f7fd fb4e 	bl	800ce44 <pbuf_free>
 800f7a8:	e000      	b.n	800f7ac <tcp_input+0x7ec>
  return;
 800f7aa:	bf00      	nop
}
 800f7ac:	3724      	adds	r7, #36	@ 0x24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd90      	pop	{r4, r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	2000c5f0 	.word	0x2000c5f0
 800f7b8:	2000c5ec 	.word	0x2000c5ec
 800f7bc:	2000c5bc 	.word	0x2000c5bc
 800f7c0:	2000c5cc 	.word	0x2000c5cc
 800f7c4:	2000c5e0 	.word	0x2000c5e0
 800f7c8:	2000c5e6 	.word	0x2000c5e6
 800f7cc:	2000c5dc 	.word	0x2000c5dc
 800f7d0:	20008e60 	.word	0x20008e60
 800f7d4:	20008e64 	.word	0x20008e64

0800f7d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d106      	bne.n	800f7f4 <tcp_input_delayed_close+0x1c>
 800f7e6:	4b17      	ldr	r3, [pc, #92]	@ (800f844 <tcp_input_delayed_close+0x6c>)
 800f7e8:	f240 225a 	movw	r2, #602	@ 0x25a
 800f7ec:	4916      	ldr	r1, [pc, #88]	@ (800f848 <tcp_input_delayed_close+0x70>)
 800f7ee:	4817      	ldr	r0, [pc, #92]	@ (800f84c <tcp_input_delayed_close+0x74>)
 800f7f0:	f7f1 fc6e 	bl	80010d0 <printf>

  if (recv_flags & TF_CLOSED) {
 800f7f4:	4b16      	ldr	r3, [pc, #88]	@ (800f850 <tcp_input_delayed_close+0x78>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f003 0310 	and.w	r3, r3, #16
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d01c      	beq.n	800f83a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	8b5b      	ldrh	r3, [r3, #26]
 800f804:	f003 0310 	and.w	r3, r3, #16
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10d      	bne.n	800f828 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f812:	2b00      	cmp	r3, #0
 800f814:	d008      	beq.n	800f828 <tcp_input_delayed_close+0x50>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	6912      	ldr	r2, [r2, #16]
 800f820:	f06f 010e 	mvn.w	r1, #14
 800f824:	4610      	mov	r0, r2
 800f826:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f828:	6879      	ldr	r1, [r7, #4]
 800f82a:	480a      	ldr	r0, [pc, #40]	@ (800f854 <tcp_input_delayed_close+0x7c>)
 800f82c:	f7ff fa50 	bl	800ecd0 <tcp_pcb_remove>
    tcp_free(pcb);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7fd fdb3 	bl	800d39c <tcp_free>
    return 1;
 800f836:	2301      	movs	r3, #1
 800f838:	e000      	b.n	800f83c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	080195b0 	.word	0x080195b0
 800f848:	08019780 	.word	0x08019780
 800f84c:	080195fc 	.word	0x080195fc
 800f850:	2000c5e9 	.word	0x2000c5e9
 800f854:	2000c5b0 	.word	0x2000c5b0

0800f858 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f858:	b590      	push	{r4, r7, lr}
 800f85a:	b08b      	sub	sp, #44	@ 0x2c
 800f85c:	af04      	add	r7, sp, #16
 800f85e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f860:	4b6f      	ldr	r3, [pc, #444]	@ (800fa20 <tcp_listen_input+0x1c8>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	f003 0304 	and.w	r3, r3, #4
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f040 80d2 	bne.w	800fa12 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d106      	bne.n	800f882 <tcp_listen_input+0x2a>
 800f874:	4b6b      	ldr	r3, [pc, #428]	@ (800fa24 <tcp_listen_input+0x1cc>)
 800f876:	f240 2281 	movw	r2, #641	@ 0x281
 800f87a:	496b      	ldr	r1, [pc, #428]	@ (800fa28 <tcp_listen_input+0x1d0>)
 800f87c:	486b      	ldr	r0, [pc, #428]	@ (800fa2c <tcp_listen_input+0x1d4>)
 800f87e:	f7f1 fc27 	bl	80010d0 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f882:	4b67      	ldr	r3, [pc, #412]	@ (800fa20 <tcp_listen_input+0x1c8>)
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	f003 0310 	and.w	r3, r3, #16
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d019      	beq.n	800f8c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f88e:	4b68      	ldr	r3, [pc, #416]	@ (800fa30 <tcp_listen_input+0x1d8>)
 800f890:	6819      	ldr	r1, [r3, #0]
 800f892:	4b68      	ldr	r3, [pc, #416]	@ (800fa34 <tcp_listen_input+0x1dc>)
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	461a      	mov	r2, r3
 800f898:	4b67      	ldr	r3, [pc, #412]	@ (800fa38 <tcp_listen_input+0x1e0>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f89e:	4b67      	ldr	r3, [pc, #412]	@ (800fa3c <tcp_listen_input+0x1e4>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8a2:	885b      	ldrh	r3, [r3, #2]
 800f8a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8a6:	4a65      	ldr	r2, [pc, #404]	@ (800fa3c <tcp_listen_input+0x1e4>)
 800f8a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8aa:	8812      	ldrh	r2, [r2, #0]
 800f8ac:	b292      	uxth	r2, r2
 800f8ae:	9202      	str	r2, [sp, #8]
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	4b63      	ldr	r3, [pc, #396]	@ (800fa40 <tcp_listen_input+0x1e8>)
 800f8b4:	9300      	str	r3, [sp, #0]
 800f8b6:	4b63      	ldr	r3, [pc, #396]	@ (800fa44 <tcp_listen_input+0x1ec>)
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f003 fbd2 	bl	8013064 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f8c0:	e0a9      	b.n	800fa16 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f8c2:	4b57      	ldr	r3, [pc, #348]	@ (800fa20 <tcp_listen_input+0x1c8>)
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	f003 0302 	and.w	r3, r3, #2
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 80a3 	beq.w	800fa16 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	7d5b      	ldrb	r3, [r3, #21]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff f859 	bl	800e98c <tcp_alloc>
 800f8da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d111      	bne.n	800f906 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00a      	beq.n	800f900 <tcp_listen_input+0xa8>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	6910      	ldr	r0, [r2, #16]
 800f8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	4798      	blx	r3
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	73bb      	strb	r3, [r7, #14]
      return;
 800f8fe:	e08b      	b.n	800fa18 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f900:	23f0      	movs	r3, #240	@ 0xf0
 800f902:	73bb      	strb	r3, [r7, #14]
      return;
 800f904:	e088      	b.n	800fa18 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f906:	4b50      	ldr	r3, [pc, #320]	@ (800fa48 <tcp_listen_input+0x1f0>)
 800f908:	695a      	ldr	r2, [r3, #20]
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f90e:	4b4e      	ldr	r3, [pc, #312]	@ (800fa48 <tcp_listen_input+0x1f0>)
 800f910:	691a      	ldr	r2, [r3, #16]
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	8ada      	ldrh	r2, [r3, #22]
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f91e:	4b47      	ldr	r3, [pc, #284]	@ (800fa3c <tcp_listen_input+0x1e4>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	881b      	ldrh	r3, [r3, #0]
 800f924:	b29a      	uxth	r2, r3
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	2203      	movs	r2, #3
 800f92e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f930:	4b41      	ldr	r3, [pc, #260]	@ (800fa38 <tcp_listen_input+0x1e0>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f942:	6978      	ldr	r0, [r7, #20]
 800f944:	f7ff fa58 	bl	800edf8 <tcp_next_iss>
 800f948:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	693a      	ldr	r2, [r7, #16]
 800f954:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	693a      	ldr	r2, [r7, #16]
 800f95a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	693a      	ldr	r2, [r7, #16]
 800f960:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f962:	4b35      	ldr	r3, [pc, #212]	@ (800fa38 <tcp_listen_input+0x1e0>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	1e5a      	subs	r2, r3, #1
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	691a      	ldr	r2, [r3, #16]
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	7a5b      	ldrb	r3, [r3, #9]
 800f97e:	f003 030c 	and.w	r3, r3, #12
 800f982:	b2da      	uxtb	r2, r3
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	7a1a      	ldrb	r2, [r3, #8]
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f990:	4b2e      	ldr	r3, [pc, #184]	@ (800fa4c <tcp_listen_input+0x1f4>)
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	60da      	str	r2, [r3, #12]
 800f998:	4a2c      	ldr	r2, [pc, #176]	@ (800fa4c <tcp_listen_input+0x1f4>)
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	6013      	str	r3, [r2, #0]
 800f99e:	f003 fd23 	bl	80133e8 <tcp_timer_needed>
 800f9a2:	4b2b      	ldr	r3, [pc, #172]	@ (800fa50 <tcp_listen_input+0x1f8>)
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f9a8:	6978      	ldr	r0, [r7, #20]
 800f9aa:	f001 fd8b 	bl	80114c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f9ae:	4b23      	ldr	r3, [pc, #140]	@ (800fa3c <tcp_listen_input+0x1e4>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	89db      	ldrh	r3, [r3, #14]
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f005 facb 	bl	8014f6c <ip4_route>
 800f9d6:	4601      	mov	r1, r0
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	3304      	adds	r3, #4
 800f9dc:	461a      	mov	r2, r3
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f7ff fa30 	bl	800ee44 <tcp_eff_send_mss_netif>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f9ec:	2112      	movs	r1, #18
 800f9ee:	6978      	ldr	r0, [r7, #20]
 800f9f0:	f002 fc96 	bl	8012320 <tcp_enqueue_flags>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d004      	beq.n	800fa0a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fa00:	2100      	movs	r1, #0
 800fa02:	6978      	ldr	r0, [r7, #20]
 800fa04:	f7fd ff50 	bl	800d8a8 <tcp_abandon>
      return;
 800fa08:	e006      	b.n	800fa18 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fa0a:	6978      	ldr	r0, [r7, #20]
 800fa0c:	f002 fd76 	bl	80124fc <tcp_output>
  return;
 800fa10:	e001      	b.n	800fa16 <tcp_listen_input+0x1be>
    return;
 800fa12:	bf00      	nop
 800fa14:	e000      	b.n	800fa18 <tcp_listen_input+0x1c0>
  return;
 800fa16:	bf00      	nop
}
 800fa18:	371c      	adds	r7, #28
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd90      	pop	{r4, r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	2000c5e8 	.word	0x2000c5e8
 800fa24:	080195b0 	.word	0x080195b0
 800fa28:	080197a8 	.word	0x080197a8
 800fa2c:	080195fc 	.word	0x080195fc
 800fa30:	2000c5e0 	.word	0x2000c5e0
 800fa34:	2000c5e6 	.word	0x2000c5e6
 800fa38:	2000c5dc 	.word	0x2000c5dc
 800fa3c:	2000c5cc 	.word	0x2000c5cc
 800fa40:	20008e60 	.word	0x20008e60
 800fa44:	20008e64 	.word	0x20008e64
 800fa48:	20008e50 	.word	0x20008e50
 800fa4c:	2000c5b0 	.word	0x2000c5b0
 800fa50:	2000c5b8 	.word	0x2000c5b8

0800fa54 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af04      	add	r7, sp, #16
 800fa5a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fa5c:	4b2f      	ldr	r3, [pc, #188]	@ (800fb1c <tcp_timewait_input+0xc8>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f003 0304 	and.w	r3, r3, #4
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d153      	bne.n	800fb10 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <tcp_timewait_input+0x28>
 800fa6e:	4b2c      	ldr	r3, [pc, #176]	@ (800fb20 <tcp_timewait_input+0xcc>)
 800fa70:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fa74:	492b      	ldr	r1, [pc, #172]	@ (800fb24 <tcp_timewait_input+0xd0>)
 800fa76:	482c      	ldr	r0, [pc, #176]	@ (800fb28 <tcp_timewait_input+0xd4>)
 800fa78:	f7f1 fb2a 	bl	80010d0 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fa7c:	4b27      	ldr	r3, [pc, #156]	@ (800fb1c <tcp_timewait_input+0xc8>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	f003 0302 	and.w	r3, r3, #2
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d02a      	beq.n	800fade <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fa88:	4b28      	ldr	r3, [pc, #160]	@ (800fb2c <tcp_timewait_input+0xd8>)
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa90:	1ad3      	subs	r3, r2, r3
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	db2d      	blt.n	800faf2 <tcp_timewait_input+0x9e>
 800fa96:	4b25      	ldr	r3, [pc, #148]	@ (800fb2c <tcp_timewait_input+0xd8>)
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa9e:	6879      	ldr	r1, [r7, #4]
 800faa0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800faa2:	440b      	add	r3, r1
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	dc23      	bgt.n	800faf2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faaa:	4b21      	ldr	r3, [pc, #132]	@ (800fb30 <tcp_timewait_input+0xdc>)
 800faac:	6819      	ldr	r1, [r3, #0]
 800faae:	4b21      	ldr	r3, [pc, #132]	@ (800fb34 <tcp_timewait_input+0xe0>)
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	4b1d      	ldr	r3, [pc, #116]	@ (800fb2c <tcp_timewait_input+0xd8>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faba:	4b1f      	ldr	r3, [pc, #124]	@ (800fb38 <tcp_timewait_input+0xe4>)
 800fabc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fabe:	885b      	ldrh	r3, [r3, #2]
 800fac0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fac2:	4a1d      	ldr	r2, [pc, #116]	@ (800fb38 <tcp_timewait_input+0xe4>)
 800fac4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fac6:	8812      	ldrh	r2, [r2, #0]
 800fac8:	b292      	uxth	r2, r2
 800faca:	9202      	str	r2, [sp, #8]
 800facc:	9301      	str	r3, [sp, #4]
 800face:	4b1b      	ldr	r3, [pc, #108]	@ (800fb3c <tcp_timewait_input+0xe8>)
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	4b1b      	ldr	r3, [pc, #108]	@ (800fb40 <tcp_timewait_input+0xec>)
 800fad4:	4602      	mov	r2, r0
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f003 fac4 	bl	8013064 <tcp_rst>
      return;
 800fadc:	e01b      	b.n	800fb16 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fade:	4b0f      	ldr	r3, [pc, #60]	@ (800fb1c <tcp_timewait_input+0xc8>)
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800faea:	4b16      	ldr	r3, [pc, #88]	@ (800fb44 <tcp_timewait_input+0xf0>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800faf2:	4b10      	ldr	r3, [pc, #64]	@ (800fb34 <tcp_timewait_input+0xe0>)
 800faf4:	881b      	ldrh	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00c      	beq.n	800fb14 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	8b5b      	ldrh	r3, [r3, #26]
 800fafe:	f043 0302 	orr.w	r3, r3, #2
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f002 fcf7 	bl	80124fc <tcp_output>
  }
  return;
 800fb0e:	e001      	b.n	800fb14 <tcp_timewait_input+0xc0>
    return;
 800fb10:	bf00      	nop
 800fb12:	e000      	b.n	800fb16 <tcp_timewait_input+0xc2>
  return;
 800fb14:	bf00      	nop
}
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	2000c5e8 	.word	0x2000c5e8
 800fb20:	080195b0 	.word	0x080195b0
 800fb24:	080197c8 	.word	0x080197c8
 800fb28:	080195fc 	.word	0x080195fc
 800fb2c:	2000c5dc 	.word	0x2000c5dc
 800fb30:	2000c5e0 	.word	0x2000c5e0
 800fb34:	2000c5e6 	.word	0x2000c5e6
 800fb38:	2000c5cc 	.word	0x2000c5cc
 800fb3c:	20008e60 	.word	0x20008e60
 800fb40:	20008e64 	.word	0x20008e64
 800fb44:	2000c5a4 	.word	0x2000c5a4

0800fb48 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fb48:	b590      	push	{r4, r7, lr}
 800fb4a:	b08d      	sub	sp, #52	@ 0x34
 800fb4c:	af04      	add	r7, sp, #16
 800fb4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fb50:	2300      	movs	r3, #0
 800fb52:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fb54:	2300      	movs	r3, #0
 800fb56:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d106      	bne.n	800fb6c <tcp_process+0x24>
 800fb5e:	4b9d      	ldr	r3, [pc, #628]	@ (800fdd4 <tcp_process+0x28c>)
 800fb60:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fb64:	499c      	ldr	r1, [pc, #624]	@ (800fdd8 <tcp_process+0x290>)
 800fb66:	489d      	ldr	r0, [pc, #628]	@ (800fddc <tcp_process+0x294>)
 800fb68:	f7f1 fab2 	bl	80010d0 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fb6c:	4b9c      	ldr	r3, [pc, #624]	@ (800fde0 <tcp_process+0x298>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	f003 0304 	and.w	r3, r3, #4
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d04e      	beq.n	800fc16 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	7d1b      	ldrb	r3, [r3, #20]
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d108      	bne.n	800fb92 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb84:	4b97      	ldr	r3, [pc, #604]	@ (800fde4 <tcp_process+0x29c>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d123      	bne.n	800fbd4 <tcp_process+0x8c>
        acceptable = 1;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	76fb      	strb	r3, [r7, #27]
 800fb90:	e020      	b.n	800fbd4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb96:	4b94      	ldr	r3, [pc, #592]	@ (800fde8 <tcp_process+0x2a0>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d102      	bne.n	800fba4 <tcp_process+0x5c>
        acceptable = 1;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	76fb      	strb	r3, [r7, #27]
 800fba2:	e017      	b.n	800fbd4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fba4:	4b90      	ldr	r3, [pc, #576]	@ (800fde8 <tcp_process+0x2a0>)
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	db10      	blt.n	800fbd4 <tcp_process+0x8c>
 800fbb2:	4b8d      	ldr	r3, [pc, #564]	@ (800fde8 <tcp_process+0x2a0>)
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbba:	6879      	ldr	r1, [r7, #4]
 800fbbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fbbe:	440b      	add	r3, r1
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	dc06      	bgt.n	800fbd4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	8b5b      	ldrh	r3, [r3, #26]
 800fbca:	f043 0302 	orr.w	r3, r3, #2
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fbd4:	7efb      	ldrb	r3, [r7, #27]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d01b      	beq.n	800fc12 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	7d1b      	ldrb	r3, [r3, #20]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <tcp_process+0xa8>
 800fbe2:	4b7c      	ldr	r3, [pc, #496]	@ (800fdd4 <tcp_process+0x28c>)
 800fbe4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fbe8:	4980      	ldr	r1, [pc, #512]	@ (800fdec <tcp_process+0x2a4>)
 800fbea:	487c      	ldr	r0, [pc, #496]	@ (800fddc <tcp_process+0x294>)
 800fbec:	f7f1 fa70 	bl	80010d0 <printf>
      recv_flags |= TF_RESET;
 800fbf0:	4b7f      	ldr	r3, [pc, #508]	@ (800fdf0 <tcp_process+0x2a8>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f043 0308 	orr.w	r3, r3, #8
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4b7d      	ldr	r3, [pc, #500]	@ (800fdf0 <tcp_process+0x2a8>)
 800fbfc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	8b5b      	ldrh	r3, [r3, #26]
 800fc02:	f023 0301 	bic.w	r3, r3, #1
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fc0c:	f06f 030d 	mvn.w	r3, #13
 800fc10:	e37a      	b.n	8010308 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fc12:	2300      	movs	r3, #0
 800fc14:	e378      	b.n	8010308 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fc16:	4b72      	ldr	r3, [pc, #456]	@ (800fde0 <tcp_process+0x298>)
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	f003 0302 	and.w	r3, r3, #2
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d010      	beq.n	800fc44 <tcp_process+0xfc>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	7d1b      	ldrb	r3, [r3, #20]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d00c      	beq.n	800fc44 <tcp_process+0xfc>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	7d1b      	ldrb	r3, [r3, #20]
 800fc2e:	2b03      	cmp	r3, #3
 800fc30:	d008      	beq.n	800fc44 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8b5b      	ldrh	r3, [r3, #26]
 800fc36:	f043 0302 	orr.w	r3, r3, #2
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fc40:	2300      	movs	r3, #0
 800fc42:	e361      	b.n	8010308 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	8b5b      	ldrh	r3, [r3, #26]
 800fc48:	f003 0310 	and.w	r3, r3, #16
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d103      	bne.n	800fc58 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fc50:	4b68      	ldr	r3, [pc, #416]	@ (800fdf4 <tcp_process+0x2ac>)
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f001 fc2b 	bl	80114c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	7d1b      	ldrb	r3, [r3, #20]
 800fc72:	3b02      	subs	r3, #2
 800fc74:	2b07      	cmp	r3, #7
 800fc76:	f200 8337 	bhi.w	80102e8 <tcp_process+0x7a0>
 800fc7a:	a201      	add	r2, pc, #4	@ (adr r2, 800fc80 <tcp_process+0x138>)
 800fc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc80:	0800fca1 	.word	0x0800fca1
 800fc84:	0800fed1 	.word	0x0800fed1
 800fc88:	08010049 	.word	0x08010049
 800fc8c:	08010073 	.word	0x08010073
 800fc90:	08010197 	.word	0x08010197
 800fc94:	08010049 	.word	0x08010049
 800fc98:	08010223 	.word	0x08010223
 800fc9c:	080102b3 	.word	0x080102b3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fca0:	4b4f      	ldr	r3, [pc, #316]	@ (800fde0 <tcp_process+0x298>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f003 0310 	and.w	r3, r3, #16
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 80e4 	beq.w	800fe76 <tcp_process+0x32e>
 800fcae:	4b4c      	ldr	r3, [pc, #304]	@ (800fde0 <tcp_process+0x298>)
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	f003 0302 	and.w	r3, r3, #2
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f000 80dd 	beq.w	800fe76 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcc0:	1c5a      	adds	r2, r3, #1
 800fcc2:	4b48      	ldr	r3, [pc, #288]	@ (800fde4 <tcp_process+0x29c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	f040 80d5 	bne.w	800fe76 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fccc:	4b46      	ldr	r3, [pc, #280]	@ (800fde8 <tcp_process+0x2a0>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	1c5a      	adds	r2, r3, #1
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800fcde:	4b41      	ldr	r3, [pc, #260]	@ (800fde4 <tcp_process+0x29c>)
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fce6:	4b44      	ldr	r3, [pc, #272]	@ (800fdf8 <tcp_process+0x2b0>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	89db      	ldrh	r3, [r3, #14]
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fd00:	4b39      	ldr	r3, [pc, #228]	@ (800fde8 <tcp_process+0x2a0>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	1e5a      	subs	r2, r3, #1
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2204      	movs	r2, #4
 800fd0e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	3304      	adds	r3, #4
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f005 f927 	bl	8014f6c <ip4_route>
 800fd1e:	4601      	mov	r1, r0
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	3304      	adds	r3, #4
 800fd24:	461a      	mov	r2, r3
 800fd26:	4620      	mov	r0, r4
 800fd28:	f7ff f88c 	bl	800ee44 <tcp_eff_send_mss_netif>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	461a      	mov	r2, r3
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd38:	009a      	lsls	r2, r3, #2
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd3e:	005b      	lsls	r3, r3, #1
 800fd40:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fd44:	428b      	cmp	r3, r1
 800fd46:	bf38      	it	cc
 800fd48:	460b      	movcc	r3, r1
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d204      	bcs.n	800fd58 <tcp_process+0x210>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	e00d      	b.n	800fd74 <tcp_process+0x22c>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd5c:	005b      	lsls	r3, r3, #1
 800fd5e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d904      	bls.n	800fd70 <tcp_process+0x228>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd6a:	005b      	lsls	r3, r3, #1
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	e001      	b.n	800fd74 <tcp_process+0x22c>
 800fd70:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d106      	bne.n	800fd92 <tcp_process+0x24a>
 800fd84:	4b13      	ldr	r3, [pc, #76]	@ (800fdd4 <tcp_process+0x28c>)
 800fd86:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fd8a:	491c      	ldr	r1, [pc, #112]	@ (800fdfc <tcp_process+0x2b4>)
 800fd8c:	4813      	ldr	r0, [pc, #76]	@ (800fddc <tcp_process+0x294>)
 800fd8e:	f7f1 f99f 	bl	80010d0 <printf>
        --pcb->snd_queuelen;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fd98:	3b01      	subs	r3, #1
 800fd9a:	b29a      	uxth	r2, r3
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fda6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d12a      	bne.n	800fe04 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdb2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d106      	bne.n	800fdc8 <tcp_process+0x280>
 800fdba:	4b06      	ldr	r3, [pc, #24]	@ (800fdd4 <tcp_process+0x28c>)
 800fdbc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800fdc0:	490f      	ldr	r1, [pc, #60]	@ (800fe00 <tcp_process+0x2b8>)
 800fdc2:	4806      	ldr	r0, [pc, #24]	@ (800fddc <tcp_process+0x294>)
 800fdc4:	f7f1 f984 	bl	80010d0 <printf>
          pcb->unsent = rseg->next;
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fdd0:	e01c      	b.n	800fe0c <tcp_process+0x2c4>
 800fdd2:	bf00      	nop
 800fdd4:	080195b0 	.word	0x080195b0
 800fdd8:	080197e8 	.word	0x080197e8
 800fddc:	080195fc 	.word	0x080195fc
 800fde0:	2000c5e8 	.word	0x2000c5e8
 800fde4:	2000c5e0 	.word	0x2000c5e0
 800fde8:	2000c5dc 	.word	0x2000c5dc
 800fdec:	08019804 	.word	0x08019804
 800fdf0:	2000c5e9 	.word	0x2000c5e9
 800fdf4:	2000c5a4 	.word	0x2000c5a4
 800fdf8:	2000c5cc 	.word	0x2000c5cc
 800fdfc:	08019824 	.word	0x08019824
 800fe00:	0801983c 	.word	0x0801983c
        } else {
          pcb->unacked = rseg->next;
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800fe0c:	69f8      	ldr	r0, [r7, #28]
 800fe0e:	f7fe fc54 	bl	800e6ba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d104      	bne.n	800fe24 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe20:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fe22:	e006      	b.n	800fe32 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00a      	beq.n	800fe52 <tcp_process+0x30a>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	6910      	ldr	r0, [r2, #16]
 800fe46:	2200      	movs	r2, #0
 800fe48:	6879      	ldr	r1, [r7, #4]
 800fe4a:	4798      	blx	r3
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	76bb      	strb	r3, [r7, #26]
 800fe50:	e001      	b.n	800fe56 <tcp_process+0x30e>
 800fe52:	2300      	movs	r3, #0
 800fe54:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fe56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe5a:	f113 0f0d 	cmn.w	r3, #13
 800fe5e:	d102      	bne.n	800fe66 <tcp_process+0x31e>
          return ERR_ABRT;
 800fe60:	f06f 030c 	mvn.w	r3, #12
 800fe64:	e250      	b.n	8010308 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	8b5b      	ldrh	r3, [r3, #26]
 800fe6a:	f043 0302 	orr.w	r3, r3, #2
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fe74:	e23a      	b.n	80102ec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fe76:	4b98      	ldr	r3, [pc, #608]	@ (80100d8 <tcp_process+0x590>)
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	f003 0310 	and.w	r3, r3, #16
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f000 8234 	beq.w	80102ec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe84:	4b95      	ldr	r3, [pc, #596]	@ (80100dc <tcp_process+0x594>)
 800fe86:	6819      	ldr	r1, [r3, #0]
 800fe88:	4b95      	ldr	r3, [pc, #596]	@ (80100e0 <tcp_process+0x598>)
 800fe8a:	881b      	ldrh	r3, [r3, #0]
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	4b95      	ldr	r3, [pc, #596]	@ (80100e4 <tcp_process+0x59c>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe94:	4b94      	ldr	r3, [pc, #592]	@ (80100e8 <tcp_process+0x5a0>)
 800fe96:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe98:	885b      	ldrh	r3, [r3, #2]
 800fe9a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe9c:	4a92      	ldr	r2, [pc, #584]	@ (80100e8 <tcp_process+0x5a0>)
 800fe9e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea0:	8812      	ldrh	r2, [r2, #0]
 800fea2:	b292      	uxth	r2, r2
 800fea4:	9202      	str	r2, [sp, #8]
 800fea6:	9301      	str	r3, [sp, #4]
 800fea8:	4b90      	ldr	r3, [pc, #576]	@ (80100ec <tcp_process+0x5a4>)
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	4b90      	ldr	r3, [pc, #576]	@ (80100f0 <tcp_process+0x5a8>)
 800feae:	4602      	mov	r2, r0
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f003 f8d7 	bl	8013064 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800febc:	2b05      	cmp	r3, #5
 800febe:	f200 8215 	bhi.w	80102ec <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f002 fea3 	bl	8012c14 <tcp_rexmit_rto>
      break;
 800fece:	e20d      	b.n	80102ec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fed0:	4b81      	ldr	r3, [pc, #516]	@ (80100d8 <tcp_process+0x590>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0310 	and.w	r3, r3, #16
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 80a1 	beq.w	8010020 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fede:	4b7f      	ldr	r3, [pc, #508]	@ (80100dc <tcp_process+0x594>)
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	3b01      	subs	r3, #1
 800feea:	2b00      	cmp	r3, #0
 800feec:	db7e      	blt.n	800ffec <tcp_process+0x4a4>
 800feee:	4b7b      	ldr	r3, [pc, #492]	@ (80100dc <tcp_process+0x594>)
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	dc77      	bgt.n	800ffec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2204      	movs	r2, #4
 800ff00:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d102      	bne.n	800ff10 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ff0a:	23fa      	movs	r3, #250	@ 0xfa
 800ff0c:	76bb      	strb	r3, [r7, #26]
 800ff0e:	e01d      	b.n	800ff4c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff14:	699b      	ldr	r3, [r3, #24]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d106      	bne.n	800ff28 <tcp_process+0x3e0>
 800ff1a:	4b76      	ldr	r3, [pc, #472]	@ (80100f4 <tcp_process+0x5ac>)
 800ff1c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ff20:	4975      	ldr	r1, [pc, #468]	@ (80100f8 <tcp_process+0x5b0>)
 800ff22:	4876      	ldr	r0, [pc, #472]	@ (80100fc <tcp_process+0x5b4>)
 800ff24:	f7f1 f8d4 	bl	80010d0 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff2c:	699b      	ldr	r3, [r3, #24]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00a      	beq.n	800ff48 <tcp_process+0x400>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff36:	699b      	ldr	r3, [r3, #24]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	6910      	ldr	r0, [r2, #16]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	4798      	blx	r3
 800ff42:	4603      	mov	r3, r0
 800ff44:	76bb      	strb	r3, [r7, #26]
 800ff46:	e001      	b.n	800ff4c <tcp_process+0x404>
 800ff48:	23f0      	movs	r3, #240	@ 0xf0
 800ff4a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ff4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00a      	beq.n	800ff6a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ff54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff58:	f113 0f0d 	cmn.w	r3, #13
 800ff5c:	d002      	beq.n	800ff64 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f7fd fd60 	bl	800da24 <tcp_abort>
            }
            return ERR_ABRT;
 800ff64:	f06f 030c 	mvn.w	r3, #12
 800ff68:	e1ce      	b.n	8010308 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 fae0 	bl	8010530 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ff70:	4b63      	ldr	r3, [pc, #396]	@ (8010100 <tcp_process+0x5b8>)
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d005      	beq.n	800ff84 <tcp_process+0x43c>
            recv_acked--;
 800ff78:	4b61      	ldr	r3, [pc, #388]	@ (8010100 <tcp_process+0x5b8>)
 800ff7a:	881b      	ldrh	r3, [r3, #0]
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	4b5f      	ldr	r3, [pc, #380]	@ (8010100 <tcp_process+0x5b8>)
 800ff82:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff88:	009a      	lsls	r2, r3, #2
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff8e:	005b      	lsls	r3, r3, #1
 800ff90:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ff94:	428b      	cmp	r3, r1
 800ff96:	bf38      	it	cc
 800ff98:	460b      	movcc	r3, r1
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d204      	bcs.n	800ffa8 <tcp_process+0x460>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	e00d      	b.n	800ffc4 <tcp_process+0x47c>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d904      	bls.n	800ffc0 <tcp_process+0x478>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	e001      	b.n	800ffc4 <tcp_process+0x47c>
 800ffc0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ffca:	4b4e      	ldr	r3, [pc, #312]	@ (8010104 <tcp_process+0x5bc>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	f003 0320 	and.w	r3, r3, #32
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d037      	beq.n	8010046 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8b5b      	ldrh	r3, [r3, #26]
 800ffda:	f043 0302 	orr.w	r3, r3, #2
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2207      	movs	r2, #7
 800ffe8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ffea:	e02c      	b.n	8010046 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffec:	4b3b      	ldr	r3, [pc, #236]	@ (80100dc <tcp_process+0x594>)
 800ffee:	6819      	ldr	r1, [r3, #0]
 800fff0:	4b3b      	ldr	r3, [pc, #236]	@ (80100e0 <tcp_process+0x598>)
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	461a      	mov	r2, r3
 800fff6:	4b3b      	ldr	r3, [pc, #236]	@ (80100e4 <tcp_process+0x59c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fffc:	4b3a      	ldr	r3, [pc, #232]	@ (80100e8 <tcp_process+0x5a0>)
 800fffe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010000:	885b      	ldrh	r3, [r3, #2]
 8010002:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010004:	4a38      	ldr	r2, [pc, #224]	@ (80100e8 <tcp_process+0x5a0>)
 8010006:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010008:	8812      	ldrh	r2, [r2, #0]
 801000a:	b292      	uxth	r2, r2
 801000c:	9202      	str	r2, [sp, #8]
 801000e:	9301      	str	r3, [sp, #4]
 8010010:	4b36      	ldr	r3, [pc, #216]	@ (80100ec <tcp_process+0x5a4>)
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	4b36      	ldr	r3, [pc, #216]	@ (80100f0 <tcp_process+0x5a8>)
 8010016:	4602      	mov	r2, r0
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f003 f823 	bl	8013064 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801001e:	e167      	b.n	80102f0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010020:	4b2d      	ldr	r3, [pc, #180]	@ (80100d8 <tcp_process+0x590>)
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	f003 0302 	and.w	r3, r3, #2
 8010028:	2b00      	cmp	r3, #0
 801002a:	f000 8161 	beq.w	80102f0 <tcp_process+0x7a8>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010032:	1e5a      	subs	r2, r3, #1
 8010034:	4b2b      	ldr	r3, [pc, #172]	@ (80100e4 <tcp_process+0x59c>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	429a      	cmp	r2, r3
 801003a:	f040 8159 	bne.w	80102f0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f002 fe0a 	bl	8012c58 <tcp_rexmit>
      break;
 8010044:	e154      	b.n	80102f0 <tcp_process+0x7a8>
 8010046:	e153      	b.n	80102f0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f000 fa71 	bl	8010530 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801004e:	4b2d      	ldr	r3, [pc, #180]	@ (8010104 <tcp_process+0x5bc>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f003 0320 	and.w	r3, r3, #32
 8010056:	2b00      	cmp	r3, #0
 8010058:	f000 814c 	beq.w	80102f4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	8b5b      	ldrh	r3, [r3, #26]
 8010060:	f043 0302 	orr.w	r3, r3, #2
 8010064:	b29a      	uxth	r2, r3
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2207      	movs	r2, #7
 801006e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010070:	e140      	b.n	80102f4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fa5c 	bl	8010530 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010078:	4b22      	ldr	r3, [pc, #136]	@ (8010104 <tcp_process+0x5bc>)
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	f003 0320 	and.w	r3, r3, #32
 8010080:	2b00      	cmp	r3, #0
 8010082:	d071      	beq.n	8010168 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010084:	4b14      	ldr	r3, [pc, #80]	@ (80100d8 <tcp_process+0x590>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	f003 0310 	and.w	r3, r3, #16
 801008c:	2b00      	cmp	r3, #0
 801008e:	d060      	beq.n	8010152 <tcp_process+0x60a>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010094:	4b11      	ldr	r3, [pc, #68]	@ (80100dc <tcp_process+0x594>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	429a      	cmp	r2, r3
 801009a:	d15a      	bne.n	8010152 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d156      	bne.n	8010152 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	8b5b      	ldrh	r3, [r3, #26]
 80100a8:	f043 0302 	orr.w	r3, r3, #2
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7fe fdbc 	bl	800ec30 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80100b8:	4b13      	ldr	r3, [pc, #76]	@ (8010108 <tcp_process+0x5c0>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d105      	bne.n	80100ce <tcp_process+0x586>
 80100c2:	4b11      	ldr	r3, [pc, #68]	@ (8010108 <tcp_process+0x5c0>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	4a0f      	ldr	r2, [pc, #60]	@ (8010108 <tcp_process+0x5c0>)
 80100ca:	6013      	str	r3, [r2, #0]
 80100cc:	e02e      	b.n	801012c <tcp_process+0x5e4>
 80100ce:	4b0e      	ldr	r3, [pc, #56]	@ (8010108 <tcp_process+0x5c0>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	617b      	str	r3, [r7, #20]
 80100d4:	e027      	b.n	8010126 <tcp_process+0x5de>
 80100d6:	bf00      	nop
 80100d8:	2000c5e8 	.word	0x2000c5e8
 80100dc:	2000c5e0 	.word	0x2000c5e0
 80100e0:	2000c5e6 	.word	0x2000c5e6
 80100e4:	2000c5dc 	.word	0x2000c5dc
 80100e8:	2000c5cc 	.word	0x2000c5cc
 80100ec:	20008e60 	.word	0x20008e60
 80100f0:	20008e64 	.word	0x20008e64
 80100f4:	080195b0 	.word	0x080195b0
 80100f8:	08019850 	.word	0x08019850
 80100fc:	080195fc 	.word	0x080195fc
 8010100:	2000c5e4 	.word	0x2000c5e4
 8010104:	2000c5e9 	.word	0x2000c5e9
 8010108:	2000c5b0 	.word	0x2000c5b0
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	429a      	cmp	r2, r3
 8010114:	d104      	bne.n	8010120 <tcp_process+0x5d8>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	68da      	ldr	r2, [r3, #12]
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	60da      	str	r2, [r3, #12]
 801011e:	e005      	b.n	801012c <tcp_process+0x5e4>
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	617b      	str	r3, [r7, #20]
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1ef      	bne.n	801010c <tcp_process+0x5c4>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	60da      	str	r2, [r3, #12]
 8010132:	4b77      	ldr	r3, [pc, #476]	@ (8010310 <tcp_process+0x7c8>)
 8010134:	2201      	movs	r2, #1
 8010136:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	220a      	movs	r2, #10
 801013c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801013e:	4b75      	ldr	r3, [pc, #468]	@ (8010314 <tcp_process+0x7cc>)
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	60da      	str	r2, [r3, #12]
 8010146:	4a73      	ldr	r2, [pc, #460]	@ (8010314 <tcp_process+0x7cc>)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6013      	str	r3, [r2, #0]
 801014c:	f003 f94c 	bl	80133e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010150:	e0d2      	b.n	80102f8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	8b5b      	ldrh	r3, [r3, #26]
 8010156:	f043 0302 	orr.w	r3, r3, #2
 801015a:	b29a      	uxth	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2208      	movs	r2, #8
 8010164:	751a      	strb	r2, [r3, #20]
      break;
 8010166:	e0c7      	b.n	80102f8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010168:	4b6b      	ldr	r3, [pc, #428]	@ (8010318 <tcp_process+0x7d0>)
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	f003 0310 	and.w	r3, r3, #16
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 80c1 	beq.w	80102f8 <tcp_process+0x7b0>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801017a:	4b68      	ldr	r3, [pc, #416]	@ (801031c <tcp_process+0x7d4>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	f040 80ba 	bne.w	80102f8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010188:	2b00      	cmp	r3, #0
 801018a:	f040 80b5 	bne.w	80102f8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2206      	movs	r2, #6
 8010192:	751a      	strb	r2, [r3, #20]
      break;
 8010194:	e0b0      	b.n	80102f8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f9ca 	bl	8010530 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801019c:	4b60      	ldr	r3, [pc, #384]	@ (8010320 <tcp_process+0x7d8>)
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	f003 0320 	and.w	r3, r3, #32
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f000 80a9 	beq.w	80102fc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	8b5b      	ldrh	r3, [r3, #26]
 80101ae:	f043 0302 	orr.w	r3, r3, #2
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7fe fd39 	bl	800ec30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80101be:	4b59      	ldr	r3, [pc, #356]	@ (8010324 <tcp_process+0x7dc>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d105      	bne.n	80101d4 <tcp_process+0x68c>
 80101c8:	4b56      	ldr	r3, [pc, #344]	@ (8010324 <tcp_process+0x7dc>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	4a55      	ldr	r2, [pc, #340]	@ (8010324 <tcp_process+0x7dc>)
 80101d0:	6013      	str	r3, [r2, #0]
 80101d2:	e013      	b.n	80101fc <tcp_process+0x6b4>
 80101d4:	4b53      	ldr	r3, [pc, #332]	@ (8010324 <tcp_process+0x7dc>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	613b      	str	r3, [r7, #16]
 80101da:	e00c      	b.n	80101f6 <tcp_process+0x6ae>
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d104      	bne.n	80101f0 <tcp_process+0x6a8>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	68da      	ldr	r2, [r3, #12]
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	60da      	str	r2, [r3, #12]
 80101ee:	e005      	b.n	80101fc <tcp_process+0x6b4>
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	613b      	str	r3, [r7, #16]
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1ef      	bne.n	80101dc <tcp_process+0x694>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	60da      	str	r2, [r3, #12]
 8010202:	4b43      	ldr	r3, [pc, #268]	@ (8010310 <tcp_process+0x7c8>)
 8010204:	2201      	movs	r2, #1
 8010206:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	220a      	movs	r2, #10
 801020c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801020e:	4b41      	ldr	r3, [pc, #260]	@ (8010314 <tcp_process+0x7cc>)
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	60da      	str	r2, [r3, #12]
 8010216:	4a3f      	ldr	r2, [pc, #252]	@ (8010314 <tcp_process+0x7cc>)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	f003 f8e4 	bl	80133e8 <tcp_timer_needed>
      }
      break;
 8010220:	e06c      	b.n	80102fc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 f984 	bl	8010530 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010228:	4b3b      	ldr	r3, [pc, #236]	@ (8010318 <tcp_process+0x7d0>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f003 0310 	and.w	r3, r3, #16
 8010230:	2b00      	cmp	r3, #0
 8010232:	d065      	beq.n	8010300 <tcp_process+0x7b8>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010238:	4b38      	ldr	r3, [pc, #224]	@ (801031c <tcp_process+0x7d4>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	429a      	cmp	r2, r3
 801023e:	d15f      	bne.n	8010300 <tcp_process+0x7b8>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010244:	2b00      	cmp	r3, #0
 8010246:	d15b      	bne.n	8010300 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7fe fcf1 	bl	800ec30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801024e:	4b35      	ldr	r3, [pc, #212]	@ (8010324 <tcp_process+0x7dc>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	429a      	cmp	r2, r3
 8010256:	d105      	bne.n	8010264 <tcp_process+0x71c>
 8010258:	4b32      	ldr	r3, [pc, #200]	@ (8010324 <tcp_process+0x7dc>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	4a31      	ldr	r2, [pc, #196]	@ (8010324 <tcp_process+0x7dc>)
 8010260:	6013      	str	r3, [r2, #0]
 8010262:	e013      	b.n	801028c <tcp_process+0x744>
 8010264:	4b2f      	ldr	r3, [pc, #188]	@ (8010324 <tcp_process+0x7dc>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	60fb      	str	r3, [r7, #12]
 801026a:	e00c      	b.n	8010286 <tcp_process+0x73e>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	687a      	ldr	r2, [r7, #4]
 8010272:	429a      	cmp	r2, r3
 8010274:	d104      	bne.n	8010280 <tcp_process+0x738>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	68da      	ldr	r2, [r3, #12]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	60da      	str	r2, [r3, #12]
 801027e:	e005      	b.n	801028c <tcp_process+0x744>
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	60fb      	str	r3, [r7, #12]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d1ef      	bne.n	801026c <tcp_process+0x724>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2200      	movs	r2, #0
 8010290:	60da      	str	r2, [r3, #12]
 8010292:	4b1f      	ldr	r3, [pc, #124]	@ (8010310 <tcp_process+0x7c8>)
 8010294:	2201      	movs	r2, #1
 8010296:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	220a      	movs	r2, #10
 801029c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801029e:	4b1d      	ldr	r3, [pc, #116]	@ (8010314 <tcp_process+0x7cc>)
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	60da      	str	r2, [r3, #12]
 80102a6:	4a1b      	ldr	r2, [pc, #108]	@ (8010314 <tcp_process+0x7cc>)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6013      	str	r3, [r2, #0]
 80102ac:	f003 f89c 	bl	80133e8 <tcp_timer_needed>
      }
      break;
 80102b0:	e026      	b.n	8010300 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 f93c 	bl	8010530 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102b8:	4b17      	ldr	r3, [pc, #92]	@ (8010318 <tcp_process+0x7d0>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	f003 0310 	and.w	r3, r3, #16
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d01f      	beq.n	8010304 <tcp_process+0x7bc>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102c8:	4b14      	ldr	r3, [pc, #80]	@ (801031c <tcp_process+0x7d4>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d119      	bne.n	8010304 <tcp_process+0x7bc>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d115      	bne.n	8010304 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80102d8:	4b11      	ldr	r3, [pc, #68]	@ (8010320 <tcp_process+0x7d8>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	f043 0310 	orr.w	r3, r3, #16
 80102e0:	b2da      	uxtb	r2, r3
 80102e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010320 <tcp_process+0x7d8>)
 80102e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80102e6:	e00d      	b.n	8010304 <tcp_process+0x7bc>
    default:
      break;
 80102e8:	bf00      	nop
 80102ea:	e00c      	b.n	8010306 <tcp_process+0x7be>
      break;
 80102ec:	bf00      	nop
 80102ee:	e00a      	b.n	8010306 <tcp_process+0x7be>
      break;
 80102f0:	bf00      	nop
 80102f2:	e008      	b.n	8010306 <tcp_process+0x7be>
      break;
 80102f4:	bf00      	nop
 80102f6:	e006      	b.n	8010306 <tcp_process+0x7be>
      break;
 80102f8:	bf00      	nop
 80102fa:	e004      	b.n	8010306 <tcp_process+0x7be>
      break;
 80102fc:	bf00      	nop
 80102fe:	e002      	b.n	8010306 <tcp_process+0x7be>
      break;
 8010300:	bf00      	nop
 8010302:	e000      	b.n	8010306 <tcp_process+0x7be>
      break;
 8010304:	bf00      	nop
  }
  return ERR_OK;
 8010306:	2300      	movs	r3, #0
}
 8010308:	4618      	mov	r0, r3
 801030a:	3724      	adds	r7, #36	@ 0x24
 801030c:	46bd      	mov	sp, r7
 801030e:	bd90      	pop	{r4, r7, pc}
 8010310:	2000c5b8 	.word	0x2000c5b8
 8010314:	2000c5b4 	.word	0x2000c5b4
 8010318:	2000c5e8 	.word	0x2000c5e8
 801031c:	2000c5e0 	.word	0x2000c5e0
 8010320:	2000c5e9 	.word	0x2000c5e9
 8010324:	2000c5b0 	.word	0x2000c5b0

08010328 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010328:	b590      	push	{r4, r7, lr}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d106      	bne.n	8010346 <tcp_oos_insert_segment+0x1e>
 8010338:	4b3b      	ldr	r3, [pc, #236]	@ (8010428 <tcp_oos_insert_segment+0x100>)
 801033a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801033e:	493b      	ldr	r1, [pc, #236]	@ (801042c <tcp_oos_insert_segment+0x104>)
 8010340:	483b      	ldr	r0, [pc, #236]	@ (8010430 <tcp_oos_insert_segment+0x108>)
 8010342:	f7f0 fec5 	bl	80010d0 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	899b      	ldrh	r3, [r3, #12]
 801034c:	b29b      	uxth	r3, r3
 801034e:	4618      	mov	r0, r3
 8010350:	f7fb f986 	bl	800b660 <lwip_htons>
 8010354:	4603      	mov	r3, r0
 8010356:	b2db      	uxtb	r3, r3
 8010358:	f003 0301 	and.w	r3, r3, #1
 801035c:	2b00      	cmp	r3, #0
 801035e:	d028      	beq.n	80103b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010360:	6838      	ldr	r0, [r7, #0]
 8010362:	f7fe f995 	bl	800e690 <tcp_segs_free>
    next = NULL;
 8010366:	2300      	movs	r3, #0
 8010368:	603b      	str	r3, [r7, #0]
 801036a:	e056      	b.n	801041a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	899b      	ldrh	r3, [r3, #12]
 8010372:	b29b      	uxth	r3, r3
 8010374:	4618      	mov	r0, r3
 8010376:	f7fb f973 	bl	800b660 <lwip_htons>
 801037a:	4603      	mov	r3, r0
 801037c:	b2db      	uxtb	r3, r3
 801037e:	f003 0301 	and.w	r3, r3, #1
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00d      	beq.n	80103a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	899b      	ldrh	r3, [r3, #12]
 801038c:	b29c      	uxth	r4, r3
 801038e:	2001      	movs	r0, #1
 8010390:	f7fb f966 	bl	800b660 <lwip_htons>
 8010394:	4603      	mov	r3, r0
 8010396:	461a      	mov	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	4322      	orrs	r2, r4
 801039e:	b292      	uxth	r2, r2
 80103a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f7fe f984 	bl	800e6ba <tcp_seg_free>
    while (next &&
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00e      	beq.n	80103d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	891b      	ldrh	r3, [r3, #8]
 80103bc:	461a      	mov	r2, r3
 80103be:	4b1d      	ldr	r3, [pc, #116]	@ (8010434 <tcp_oos_insert_segment+0x10c>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	441a      	add	r2, r3
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	6839      	ldr	r1, [r7, #0]
 80103cc:	8909      	ldrh	r1, [r1, #8]
 80103ce:	440b      	add	r3, r1
 80103d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	daca      	bge.n	801036c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d01e      	beq.n	801041a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	891b      	ldrh	r3, [r3, #8]
 80103e0:	461a      	mov	r2, r3
 80103e2:	4b14      	ldr	r3, [pc, #80]	@ (8010434 <tcp_oos_insert_segment+0x10c>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	441a      	add	r2, r3
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	dd12      	ble.n	801041a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010434 <tcp_oos_insert_segment+0x10c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	b29b      	uxth	r3, r3
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	b29a      	uxth	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685a      	ldr	r2, [r3, #4]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	891b      	ldrh	r3, [r3, #8]
 8010412:	4619      	mov	r1, r3
 8010414:	4610      	mov	r0, r2
 8010416:	f7fc fb8f 	bl	800cb38 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	683a      	ldr	r2, [r7, #0]
 801041e:	601a      	str	r2, [r3, #0]
}
 8010420:	bf00      	nop
 8010422:	3714      	adds	r7, #20
 8010424:	46bd      	mov	sp, r7
 8010426:	bd90      	pop	{r4, r7, pc}
 8010428:	080195b0 	.word	0x080195b0
 801042c:	08019870 	.word	0x08019870
 8010430:	080195fc 	.word	0x080195fc
 8010434:	2000c5dc 	.word	0x2000c5dc

08010438 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010438:	b5b0      	push	{r4, r5, r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	607a      	str	r2, [r7, #4]
 8010444:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010446:	e03e      	b.n	80104c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	4618      	mov	r0, r3
 8010458:	f7fc fd82 	bl	800cf60 <pbuf_clen>
 801045c:	4603      	mov	r3, r0
 801045e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010466:	8a7a      	ldrh	r2, [r7, #18]
 8010468:	429a      	cmp	r2, r3
 801046a:	d906      	bls.n	801047a <tcp_free_acked_segments+0x42>
 801046c:	4b2a      	ldr	r3, [pc, #168]	@ (8010518 <tcp_free_acked_segments+0xe0>)
 801046e:	f240 4257 	movw	r2, #1111	@ 0x457
 8010472:	492a      	ldr	r1, [pc, #168]	@ (801051c <tcp_free_acked_segments+0xe4>)
 8010474:	482a      	ldr	r0, [pc, #168]	@ (8010520 <tcp_free_acked_segments+0xe8>)
 8010476:	f7f0 fe2b 	bl	80010d0 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010480:	8a7b      	ldrh	r3, [r7, #18]
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	b29a      	uxth	r2, r3
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	891a      	ldrh	r2, [r3, #8]
 8010490:	4b24      	ldr	r3, [pc, #144]	@ (8010524 <tcp_free_acked_segments+0xec>)
 8010492:	881b      	ldrh	r3, [r3, #0]
 8010494:	4413      	add	r3, r2
 8010496:	b29a      	uxth	r2, r3
 8010498:	4b22      	ldr	r3, [pc, #136]	@ (8010524 <tcp_free_acked_segments+0xec>)
 801049a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801049c:	6978      	ldr	r0, [r7, #20]
 801049e:	f7fe f90c 	bl	800e6ba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d00c      	beq.n	80104c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d109      	bne.n	80104c6 <tcp_free_acked_segments+0x8e>
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d106      	bne.n	80104c6 <tcp_free_acked_segments+0x8e>
 80104b8:	4b17      	ldr	r3, [pc, #92]	@ (8010518 <tcp_free_acked_segments+0xe0>)
 80104ba:	f240 4261 	movw	r2, #1121	@ 0x461
 80104be:	491a      	ldr	r1, [pc, #104]	@ (8010528 <tcp_free_acked_segments+0xf0>)
 80104c0:	4817      	ldr	r0, [pc, #92]	@ (8010520 <tcp_free_acked_segments+0xe8>)
 80104c2:	f7f0 fe05 	bl	80010d0 <printf>
  while (seg_list != NULL &&
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d020      	beq.n	801050e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fb f8d9 	bl	800b68a <lwip_htonl>
 80104d8:	4604      	mov	r4, r0
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	891b      	ldrh	r3, [r3, #8]
 80104de:	461d      	mov	r5, r3
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	899b      	ldrh	r3, [r3, #12]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7fb f8b9 	bl	800b660 <lwip_htons>
 80104ee:	4603      	mov	r3, r0
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	f003 0303 	and.w	r3, r3, #3
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d001      	beq.n	80104fe <tcp_free_acked_segments+0xc6>
 80104fa:	2301      	movs	r3, #1
 80104fc:	e000      	b.n	8010500 <tcp_free_acked_segments+0xc8>
 80104fe:	2300      	movs	r3, #0
 8010500:	442b      	add	r3, r5
 8010502:	18e2      	adds	r2, r4, r3
 8010504:	4b09      	ldr	r3, [pc, #36]	@ (801052c <tcp_free_acked_segments+0xf4>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801050a:	2b00      	cmp	r3, #0
 801050c:	dd9c      	ble.n	8010448 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801050e:	68bb      	ldr	r3, [r7, #8]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bdb0      	pop	{r4, r5, r7, pc}
 8010518:	080195b0 	.word	0x080195b0
 801051c:	08019898 	.word	0x08019898
 8010520:	080195fc 	.word	0x080195fc
 8010524:	2000c5e4 	.word	0x2000c5e4
 8010528:	080198c0 	.word	0x080198c0
 801052c:	2000c5e0 	.word	0x2000c5e0

08010530 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010530:	b5b0      	push	{r4, r5, r7, lr}
 8010532:	b094      	sub	sp, #80	@ 0x50
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <tcp_receive+0x20>
 8010542:	4b91      	ldr	r3, [pc, #580]	@ (8010788 <tcp_receive+0x258>)
 8010544:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010548:	4990      	ldr	r1, [pc, #576]	@ (801078c <tcp_receive+0x25c>)
 801054a:	4891      	ldr	r0, [pc, #580]	@ (8010790 <tcp_receive+0x260>)
 801054c:	f7f0 fdc0 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	7d1b      	ldrb	r3, [r3, #20]
 8010554:	2b03      	cmp	r3, #3
 8010556:	d806      	bhi.n	8010566 <tcp_receive+0x36>
 8010558:	4b8b      	ldr	r3, [pc, #556]	@ (8010788 <tcp_receive+0x258>)
 801055a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801055e:	498d      	ldr	r1, [pc, #564]	@ (8010794 <tcp_receive+0x264>)
 8010560:	488b      	ldr	r0, [pc, #556]	@ (8010790 <tcp_receive+0x260>)
 8010562:	f7f0 fdb5 	bl	80010d0 <printf>

  if (flags & TCP_ACK) {
 8010566:	4b8c      	ldr	r3, [pc, #560]	@ (8010798 <tcp_receive+0x268>)
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	f003 0310 	and.w	r3, r3, #16
 801056e:	2b00      	cmp	r3, #0
 8010570:	f000 8264 	beq.w	8010a3c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801057a:	461a      	mov	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010580:	4413      	add	r3, r2
 8010582:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010588:	4b84      	ldr	r3, [pc, #528]	@ (801079c <tcp_receive+0x26c>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	db1b      	blt.n	80105ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010596:	4b81      	ldr	r3, [pc, #516]	@ (801079c <tcp_receive+0x26c>)
 8010598:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801059a:	429a      	cmp	r2, r3
 801059c:	d106      	bne.n	80105ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105a2:	4b7f      	ldr	r3, [pc, #508]	@ (80107a0 <tcp_receive+0x270>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	db0e      	blt.n	80105ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105b0:	4b7b      	ldr	r3, [pc, #492]	@ (80107a0 <tcp_receive+0x270>)
 80105b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d125      	bne.n	8010604 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105b8:	4b7a      	ldr	r3, [pc, #488]	@ (80107a4 <tcp_receive+0x274>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	89db      	ldrh	r3, [r3, #14]
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d91c      	bls.n	8010604 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80105ca:	4b76      	ldr	r3, [pc, #472]	@ (80107a4 <tcp_receive+0x274>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	89db      	ldrh	r3, [r3, #14]
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d205      	bcs.n	80105f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80105f4:	4b69      	ldr	r3, [pc, #420]	@ (801079c <tcp_receive+0x26c>)
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80105fc:	4b68      	ldr	r3, [pc, #416]	@ (80107a0 <tcp_receive+0x270>)
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010604:	4b66      	ldr	r3, [pc, #408]	@ (80107a0 <tcp_receive+0x270>)
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	dc58      	bgt.n	80106c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010612:	4b65      	ldr	r3, [pc, #404]	@ (80107a8 <tcp_receive+0x278>)
 8010614:	881b      	ldrh	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d14b      	bne.n	80106b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010624:	4413      	add	r3, r2
 8010626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010628:	429a      	cmp	r2, r3
 801062a:	d142      	bne.n	80106b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010632:	2b00      	cmp	r3, #0
 8010634:	db3d      	blt.n	80106b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801063a:	4b59      	ldr	r3, [pc, #356]	@ (80107a0 <tcp_receive+0x270>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	429a      	cmp	r2, r3
 8010640:	d137      	bne.n	80106b2 <tcp_receive+0x182>
              found_dupack = 1;
 8010642:	2301      	movs	r3, #1
 8010644:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801064c:	2bff      	cmp	r3, #255	@ 0xff
 801064e:	d007      	beq.n	8010660 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010656:	3301      	adds	r3, #1
 8010658:	b2da      	uxtb	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010666:	2b03      	cmp	r3, #3
 8010668:	d91b      	bls.n	80106a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010674:	4413      	add	r3, r2
 8010676:	b29a      	uxth	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801067e:	429a      	cmp	r2, r3
 8010680:	d30a      	bcc.n	8010698 <tcp_receive+0x168>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801068c:	4413      	add	r3, r2
 801068e:	b29a      	uxth	r2, r3
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010696:	e004      	b.n	80106a2 <tcp_receive+0x172>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801069e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80106a8:	2b02      	cmp	r3, #2
 80106aa:	d902      	bls.n	80106b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f002 fb3f 	bl	8012d30 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80106b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f040 8161 	bne.w	801097c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2200      	movs	r2, #0
 80106be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80106c2:	e15b      	b.n	801097c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106c4:	4b36      	ldr	r3, [pc, #216]	@ (80107a0 <tcp_receive+0x270>)
 80106c6:	681a      	ldr	r2, [r3, #0]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106cc:	1ad3      	subs	r3, r2, r3
 80106ce:	3b01      	subs	r3, #1
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f2c0 814e 	blt.w	8010972 <tcp_receive+0x442>
 80106d6:	4b32      	ldr	r3, [pc, #200]	@ (80107a0 <tcp_receive+0x270>)
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f300 8146 	bgt.w	8010972 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	8b5b      	ldrh	r3, [r3, #26]
 80106ea:	f003 0304 	and.w	r3, r3, #4
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d010      	beq.n	8010714 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	8b5b      	ldrh	r3, [r3, #26]
 80106f6:	f023 0304 	bic.w	r3, r3, #4
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010722:	10db      	asrs	r3, r3, #3
 8010724:	b21b      	sxth	r3, r3
 8010726:	b29a      	uxth	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801072e:	b29b      	uxth	r3, r3
 8010730:	4413      	add	r3, r2
 8010732:	b29b      	uxth	r3, r3
 8010734:	b21a      	sxth	r2, r3
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801073c:	4b18      	ldr	r3, [pc, #96]	@ (80107a0 <tcp_receive+0x270>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	b29a      	uxth	r2, r3
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010746:	b29b      	uxth	r3, r3
 8010748:	1ad3      	subs	r3, r2, r3
 801074a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010754:	4b12      	ldr	r3, [pc, #72]	@ (80107a0 <tcp_receive+0x270>)
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	7d1b      	ldrb	r3, [r3, #20]
 8010760:	2b03      	cmp	r3, #3
 8010762:	f240 8097 	bls.w	8010894 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010772:	429a      	cmp	r2, r3
 8010774:	d245      	bcs.n	8010802 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	8b5b      	ldrh	r3, [r3, #26]
 801077a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801077e:	2b00      	cmp	r3, #0
 8010780:	d014      	beq.n	80107ac <tcp_receive+0x27c>
 8010782:	2301      	movs	r3, #1
 8010784:	e013      	b.n	80107ae <tcp_receive+0x27e>
 8010786:	bf00      	nop
 8010788:	080195b0 	.word	0x080195b0
 801078c:	080198e0 	.word	0x080198e0
 8010790:	080195fc 	.word	0x080195fc
 8010794:	080198fc 	.word	0x080198fc
 8010798:	2000c5e8 	.word	0x2000c5e8
 801079c:	2000c5dc 	.word	0x2000c5dc
 80107a0:	2000c5e0 	.word	0x2000c5e0
 80107a4:	2000c5cc 	.word	0x2000c5cc
 80107a8:	2000c5e6 	.word	0x2000c5e6
 80107ac:	2302      	movs	r3, #2
 80107ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80107b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107bc:	fb12 f303 	smulbb	r3, r2, r3
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80107c4:	4293      	cmp	r3, r2
 80107c6:	bf28      	it	cs
 80107c8:	4613      	movcs	r3, r2
 80107ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80107d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80107d4:	4413      	add	r3, r2
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80107de:	429a      	cmp	r2, r3
 80107e0:	d309      	bcc.n	80107f6 <tcp_receive+0x2c6>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80107e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80107ea:	4413      	add	r3, r2
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80107f4:	e04e      	b.n	8010894 <tcp_receive+0x364>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80107fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010800:	e048      	b.n	8010894 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010808:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801080a:	4413      	add	r3, r2
 801080c:	b29a      	uxth	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010814:	429a      	cmp	r2, r3
 8010816:	d309      	bcc.n	801082c <tcp_receive+0x2fc>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801081e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010820:	4413      	add	r3, r2
 8010822:	b29a      	uxth	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801082a:	e004      	b.n	8010836 <tcp_receive+0x306>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010842:	429a      	cmp	r2, r3
 8010844:	d326      	bcc.n	8010894 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29a      	uxth	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010866:	4413      	add	r3, r2
 8010868:	b29a      	uxth	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010870:	429a      	cmp	r2, r3
 8010872:	d30a      	bcc.n	801088a <tcp_receive+0x35a>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801087e:	4413      	add	r3, r2
 8010880:	b29a      	uxth	r2, r3
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010888:	e004      	b.n	8010894 <tcp_receive+0x364>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010890:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801089c:	4a98      	ldr	r2, [pc, #608]	@ (8010b00 <tcp_receive+0x5d0>)
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f7ff fdca 	bl	8010438 <tcp_free_acked_segments>
 80108a4:	4602      	mov	r2, r0
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108b2:	4a94      	ldr	r2, [pc, #592]	@ (8010b04 <tcp_receive+0x5d4>)
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff fdbf 	bl	8010438 <tcp_free_acked_segments>
 80108ba:	4602      	mov	r2, r0
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d104      	bne.n	80108d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108ce:	861a      	strh	r2, [r3, #48]	@ 0x30
 80108d0:	e002      	b.n	80108d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d103      	bne.n	80108ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80108f4:	4b84      	ldr	r3, [pc, #528]	@ (8010b08 <tcp_receive+0x5d8>)
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	4413      	add	r3, r2
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	8b5b      	ldrh	r3, [r3, #26]
 8010906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801090a:	2b00      	cmp	r3, #0
 801090c:	d035      	beq.n	801097a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010912:	2b00      	cmp	r3, #0
 8010914:	d118      	bne.n	8010948 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00c      	beq.n	8010938 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	4618      	mov	r0, r3
 801092c:	f7fa fead 	bl	800b68a <lwip_htonl>
 8010930:	4603      	mov	r3, r0
 8010932:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010934:	2b00      	cmp	r3, #0
 8010936:	dc20      	bgt.n	801097a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	8b5b      	ldrh	r3, [r3, #26]
 801093c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010940:	b29a      	uxth	r2, r3
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010946:	e018      	b.n	801097a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	4618      	mov	r0, r3
 8010956:	f7fa fe98 	bl	800b68a <lwip_htonl>
 801095a:	4603      	mov	r3, r0
 801095c:	1ae3      	subs	r3, r4, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	dc0b      	bgt.n	801097a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	8b5b      	ldrh	r3, [r3, #26]
 8010966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801096a:	b29a      	uxth	r2, r3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010970:	e003      	b.n	801097a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f002 fbc8 	bl	8013108 <tcp_send_empty_ack>
 8010978:	e000      	b.n	801097c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801097a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010980:	2b00      	cmp	r3, #0
 8010982:	d05b      	beq.n	8010a3c <tcp_receive+0x50c>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010988:	4b60      	ldr	r3, [pc, #384]	@ (8010b0c <tcp_receive+0x5dc>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	1ad3      	subs	r3, r2, r3
 801098e:	2b00      	cmp	r3, #0
 8010990:	da54      	bge.n	8010a3c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010992:	4b5f      	ldr	r3, [pc, #380]	@ (8010b10 <tcp_receive+0x5e0>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	b29a      	uxth	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801099c:	b29b      	uxth	r3, r3
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80109a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109b0:	10db      	asrs	r3, r3, #3
 80109b2:	b21b      	sxth	r3, r3
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	1ad3      	subs	r3, r2, r3
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80109ca:	4413      	add	r3, r2
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	b21a      	sxth	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80109d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80109d8:	2b00      	cmp	r3, #0
 80109da:	da05      	bge.n	80109e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80109dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80109e0:	425b      	negs	r3, r3
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80109e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80109f2:	109b      	asrs	r3, r3, #2
 80109f4:	b21b      	sxth	r3, r3
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	1ad3      	subs	r3, r2, r3
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010a0c:	4413      	add	r3, r2
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	b21a      	sxth	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010a1c:	10db      	asrs	r3, r3, #3
 8010a1e:	b21b      	sxth	r3, r3
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	4413      	add	r3, r2
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	b21a      	sxth	r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010a3c:	4b35      	ldr	r3, [pc, #212]	@ (8010b14 <tcp_receive+0x5e4>)
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 84df 	beq.w	8011404 <tcp_receive+0xed4>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7d1b      	ldrb	r3, [r3, #20]
 8010a4a:	2b06      	cmp	r3, #6
 8010a4c:	f200 84da 	bhi.w	8011404 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a54:	4b30      	ldr	r3, [pc, #192]	@ (8010b18 <tcp_receive+0x5e8>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	1ad3      	subs	r3, r2, r3
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f2c0 808f 	blt.w	8010b80 <tcp_receive+0x650>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a66:	4b2b      	ldr	r3, [pc, #172]	@ (8010b14 <tcp_receive+0x5e4>)
 8010a68:	881b      	ldrh	r3, [r3, #0]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8010b18 <tcp_receive+0x5e8>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	440b      	add	r3, r1
 8010a72:	1ad3      	subs	r3, r2, r3
 8010a74:	3301      	adds	r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f300 8082 	bgt.w	8010b80 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010a7c:	4b27      	ldr	r3, [pc, #156]	@ (8010b1c <tcp_receive+0x5ec>)
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a86:	4b24      	ldr	r3, [pc, #144]	@ (8010b18 <tcp_receive+0x5e8>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010a8e:	4b23      	ldr	r3, [pc, #140]	@ (8010b1c <tcp_receive+0x5ec>)
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d106      	bne.n	8010aa4 <tcp_receive+0x574>
 8010a96:	4b22      	ldr	r3, [pc, #136]	@ (8010b20 <tcp_receive+0x5f0>)
 8010a98:	f240 5294 	movw	r2, #1428	@ 0x594
 8010a9c:	4921      	ldr	r1, [pc, #132]	@ (8010b24 <tcp_receive+0x5f4>)
 8010a9e:	4822      	ldr	r0, [pc, #136]	@ (8010b28 <tcp_receive+0x5f8>)
 8010aa0:	f7f0 fb16 	bl	80010d0 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d906      	bls.n	8010abc <tcp_receive+0x58c>
 8010aae:	4b1c      	ldr	r3, [pc, #112]	@ (8010b20 <tcp_receive+0x5f0>)
 8010ab0:	f240 5295 	movw	r2, #1429	@ 0x595
 8010ab4:	491d      	ldr	r1, [pc, #116]	@ (8010b2c <tcp_receive+0x5fc>)
 8010ab6:	481c      	ldr	r0, [pc, #112]	@ (8010b28 <tcp_receive+0x5f8>)
 8010ab8:	f7f0 fb0a 	bl	80010d0 <printf>
      off = (u16_t)off32;
 8010abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010abe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ac2:	4b16      	ldr	r3, [pc, #88]	@ (8010b1c <tcp_receive+0x5ec>)
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	891b      	ldrh	r3, [r3, #8]
 8010ac8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d906      	bls.n	8010ade <tcp_receive+0x5ae>
 8010ad0:	4b13      	ldr	r3, [pc, #76]	@ (8010b20 <tcp_receive+0x5f0>)
 8010ad2:	f240 5297 	movw	r2, #1431	@ 0x597
 8010ad6:	4916      	ldr	r1, [pc, #88]	@ (8010b30 <tcp_receive+0x600>)
 8010ad8:	4813      	ldr	r0, [pc, #76]	@ (8010b28 <tcp_receive+0x5f8>)
 8010ada:	f7f0 faf9 	bl	80010d0 <printf>
      inseg.len -= off;
 8010ade:	4b0f      	ldr	r3, [pc, #60]	@ (8010b1c <tcp_receive+0x5ec>)
 8010ae0:	891a      	ldrh	r2, [r3, #8]
 8010ae2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	4b0c      	ldr	r3, [pc, #48]	@ (8010b1c <tcp_receive+0x5ec>)
 8010aec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010aee:	4b0b      	ldr	r3, [pc, #44]	@ (8010b1c <tcp_receive+0x5ec>)
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	891a      	ldrh	r2, [r3, #8]
 8010af4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010afc:	e02a      	b.n	8010b54 <tcp_receive+0x624>
 8010afe:	bf00      	nop
 8010b00:	08019918 	.word	0x08019918
 8010b04:	08019920 	.word	0x08019920
 8010b08:	2000c5e4 	.word	0x2000c5e4
 8010b0c:	2000c5e0 	.word	0x2000c5e0
 8010b10:	2000c5a4 	.word	0x2000c5a4
 8010b14:	2000c5e6 	.word	0x2000c5e6
 8010b18:	2000c5dc 	.word	0x2000c5dc
 8010b1c:	2000c5bc 	.word	0x2000c5bc
 8010b20:	080195b0 	.word	0x080195b0
 8010b24:	08019928 	.word	0x08019928
 8010b28:	080195fc 	.word	0x080195fc
 8010b2c:	08019938 	.word	0x08019938
 8010b30:	08019948 	.word	0x08019948
        off -= p->len;
 8010b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b36:	895b      	ldrh	r3, [r3, #10]
 8010b38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b3c:	1ad3      	subs	r3, r2, r3
 8010b3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b44:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010b46:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b56:	895b      	ldrh	r3, [r3, #10]
 8010b58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d8e9      	bhi.n	8010b34 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010b60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b64:	4619      	mov	r1, r3
 8010b66:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010b68:	f7fc f8e6 	bl	800cd38 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b70:	4a90      	ldr	r2, [pc, #576]	@ (8010db4 <tcp_receive+0x884>)
 8010b72:	6013      	str	r3, [r2, #0]
 8010b74:	4b90      	ldr	r3, [pc, #576]	@ (8010db8 <tcp_receive+0x888>)
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	4a8e      	ldr	r2, [pc, #568]	@ (8010db4 <tcp_receive+0x884>)
 8010b7a:	6812      	ldr	r2, [r2, #0]
 8010b7c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010b7e:	e00d      	b.n	8010b9c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010b80:	4b8c      	ldr	r3, [pc, #560]	@ (8010db4 <tcp_receive+0x884>)
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	da06      	bge.n	8010b9c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	8b5b      	ldrh	r3, [r3, #26]
 8010b92:	f043 0302 	orr.w	r3, r3, #2
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b9c:	4b85      	ldr	r3, [pc, #532]	@ (8010db4 <tcp_receive+0x884>)
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ba4:	1ad3      	subs	r3, r2, r3
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f2c0 8427 	blt.w	80113fa <tcp_receive+0xeca>
 8010bac:	4b81      	ldr	r3, [pc, #516]	@ (8010db4 <tcp_receive+0x884>)
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bb4:	6879      	ldr	r1, [r7, #4]
 8010bb6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010bb8:	440b      	add	r3, r1
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f300 841b 	bgt.w	80113fa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bc8:	4b7a      	ldr	r3, [pc, #488]	@ (8010db4 <tcp_receive+0x884>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	f040 8298 	bne.w	8011102 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010bd2:	4b79      	ldr	r3, [pc, #484]	@ (8010db8 <tcp_receive+0x888>)
 8010bd4:	891c      	ldrh	r4, [r3, #8]
 8010bd6:	4b78      	ldr	r3, [pc, #480]	@ (8010db8 <tcp_receive+0x888>)
 8010bd8:	68db      	ldr	r3, [r3, #12]
 8010bda:	899b      	ldrh	r3, [r3, #12]
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7fa fd3e 	bl	800b660 <lwip_htons>
 8010be4:	4603      	mov	r3, r0
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	f003 0303 	and.w	r3, r3, #3
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d001      	beq.n	8010bf4 <tcp_receive+0x6c4>
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	e000      	b.n	8010bf6 <tcp_receive+0x6c6>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	4423      	add	r3, r4
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	4b70      	ldr	r3, [pc, #448]	@ (8010dbc <tcp_receive+0x88c>)
 8010bfc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c02:	4b6e      	ldr	r3, [pc, #440]	@ (8010dbc <tcp_receive+0x88c>)
 8010c04:	881b      	ldrh	r3, [r3, #0]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d274      	bcs.n	8010cf4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c0a:	4b6b      	ldr	r3, [pc, #428]	@ (8010db8 <tcp_receive+0x888>)
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	899b      	ldrh	r3, [r3, #12]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fa fd24 	bl	800b660 <lwip_htons>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d01e      	beq.n	8010c62 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010c24:	4b64      	ldr	r3, [pc, #400]	@ (8010db8 <tcp_receive+0x888>)
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	899b      	ldrh	r3, [r3, #12]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	b21b      	sxth	r3, r3
 8010c2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010c32:	b21c      	sxth	r4, r3
 8010c34:	4b60      	ldr	r3, [pc, #384]	@ (8010db8 <tcp_receive+0x888>)
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	899b      	ldrh	r3, [r3, #12]
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7fa fd0f 	bl	800b660 <lwip_htons>
 8010c42:	4603      	mov	r3, r0
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fa fd07 	bl	800b660 <lwip_htons>
 8010c52:	4603      	mov	r3, r0
 8010c54:	b21b      	sxth	r3, r3
 8010c56:	4323      	orrs	r3, r4
 8010c58:	b21a      	sxth	r2, r3
 8010c5a:	4b57      	ldr	r3, [pc, #348]	@ (8010db8 <tcp_receive+0x888>)
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	b292      	uxth	r2, r2
 8010c60:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c66:	4b54      	ldr	r3, [pc, #336]	@ (8010db8 <tcp_receive+0x888>)
 8010c68:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010c6a:	4b53      	ldr	r3, [pc, #332]	@ (8010db8 <tcp_receive+0x888>)
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	899b      	ldrh	r3, [r3, #12]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fa fcf4 	bl	800b660 <lwip_htons>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	f003 0302 	and.w	r3, r3, #2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d005      	beq.n	8010c90 <tcp_receive+0x760>
            inseg.len -= 1;
 8010c84:	4b4c      	ldr	r3, [pc, #304]	@ (8010db8 <tcp_receive+0x888>)
 8010c86:	891b      	ldrh	r3, [r3, #8]
 8010c88:	3b01      	subs	r3, #1
 8010c8a:	b29a      	uxth	r2, r3
 8010c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8010db8 <tcp_receive+0x888>)
 8010c8e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010c90:	4b49      	ldr	r3, [pc, #292]	@ (8010db8 <tcp_receive+0x888>)
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	4a48      	ldr	r2, [pc, #288]	@ (8010db8 <tcp_receive+0x888>)
 8010c96:	8912      	ldrh	r2, [r2, #8]
 8010c98:	4611      	mov	r1, r2
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fb ff4c 	bl	800cb38 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ca0:	4b45      	ldr	r3, [pc, #276]	@ (8010db8 <tcp_receive+0x888>)
 8010ca2:	891c      	ldrh	r4, [r3, #8]
 8010ca4:	4b44      	ldr	r3, [pc, #272]	@ (8010db8 <tcp_receive+0x888>)
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	899b      	ldrh	r3, [r3, #12]
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fa fcd7 	bl	800b660 <lwip_htons>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	f003 0303 	and.w	r3, r3, #3
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d001      	beq.n	8010cc2 <tcp_receive+0x792>
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e000      	b.n	8010cc4 <tcp_receive+0x794>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	4423      	add	r3, r4
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8010dbc <tcp_receive+0x88c>)
 8010cca:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8010dbc <tcp_receive+0x88c>)
 8010cce:	881b      	ldrh	r3, [r3, #0]
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	4b38      	ldr	r3, [pc, #224]	@ (8010db4 <tcp_receive+0x884>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	441a      	add	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cdc:	6879      	ldr	r1, [r7, #4]
 8010cde:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010ce0:	440b      	add	r3, r1
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d006      	beq.n	8010cf4 <tcp_receive+0x7c4>
 8010ce6:	4b36      	ldr	r3, [pc, #216]	@ (8010dc0 <tcp_receive+0x890>)
 8010ce8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010cec:	4935      	ldr	r1, [pc, #212]	@ (8010dc4 <tcp_receive+0x894>)
 8010cee:	4836      	ldr	r0, [pc, #216]	@ (8010dc8 <tcp_receive+0x898>)
 8010cf0:	f7f0 f9ee 	bl	80010d0 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f000 80e6 	beq.w	8010eca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8010db8 <tcp_receive+0x888>)
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	899b      	ldrh	r3, [r3, #12]
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fa fcaa 	bl	800b660 <lwip_htons>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	f003 0301 	and.w	r3, r3, #1
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d010      	beq.n	8010d3a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010d18:	e00a      	b.n	8010d30 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d1e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010d2a:	68f8      	ldr	r0, [r7, #12]
 8010d2c:	f7fd fcc5 	bl	800e6ba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1f0      	bne.n	8010d1a <tcp_receive+0x7ea>
 8010d38:	e0c7      	b.n	8010eca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010d40:	e051      	b.n	8010de6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	899b      	ldrh	r3, [r3, #12]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fa fc88 	bl	800b660 <lwip_htons>
 8010d50:	4603      	mov	r3, r0
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	f003 0301 	and.w	r3, r3, #1
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d03c      	beq.n	8010dd6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010d5c:	4b16      	ldr	r3, [pc, #88]	@ (8010db8 <tcp_receive+0x888>)
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	899b      	ldrh	r3, [r3, #12]
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fa fc7b 	bl	800b660 <lwip_htons>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d12f      	bne.n	8010dd6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010d76:	4b10      	ldr	r3, [pc, #64]	@ (8010db8 <tcp_receive+0x888>)
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	899b      	ldrh	r3, [r3, #12]
 8010d7c:	b29c      	uxth	r4, r3
 8010d7e:	2001      	movs	r0, #1
 8010d80:	f7fa fc6e 	bl	800b660 <lwip_htons>
 8010d84:	4603      	mov	r3, r0
 8010d86:	461a      	mov	r2, r3
 8010d88:	4b0b      	ldr	r3, [pc, #44]	@ (8010db8 <tcp_receive+0x888>)
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	4322      	orrs	r2, r4
 8010d8e:	b292      	uxth	r2, r2
 8010d90:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010d92:	4b09      	ldr	r3, [pc, #36]	@ (8010db8 <tcp_receive+0x888>)
 8010d94:	891c      	ldrh	r4, [r3, #8]
 8010d96:	4b08      	ldr	r3, [pc, #32]	@ (8010db8 <tcp_receive+0x888>)
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	899b      	ldrh	r3, [r3, #12]
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fa fc5e 	bl	800b660 <lwip_htons>
 8010da4:	4603      	mov	r3, r0
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	f003 0303 	and.w	r3, r3, #3
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d00d      	beq.n	8010dcc <tcp_receive+0x89c>
 8010db0:	2301      	movs	r3, #1
 8010db2:	e00c      	b.n	8010dce <tcp_receive+0x89e>
 8010db4:	2000c5dc 	.word	0x2000c5dc
 8010db8:	2000c5bc 	.word	0x2000c5bc
 8010dbc:	2000c5e6 	.word	0x2000c5e6
 8010dc0:	080195b0 	.word	0x080195b0
 8010dc4:	08019958 	.word	0x08019958
 8010dc8:	080195fc 	.word	0x080195fc
 8010dcc:	2300      	movs	r3, #0
 8010dce:	4423      	add	r3, r4
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	4b98      	ldr	r3, [pc, #608]	@ (8011034 <tcp_receive+0xb04>)
 8010dd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010de0:	6938      	ldr	r0, [r7, #16]
 8010de2:	f7fd fc6a 	bl	800e6ba <tcp_seg_free>
            while (next &&
 8010de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d00e      	beq.n	8010e0a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010dec:	4b91      	ldr	r3, [pc, #580]	@ (8011034 <tcp_receive+0xb04>)
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	461a      	mov	r2, r3
 8010df2:	4b91      	ldr	r3, [pc, #580]	@ (8011038 <tcp_receive+0xb08>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	441a      	add	r2, r3
 8010df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e00:	8909      	ldrh	r1, [r1, #8]
 8010e02:	440b      	add	r3, r1
 8010e04:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	da9b      	bge.n	8010d42 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d059      	beq.n	8010ec4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010e10:	4b88      	ldr	r3, [pc, #544]	@ (8011034 <tcp_receive+0xb04>)
 8010e12:	881b      	ldrh	r3, [r3, #0]
 8010e14:	461a      	mov	r2, r3
 8010e16:	4b88      	ldr	r3, [pc, #544]	@ (8011038 <tcp_receive+0xb08>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	441a      	add	r2, r3
 8010e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	dd4d      	ble.n	8010ec4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	4b81      	ldr	r3, [pc, #516]	@ (8011038 <tcp_receive+0xb08>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	4b80      	ldr	r3, [pc, #512]	@ (801103c <tcp_receive+0xb0c>)
 8010e3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e3e:	4b7f      	ldr	r3, [pc, #508]	@ (801103c <tcp_receive+0xb0c>)
 8010e40:	68db      	ldr	r3, [r3, #12]
 8010e42:	899b      	ldrh	r3, [r3, #12]
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7fa fc0a 	bl	800b660 <lwip_htons>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	f003 0302 	and.w	r3, r3, #2
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <tcp_receive+0x934>
                inseg.len -= 1;
 8010e58:	4b78      	ldr	r3, [pc, #480]	@ (801103c <tcp_receive+0xb0c>)
 8010e5a:	891b      	ldrh	r3, [r3, #8]
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	4b76      	ldr	r3, [pc, #472]	@ (801103c <tcp_receive+0xb0c>)
 8010e62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010e64:	4b75      	ldr	r3, [pc, #468]	@ (801103c <tcp_receive+0xb0c>)
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	4a74      	ldr	r2, [pc, #464]	@ (801103c <tcp_receive+0xb0c>)
 8010e6a:	8912      	ldrh	r2, [r2, #8]
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fb fe62 	bl	800cb38 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010e74:	4b71      	ldr	r3, [pc, #452]	@ (801103c <tcp_receive+0xb0c>)
 8010e76:	891c      	ldrh	r4, [r3, #8]
 8010e78:	4b70      	ldr	r3, [pc, #448]	@ (801103c <tcp_receive+0xb0c>)
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	899b      	ldrh	r3, [r3, #12]
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fa fbed 	bl	800b660 <lwip_htons>
 8010e86:	4603      	mov	r3, r0
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	f003 0303 	and.w	r3, r3, #3
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d001      	beq.n	8010e96 <tcp_receive+0x966>
 8010e92:	2301      	movs	r3, #1
 8010e94:	e000      	b.n	8010e98 <tcp_receive+0x968>
 8010e96:	2300      	movs	r3, #0
 8010e98:	4423      	add	r3, r4
 8010e9a:	b29a      	uxth	r2, r3
 8010e9c:	4b65      	ldr	r3, [pc, #404]	@ (8011034 <tcp_receive+0xb04>)
 8010e9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010ea0:	4b64      	ldr	r3, [pc, #400]	@ (8011034 <tcp_receive+0xb04>)
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	4b64      	ldr	r3, [pc, #400]	@ (8011038 <tcp_receive+0xb08>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	441a      	add	r2, r3
 8010eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d006      	beq.n	8010ec4 <tcp_receive+0x994>
 8010eb6:	4b62      	ldr	r3, [pc, #392]	@ (8011040 <tcp_receive+0xb10>)
 8010eb8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010ebc:	4961      	ldr	r1, [pc, #388]	@ (8011044 <tcp_receive+0xb14>)
 8010ebe:	4862      	ldr	r0, [pc, #392]	@ (8011048 <tcp_receive+0xb18>)
 8010ec0:	f7f0 f906 	bl	80010d0 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ec8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010eca:	4b5a      	ldr	r3, [pc, #360]	@ (8011034 <tcp_receive+0xb04>)
 8010ecc:	881b      	ldrh	r3, [r3, #0]
 8010ece:	461a      	mov	r2, r3
 8010ed0:	4b59      	ldr	r3, [pc, #356]	@ (8011038 <tcp_receive+0xb08>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	441a      	add	r2, r3
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ede:	4b55      	ldr	r3, [pc, #340]	@ (8011034 <tcp_receive+0xb04>)
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d206      	bcs.n	8010ef4 <tcp_receive+0x9c4>
 8010ee6:	4b56      	ldr	r3, [pc, #344]	@ (8011040 <tcp_receive+0xb10>)
 8010ee8:	f240 6207 	movw	r2, #1543	@ 0x607
 8010eec:	4957      	ldr	r1, [pc, #348]	@ (801104c <tcp_receive+0xb1c>)
 8010eee:	4856      	ldr	r0, [pc, #344]	@ (8011048 <tcp_receive+0xb18>)
 8010ef0:	f7f0 f8ee 	bl	80010d0 <printf>
        pcb->rcv_wnd -= tcplen;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8011034 <tcp_receive+0xb04>)
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	b29a      	uxth	r2, r3
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7fc fd99 	bl	800da3c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010f0a:	4b4c      	ldr	r3, [pc, #304]	@ (801103c <tcp_receive+0xb0c>)
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	891b      	ldrh	r3, [r3, #8]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d006      	beq.n	8010f22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010f14:	4b49      	ldr	r3, [pc, #292]	@ (801103c <tcp_receive+0xb0c>)
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4a4d      	ldr	r2, [pc, #308]	@ (8011050 <tcp_receive+0xb20>)
 8010f1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010f1c:	4b47      	ldr	r3, [pc, #284]	@ (801103c <tcp_receive+0xb0c>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f22:	4b46      	ldr	r3, [pc, #280]	@ (801103c <tcp_receive+0xb0c>)
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	899b      	ldrh	r3, [r3, #12]
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fa fb98 	bl	800b660 <lwip_htons>
 8010f30:	4603      	mov	r3, r0
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	f003 0301 	and.w	r3, r3, #1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f000 80b8 	beq.w	80110ae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010f3e:	4b45      	ldr	r3, [pc, #276]	@ (8011054 <tcp_receive+0xb24>)
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	f043 0320 	orr.w	r3, r3, #32
 8010f46:	b2da      	uxtb	r2, r3
 8010f48:	4b42      	ldr	r3, [pc, #264]	@ (8011054 <tcp_receive+0xb24>)
 8010f4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010f4c:	e0af      	b.n	80110ae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f58:	68db      	ldr	r3, [r3, #12]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	4a36      	ldr	r2, [pc, #216]	@ (8011038 <tcp_receive+0xb08>)
 8010f5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	891b      	ldrh	r3, [r3, #8]
 8010f64:	461c      	mov	r4, r3
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	899b      	ldrh	r3, [r3, #12]
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fa fb76 	bl	800b660 <lwip_htons>
 8010f74:	4603      	mov	r3, r0
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	f003 0303 	and.w	r3, r3, #3
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d001      	beq.n	8010f84 <tcp_receive+0xa54>
 8010f80:	2301      	movs	r3, #1
 8010f82:	e000      	b.n	8010f86 <tcp_receive+0xa56>
 8010f84:	2300      	movs	r3, #0
 8010f86:	191a      	adds	r2, r3, r4
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f8c:	441a      	add	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f96:	461c      	mov	r4, r3
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	891b      	ldrh	r3, [r3, #8]
 8010f9c:	461d      	mov	r5, r3
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	899b      	ldrh	r3, [r3, #12]
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fa fb5a 	bl	800b660 <lwip_htons>
 8010fac:	4603      	mov	r3, r0
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	f003 0303 	and.w	r3, r3, #3
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d001      	beq.n	8010fbc <tcp_receive+0xa8c>
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e000      	b.n	8010fbe <tcp_receive+0xa8e>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	442b      	add	r3, r5
 8010fc0:	429c      	cmp	r4, r3
 8010fc2:	d206      	bcs.n	8010fd2 <tcp_receive+0xaa2>
 8010fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8011040 <tcp_receive+0xb10>)
 8010fc6:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010fca:	4923      	ldr	r1, [pc, #140]	@ (8011058 <tcp_receive+0xb28>)
 8010fcc:	481e      	ldr	r0, [pc, #120]	@ (8011048 <tcp_receive+0xb18>)
 8010fce:	f7f0 f87f 	bl	80010d0 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	891b      	ldrh	r3, [r3, #8]
 8010fd6:	461c      	mov	r4, r3
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	899b      	ldrh	r3, [r3, #12]
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fa fb3d 	bl	800b660 <lwip_htons>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	f003 0303 	and.w	r3, r3, #3
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <tcp_receive+0xac6>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e000      	b.n	8010ff8 <tcp_receive+0xac8>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	1919      	adds	r1, r3, r4
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ffe:	b28b      	uxth	r3, r1
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	b29a      	uxth	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7fc fd17 	bl	800da3c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	891b      	ldrh	r3, [r3, #8]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d028      	beq.n	801106a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011018:	4b0d      	ldr	r3, [pc, #52]	@ (8011050 <tcp_receive+0xb20>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d01d      	beq.n	801105c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011020:	4b0b      	ldr	r3, [pc, #44]	@ (8011050 <tcp_receive+0xb20>)
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	4619      	mov	r1, r3
 801102a:	4610      	mov	r0, r2
 801102c:	f7fb ffd8 	bl	800cfe0 <pbuf_cat>
 8011030:	e018      	b.n	8011064 <tcp_receive+0xb34>
 8011032:	bf00      	nop
 8011034:	2000c5e6 	.word	0x2000c5e6
 8011038:	2000c5dc 	.word	0x2000c5dc
 801103c:	2000c5bc 	.word	0x2000c5bc
 8011040:	080195b0 	.word	0x080195b0
 8011044:	08019990 	.word	0x08019990
 8011048:	080195fc 	.word	0x080195fc
 801104c:	080199cc 	.word	0x080199cc
 8011050:	2000c5ec 	.word	0x2000c5ec
 8011054:	2000c5e9 	.word	0x2000c5e9
 8011058:	080199ec 	.word	0x080199ec
            } else {
              recv_data = cseg->p;
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	4a70      	ldr	r2, [pc, #448]	@ (8011224 <tcp_receive+0xcf4>)
 8011062:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2200      	movs	r2, #0
 8011068:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	899b      	ldrh	r3, [r3, #12]
 8011070:	b29b      	uxth	r3, r3
 8011072:	4618      	mov	r0, r3
 8011074:	f7fa faf4 	bl	800b660 <lwip_htons>
 8011078:	4603      	mov	r3, r0
 801107a:	b2db      	uxtb	r3, r3
 801107c:	f003 0301 	and.w	r3, r3, #1
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00d      	beq.n	80110a0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011084:	4b68      	ldr	r3, [pc, #416]	@ (8011228 <tcp_receive+0xcf8>)
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	f043 0320 	orr.w	r3, r3, #32
 801108c:	b2da      	uxtb	r2, r3
 801108e:	4b66      	ldr	r3, [pc, #408]	@ (8011228 <tcp_receive+0xcf8>)
 8011090:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	7d1b      	ldrb	r3, [r3, #20]
 8011096:	2b04      	cmp	r3, #4
 8011098:	d102      	bne.n	80110a0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2207      	movs	r2, #7
 801109e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80110a8:	68b8      	ldr	r0, [r7, #8]
 80110aa:	f7fd fb06 	bl	800e6ba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d008      	beq.n	80110c8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	685a      	ldr	r2, [r3, #4]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80110c2:	429a      	cmp	r2, r3
 80110c4:	f43f af43 	beq.w	8010f4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8b5b      	ldrh	r3, [r3, #26]
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d00e      	beq.n	80110f2 <tcp_receive+0xbc2>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	8b5b      	ldrh	r3, [r3, #26]
 80110d8:	f023 0301 	bic.w	r3, r3, #1
 80110dc:	b29a      	uxth	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	835a      	strh	r2, [r3, #26]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	8b5b      	ldrh	r3, [r3, #26]
 80110e6:	f043 0302 	orr.w	r3, r3, #2
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80110f0:	e187      	b.n	8011402 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	8b5b      	ldrh	r3, [r3, #26]
 80110f6:	f043 0301 	orr.w	r3, r3, #1
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011100:	e17f      	b.n	8011402 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011106:	2b00      	cmp	r3, #0
 8011108:	d106      	bne.n	8011118 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801110a:	4848      	ldr	r0, [pc, #288]	@ (801122c <tcp_receive+0xcfc>)
 801110c:	f7fd faee 	bl	800e6ec <tcp_seg_copy>
 8011110:	4602      	mov	r2, r0
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	675a      	str	r2, [r3, #116]	@ 0x74
 8011116:	e16c      	b.n	80113f2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011118:	2300      	movs	r3, #0
 801111a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011122:	e156      	b.n	80113d2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	685a      	ldr	r2, [r3, #4]
 801112a:	4b41      	ldr	r3, [pc, #260]	@ (8011230 <tcp_receive+0xd00>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	429a      	cmp	r2, r3
 8011130:	d11d      	bne.n	801116e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011132:	4b3e      	ldr	r3, [pc, #248]	@ (801122c <tcp_receive+0xcfc>)
 8011134:	891a      	ldrh	r2, [r3, #8]
 8011136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011138:	891b      	ldrh	r3, [r3, #8]
 801113a:	429a      	cmp	r2, r3
 801113c:	f240 814e 	bls.w	80113dc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011140:	483a      	ldr	r0, [pc, #232]	@ (801122c <tcp_receive+0xcfc>)
 8011142:	f7fd fad3 	bl	800e6ec <tcp_seg_copy>
 8011146:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	2b00      	cmp	r3, #0
 801114c:	f000 8148 	beq.w	80113e0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011152:	2b00      	cmp	r3, #0
 8011154:	d003      	beq.n	801115e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011158:	697a      	ldr	r2, [r7, #20]
 801115a:	601a      	str	r2, [r3, #0]
 801115c:	e002      	b.n	8011164 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	697a      	ldr	r2, [r7, #20]
 8011162:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011164:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011166:	6978      	ldr	r0, [r7, #20]
 8011168:	f7ff f8de 	bl	8010328 <tcp_oos_insert_segment>
                }
                break;
 801116c:	e138      	b.n	80113e0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801116e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011170:	2b00      	cmp	r3, #0
 8011172:	d117      	bne.n	80111a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011174:	4b2e      	ldr	r3, [pc, #184]	@ (8011230 <tcp_receive+0xd00>)
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	2b00      	cmp	r3, #0
 8011182:	da57      	bge.n	8011234 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011184:	4829      	ldr	r0, [pc, #164]	@ (801122c <tcp_receive+0xcfc>)
 8011186:	f7fd fab1 	bl	800e6ec <tcp_seg_copy>
 801118a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801118c:	69bb      	ldr	r3, [r7, #24]
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 8128 	beq.w	80113e4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	69ba      	ldr	r2, [r7, #24]
 8011198:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801119a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801119c:	69b8      	ldr	r0, [r7, #24]
 801119e:	f7ff f8c3 	bl	8010328 <tcp_oos_insert_segment>
                  }
                  break;
 80111a2:	e11f      	b.n	80113e4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80111a4:	4b22      	ldr	r3, [pc, #136]	@ (8011230 <tcp_receive+0xd00>)
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	3b01      	subs	r3, #1
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	db3e      	blt.n	8011234 <tcp_receive+0xd04>
 80111b6:	4b1e      	ldr	r3, [pc, #120]	@ (8011230 <tcp_receive+0xd00>)
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	1ad3      	subs	r3, r2, r3
 80111c2:	3301      	adds	r3, #1
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	dc35      	bgt.n	8011234 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111c8:	4818      	ldr	r0, [pc, #96]	@ (801122c <tcp_receive+0xcfc>)
 80111ca:	f7fd fa8f 	bl	800e6ec <tcp_seg_copy>
 80111ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80111d0:	69fb      	ldr	r3, [r7, #28]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	f000 8108 	beq.w	80113e8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80111d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111e0:	8912      	ldrh	r2, [r2, #8]
 80111e2:	441a      	add	r2, r3
 80111e4:	4b12      	ldr	r3, [pc, #72]	@ (8011230 <tcp_receive+0xd00>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dd12      	ble.n	8011214 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80111ee:	4b10      	ldr	r3, [pc, #64]	@ (8011230 <tcp_receive+0xd00>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	b29a      	uxth	r2, r3
 8011200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011202:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011206:	685a      	ldr	r2, [r3, #4]
 8011208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801120a:	891b      	ldrh	r3, [r3, #8]
 801120c:	4619      	mov	r1, r3
 801120e:	4610      	mov	r0, r2
 8011210:	f7fb fc92 	bl	800cb38 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011216:	69fa      	ldr	r2, [r7, #28]
 8011218:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801121a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801121c:	69f8      	ldr	r0, [r7, #28]
 801121e:	f7ff f883 	bl	8010328 <tcp_oos_insert_segment>
                  }
                  break;
 8011222:	e0e1      	b.n	80113e8 <tcp_receive+0xeb8>
 8011224:	2000c5ec 	.word	0x2000c5ec
 8011228:	2000c5e9 	.word	0x2000c5e9
 801122c:	2000c5bc 	.word	0x2000c5bc
 8011230:	2000c5dc 	.word	0x2000c5dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011236:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	f040 80c5 	bne.w	80113cc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011242:	4b7f      	ldr	r3, [pc, #508]	@ (8011440 <tcp_receive+0xf10>)
 8011244:	681a      	ldr	r2, [r3, #0]
 8011246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801124e:	2b00      	cmp	r3, #0
 8011250:	f340 80bc 	ble.w	80113cc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	899b      	ldrh	r3, [r3, #12]
 801125a:	b29b      	uxth	r3, r3
 801125c:	4618      	mov	r0, r3
 801125e:	f7fa f9ff 	bl	800b660 <lwip_htons>
 8011262:	4603      	mov	r3, r0
 8011264:	b2db      	uxtb	r3, r3
 8011266:	f003 0301 	and.w	r3, r3, #1
 801126a:	2b00      	cmp	r3, #0
 801126c:	f040 80be 	bne.w	80113ec <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011270:	4874      	ldr	r0, [pc, #464]	@ (8011444 <tcp_receive+0xf14>)
 8011272:	f7fd fa3b 	bl	800e6ec <tcp_seg_copy>
 8011276:	4602      	mov	r2, r0
 8011278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801127c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 80b5 	beq.w	80113f0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801128e:	8912      	ldrh	r2, [r2, #8]
 8011290:	441a      	add	r2, r3
 8011292:	4b6b      	ldr	r3, [pc, #428]	@ (8011440 <tcp_receive+0xf10>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	1ad3      	subs	r3, r2, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	dd12      	ble.n	80112c2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801129c:	4b68      	ldr	r3, [pc, #416]	@ (8011440 <tcp_receive+0xf10>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a4:	68db      	ldr	r3, [r3, #12]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80112b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b8:	891b      	ldrh	r3, [r3, #8]
 80112ba:	4619      	mov	r1, r3
 80112bc:	4610      	mov	r0, r2
 80112be:	f7fb fc3b 	bl	800cb38 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80112c2:	4b61      	ldr	r3, [pc, #388]	@ (8011448 <tcp_receive+0xf18>)
 80112c4:	881b      	ldrh	r3, [r3, #0]
 80112c6:	461a      	mov	r2, r3
 80112c8:	4b5d      	ldr	r3, [pc, #372]	@ (8011440 <tcp_receive+0xf10>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	441a      	add	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112d2:	6879      	ldr	r1, [r7, #4]
 80112d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80112d6:	440b      	add	r3, r1
 80112d8:	1ad3      	subs	r3, r2, r3
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f340 8088 	ble.w	80113f0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80112e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	899b      	ldrh	r3, [r3, #12]
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fa f9b8 	bl	800b660 <lwip_htons>
 80112f0:	4603      	mov	r3, r0
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	f003 0301 	and.w	r3, r3, #1
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d021      	beq.n	8011340 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80112fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	899b      	ldrh	r3, [r3, #12]
 8011304:	b29b      	uxth	r3, r3
 8011306:	b21b      	sxth	r3, r3
 8011308:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801130c:	b21c      	sxth	r4, r3
 801130e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	899b      	ldrh	r3, [r3, #12]
 8011316:	b29b      	uxth	r3, r3
 8011318:	4618      	mov	r0, r3
 801131a:	f7fa f9a1 	bl	800b660 <lwip_htons>
 801131e:	4603      	mov	r3, r0
 8011320:	b2db      	uxtb	r3, r3
 8011322:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011326:	b29b      	uxth	r3, r3
 8011328:	4618      	mov	r0, r3
 801132a:	f7fa f999 	bl	800b660 <lwip_htons>
 801132e:	4603      	mov	r3, r0
 8011330:	b21b      	sxth	r3, r3
 8011332:	4323      	orrs	r3, r4
 8011334:	b21a      	sxth	r2, r3
 8011336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	b292      	uxth	r2, r2
 801133e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011344:	b29a      	uxth	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801134a:	4413      	add	r3, r2
 801134c:	b299      	uxth	r1, r3
 801134e:	4b3c      	ldr	r3, [pc, #240]	@ (8011440 <tcp_receive+0xf10>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	b29a      	uxth	r2, r3
 8011354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	1a8a      	subs	r2, r1, r2
 801135a:	b292      	uxth	r2, r2
 801135c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801135e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	685a      	ldr	r2, [r3, #4]
 8011364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	891b      	ldrh	r3, [r3, #8]
 801136a:	4619      	mov	r1, r3
 801136c:	4610      	mov	r0, r2
 801136e:	f7fb fbe3 	bl	800cb38 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	891c      	ldrh	r4, [r3, #8]
 8011378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	899b      	ldrh	r3, [r3, #12]
 8011380:	b29b      	uxth	r3, r3
 8011382:	4618      	mov	r0, r3
 8011384:	f7fa f96c 	bl	800b660 <lwip_htons>
 8011388:	4603      	mov	r3, r0
 801138a:	b2db      	uxtb	r3, r3
 801138c:	f003 0303 	and.w	r3, r3, #3
 8011390:	2b00      	cmp	r3, #0
 8011392:	d001      	beq.n	8011398 <tcp_receive+0xe68>
 8011394:	2301      	movs	r3, #1
 8011396:	e000      	b.n	801139a <tcp_receive+0xe6a>
 8011398:	2300      	movs	r3, #0
 801139a:	4423      	add	r3, r4
 801139c:	b29a      	uxth	r2, r3
 801139e:	4b2a      	ldr	r3, [pc, #168]	@ (8011448 <tcp_receive+0xf18>)
 80113a0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80113a2:	4b29      	ldr	r3, [pc, #164]	@ (8011448 <tcp_receive+0xf18>)
 80113a4:	881b      	ldrh	r3, [r3, #0]
 80113a6:	461a      	mov	r2, r3
 80113a8:	4b25      	ldr	r3, [pc, #148]	@ (8011440 <tcp_receive+0xf10>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	441a      	add	r2, r3
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b2:	6879      	ldr	r1, [r7, #4]
 80113b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80113b6:	440b      	add	r3, r1
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d019      	beq.n	80113f0 <tcp_receive+0xec0>
 80113bc:	4b23      	ldr	r3, [pc, #140]	@ (801144c <tcp_receive+0xf1c>)
 80113be:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80113c2:	4923      	ldr	r1, [pc, #140]	@ (8011450 <tcp_receive+0xf20>)
 80113c4:	4823      	ldr	r0, [pc, #140]	@ (8011454 <tcp_receive+0xf24>)
 80113c6:	f7ef fe83 	bl	80010d0 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80113ca:	e011      	b.n	80113f0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80113cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80113d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	f47f aea5 	bne.w	8011124 <tcp_receive+0xbf4>
 80113da:	e00a      	b.n	80113f2 <tcp_receive+0xec2>
                break;
 80113dc:	bf00      	nop
 80113de:	e008      	b.n	80113f2 <tcp_receive+0xec2>
                break;
 80113e0:	bf00      	nop
 80113e2:	e006      	b.n	80113f2 <tcp_receive+0xec2>
                  break;
 80113e4:	bf00      	nop
 80113e6:	e004      	b.n	80113f2 <tcp_receive+0xec2>
                  break;
 80113e8:	bf00      	nop
 80113ea:	e002      	b.n	80113f2 <tcp_receive+0xec2>
                  break;
 80113ec:	bf00      	nop
 80113ee:	e000      	b.n	80113f2 <tcp_receive+0xec2>
                break;
 80113f0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f001 fe88 	bl	8013108 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80113f8:	e003      	b.n	8011402 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f001 fe84 	bl	8013108 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011400:	e01a      	b.n	8011438 <tcp_receive+0xf08>
 8011402:	e019      	b.n	8011438 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011404:	4b0e      	ldr	r3, [pc, #56]	@ (8011440 <tcp_receive+0xf10>)
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	db0a      	blt.n	8011428 <tcp_receive+0xef8>
 8011412:	4b0b      	ldr	r3, [pc, #44]	@ (8011440 <tcp_receive+0xf10>)
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801141a:	6879      	ldr	r1, [r7, #4]
 801141c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801141e:	440b      	add	r3, r1
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	3301      	adds	r3, #1
 8011424:	2b00      	cmp	r3, #0
 8011426:	dd07      	ble.n	8011438 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	8b5b      	ldrh	r3, [r3, #26]
 801142c:	f043 0302 	orr.w	r3, r3, #2
 8011430:	b29a      	uxth	r2, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011436:	e7ff      	b.n	8011438 <tcp_receive+0xf08>
 8011438:	bf00      	nop
 801143a:	3750      	adds	r7, #80	@ 0x50
 801143c:	46bd      	mov	sp, r7
 801143e:	bdb0      	pop	{r4, r5, r7, pc}
 8011440:	2000c5dc 	.word	0x2000c5dc
 8011444:	2000c5bc 	.word	0x2000c5bc
 8011448:	2000c5e6 	.word	0x2000c5e6
 801144c:	080195b0 	.word	0x080195b0
 8011450:	08019958 	.word	0x08019958
 8011454:	080195fc 	.word	0x080195fc

08011458 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011458:	b480      	push	{r7}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801145e:	4b15      	ldr	r3, [pc, #84]	@ (80114b4 <tcp_get_next_optbyte+0x5c>)
 8011460:	881b      	ldrh	r3, [r3, #0]
 8011462:	1c5a      	adds	r2, r3, #1
 8011464:	b291      	uxth	r1, r2
 8011466:	4a13      	ldr	r2, [pc, #76]	@ (80114b4 <tcp_get_next_optbyte+0x5c>)
 8011468:	8011      	strh	r1, [r2, #0]
 801146a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801146c:	4b12      	ldr	r3, [pc, #72]	@ (80114b8 <tcp_get_next_optbyte+0x60>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d004      	beq.n	801147e <tcp_get_next_optbyte+0x26>
 8011474:	4b11      	ldr	r3, [pc, #68]	@ (80114bc <tcp_get_next_optbyte+0x64>)
 8011476:	881b      	ldrh	r3, [r3, #0]
 8011478:	88fa      	ldrh	r2, [r7, #6]
 801147a:	429a      	cmp	r2, r3
 801147c:	d208      	bcs.n	8011490 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801147e:	4b10      	ldr	r3, [pc, #64]	@ (80114c0 <tcp_get_next_optbyte+0x68>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	3314      	adds	r3, #20
 8011484:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011486:	88fb      	ldrh	r3, [r7, #6]
 8011488:	683a      	ldr	r2, [r7, #0]
 801148a:	4413      	add	r3, r2
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	e00b      	b.n	80114a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011490:	88fb      	ldrh	r3, [r7, #6]
 8011492:	b2da      	uxtb	r2, r3
 8011494:	4b09      	ldr	r3, [pc, #36]	@ (80114bc <tcp_get_next_optbyte+0x64>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	b2db      	uxtb	r3, r3
 801149a:	1ad3      	subs	r3, r2, r3
 801149c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801149e:	4b06      	ldr	r3, [pc, #24]	@ (80114b8 <tcp_get_next_optbyte+0x60>)
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	797b      	ldrb	r3, [r7, #5]
 80114a4:	4413      	add	r3, r2
 80114a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr
 80114b4:	2000c5d8 	.word	0x2000c5d8
 80114b8:	2000c5d4 	.word	0x2000c5d4
 80114bc:	2000c5d2 	.word	0x2000c5d2
 80114c0:	2000c5cc 	.word	0x2000c5cc

080114c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d106      	bne.n	80114e0 <tcp_parseopt+0x1c>
 80114d2:	4b32      	ldr	r3, [pc, #200]	@ (801159c <tcp_parseopt+0xd8>)
 80114d4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80114d8:	4931      	ldr	r1, [pc, #196]	@ (80115a0 <tcp_parseopt+0xdc>)
 80114da:	4832      	ldr	r0, [pc, #200]	@ (80115a4 <tcp_parseopt+0xe0>)
 80114dc:	f7ef fdf8 	bl	80010d0 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80114e0:	4b31      	ldr	r3, [pc, #196]	@ (80115a8 <tcp_parseopt+0xe4>)
 80114e2:	881b      	ldrh	r3, [r3, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d056      	beq.n	8011596 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80114e8:	4b30      	ldr	r3, [pc, #192]	@ (80115ac <tcp_parseopt+0xe8>)
 80114ea:	2200      	movs	r2, #0
 80114ec:	801a      	strh	r2, [r3, #0]
 80114ee:	e046      	b.n	801157e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80114f0:	f7ff ffb2 	bl	8011458 <tcp_get_next_optbyte>
 80114f4:	4603      	mov	r3, r0
 80114f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80114f8:	7bfb      	ldrb	r3, [r7, #15]
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	d006      	beq.n	801150c <tcp_parseopt+0x48>
 80114fe:	2b02      	cmp	r3, #2
 8011500:	dc2a      	bgt.n	8011558 <tcp_parseopt+0x94>
 8011502:	2b00      	cmp	r3, #0
 8011504:	d042      	beq.n	801158c <tcp_parseopt+0xc8>
 8011506:	2b01      	cmp	r3, #1
 8011508:	d038      	beq.n	801157c <tcp_parseopt+0xb8>
 801150a:	e025      	b.n	8011558 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801150c:	f7ff ffa4 	bl	8011458 <tcp_get_next_optbyte>
 8011510:	4603      	mov	r3, r0
 8011512:	2b04      	cmp	r3, #4
 8011514:	d13c      	bne.n	8011590 <tcp_parseopt+0xcc>
 8011516:	4b25      	ldr	r3, [pc, #148]	@ (80115ac <tcp_parseopt+0xe8>)
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	3301      	adds	r3, #1
 801151c:	4a22      	ldr	r2, [pc, #136]	@ (80115a8 <tcp_parseopt+0xe4>)
 801151e:	8812      	ldrh	r2, [r2, #0]
 8011520:	4293      	cmp	r3, r2
 8011522:	da35      	bge.n	8011590 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011524:	f7ff ff98 	bl	8011458 <tcp_get_next_optbyte>
 8011528:	4603      	mov	r3, r0
 801152a:	021b      	lsls	r3, r3, #8
 801152c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801152e:	f7ff ff93 	bl	8011458 <tcp_get_next_optbyte>
 8011532:	4603      	mov	r3, r0
 8011534:	461a      	mov	r2, r3
 8011536:	89bb      	ldrh	r3, [r7, #12]
 8011538:	4313      	orrs	r3, r2
 801153a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801153c:	89bb      	ldrh	r3, [r7, #12]
 801153e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011542:	d804      	bhi.n	801154e <tcp_parseopt+0x8a>
 8011544:	89bb      	ldrh	r3, [r7, #12]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d001      	beq.n	801154e <tcp_parseopt+0x8a>
 801154a:	89ba      	ldrh	r2, [r7, #12]
 801154c:	e001      	b.n	8011552 <tcp_parseopt+0x8e>
 801154e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011556:	e012      	b.n	801157e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011558:	f7ff ff7e 	bl	8011458 <tcp_get_next_optbyte>
 801155c:	4603      	mov	r3, r0
 801155e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011560:	7afb      	ldrb	r3, [r7, #11]
 8011562:	2b01      	cmp	r3, #1
 8011564:	d916      	bls.n	8011594 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011566:	7afb      	ldrb	r3, [r7, #11]
 8011568:	b29a      	uxth	r2, r3
 801156a:	4b10      	ldr	r3, [pc, #64]	@ (80115ac <tcp_parseopt+0xe8>)
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	4413      	add	r3, r2
 8011570:	b29b      	uxth	r3, r3
 8011572:	3b02      	subs	r3, #2
 8011574:	b29a      	uxth	r2, r3
 8011576:	4b0d      	ldr	r3, [pc, #52]	@ (80115ac <tcp_parseopt+0xe8>)
 8011578:	801a      	strh	r2, [r3, #0]
 801157a:	e000      	b.n	801157e <tcp_parseopt+0xba>
          break;
 801157c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801157e:	4b0b      	ldr	r3, [pc, #44]	@ (80115ac <tcp_parseopt+0xe8>)
 8011580:	881a      	ldrh	r2, [r3, #0]
 8011582:	4b09      	ldr	r3, [pc, #36]	@ (80115a8 <tcp_parseopt+0xe4>)
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	429a      	cmp	r2, r3
 8011588:	d3b2      	bcc.n	80114f0 <tcp_parseopt+0x2c>
 801158a:	e004      	b.n	8011596 <tcp_parseopt+0xd2>
          return;
 801158c:	bf00      	nop
 801158e:	e002      	b.n	8011596 <tcp_parseopt+0xd2>
            return;
 8011590:	bf00      	nop
 8011592:	e000      	b.n	8011596 <tcp_parseopt+0xd2>
            return;
 8011594:	bf00      	nop
      }
    }
  }
}
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	080195b0 	.word	0x080195b0
 80115a0:	08019a14 	.word	0x08019a14
 80115a4:	080195fc 	.word	0x080195fc
 80115a8:	2000c5d0 	.word	0x2000c5d0
 80115ac:	2000c5d8 	.word	0x2000c5d8

080115b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80115b0:	b480      	push	{r7}
 80115b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80115b4:	4b05      	ldr	r3, [pc, #20]	@ (80115cc <tcp_trigger_input_pcb_close+0x1c>)
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	f043 0310 	orr.w	r3, r3, #16
 80115bc:	b2da      	uxtb	r2, r3
 80115be:	4b03      	ldr	r3, [pc, #12]	@ (80115cc <tcp_trigger_input_pcb_close+0x1c>)
 80115c0:	701a      	strb	r2, [r3, #0]
}
 80115c2:	bf00      	nop
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr
 80115cc:	2000c5e9 	.word	0x2000c5e9

080115d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d00a      	beq.n	80115f8 <tcp_route+0x28>
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	7a1b      	ldrb	r3, [r3, #8]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d006      	beq.n	80115f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	7a1b      	ldrb	r3, [r3, #8]
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fb f89a 	bl	800c728 <netif_get_by_index>
 80115f4:	4603      	mov	r3, r0
 80115f6:	e003      	b.n	8011600 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f003 fcb7 	bl	8014f6c <ip4_route>
 80115fe:	4603      	mov	r3, r0
  }
}
 8011600:	4618      	mov	r0, r3
 8011602:	3710      	adds	r7, #16
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011608:	b590      	push	{r4, r7, lr}
 801160a:	b087      	sub	sp, #28
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	603b      	str	r3, [r7, #0]
 8011614:	4613      	mov	r3, r2
 8011616:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d105      	bne.n	801162a <tcp_create_segment+0x22>
 801161e:	4b43      	ldr	r3, [pc, #268]	@ (801172c <tcp_create_segment+0x124>)
 8011620:	22a3      	movs	r2, #163	@ 0xa3
 8011622:	4943      	ldr	r1, [pc, #268]	@ (8011730 <tcp_create_segment+0x128>)
 8011624:	4843      	ldr	r0, [pc, #268]	@ (8011734 <tcp_create_segment+0x12c>)
 8011626:	f7ef fd53 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d105      	bne.n	801163c <tcp_create_segment+0x34>
 8011630:	4b3e      	ldr	r3, [pc, #248]	@ (801172c <tcp_create_segment+0x124>)
 8011632:	22a4      	movs	r2, #164	@ 0xa4
 8011634:	4940      	ldr	r1, [pc, #256]	@ (8011738 <tcp_create_segment+0x130>)
 8011636:	483f      	ldr	r0, [pc, #252]	@ (8011734 <tcp_create_segment+0x12c>)
 8011638:	f7ef fd4a 	bl	80010d0 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801163c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	b2db      	uxtb	r3, r3
 8011644:	f003 0304 	and.w	r3, r3, #4
 8011648:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801164a:	2003      	movs	r0, #3
 801164c:	f7fa fce0 	bl	800c010 <memp_malloc>
 8011650:	6138      	str	r0, [r7, #16]
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d104      	bne.n	8011662 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011658:	68b8      	ldr	r0, [r7, #8]
 801165a:	f7fb fbf3 	bl	800ce44 <pbuf_free>
    return NULL;
 801165e:	2300      	movs	r3, #0
 8011660:	e060      	b.n	8011724 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011668:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2200      	movs	r2, #0
 801166e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	68ba      	ldr	r2, [r7, #8]
 8011674:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	891a      	ldrh	r2, [r3, #8]
 801167a:	7dfb      	ldrb	r3, [r7, #23]
 801167c:	b29b      	uxth	r3, r3
 801167e:	429a      	cmp	r2, r3
 8011680:	d205      	bcs.n	801168e <tcp_create_segment+0x86>
 8011682:	4b2a      	ldr	r3, [pc, #168]	@ (801172c <tcp_create_segment+0x124>)
 8011684:	22b0      	movs	r2, #176	@ 0xb0
 8011686:	492d      	ldr	r1, [pc, #180]	@ (801173c <tcp_create_segment+0x134>)
 8011688:	482a      	ldr	r0, [pc, #168]	@ (8011734 <tcp_create_segment+0x12c>)
 801168a:	f7ef fd21 	bl	80010d0 <printf>
  seg->len = p->tot_len - optlen;
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	891a      	ldrh	r2, [r3, #8]
 8011692:	7dfb      	ldrb	r3, [r7, #23]
 8011694:	b29b      	uxth	r3, r3
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	b29a      	uxth	r2, r3
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801169e:	2114      	movs	r1, #20
 80116a0:	68b8      	ldr	r0, [r7, #8]
 80116a2:	f7fb fb39 	bl	800cd18 <pbuf_add_header>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d004      	beq.n	80116b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80116ac:	6938      	ldr	r0, [r7, #16]
 80116ae:	f7fd f804 	bl	800e6ba <tcp_seg_free>
    return NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	e036      	b.n	8011724 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	8ada      	ldrh	r2, [r3, #22]
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	68dc      	ldr	r4, [r3, #12]
 80116c8:	4610      	mov	r0, r2
 80116ca:	f7f9 ffc9 	bl	800b660 <lwip_htons>
 80116ce:	4603      	mov	r3, r0
 80116d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	8b1a      	ldrh	r2, [r3, #24]
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	68dc      	ldr	r4, [r3, #12]
 80116da:	4610      	mov	r0, r2
 80116dc:	f7f9 ffc0 	bl	800b660 <lwip_htons>
 80116e0:	4603      	mov	r3, r0
 80116e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	68dc      	ldr	r4, [r3, #12]
 80116e8:	6838      	ldr	r0, [r7, #0]
 80116ea:	f7f9 ffce 	bl	800b68a <lwip_htonl>
 80116ee:	4603      	mov	r3, r0
 80116f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80116f2:	7dfb      	ldrb	r3, [r7, #23]
 80116f4:	089b      	lsrs	r3, r3, #2
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	3305      	adds	r3, #5
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	031b      	lsls	r3, r3, #12
 80116fe:	b29a      	uxth	r2, r3
 8011700:	79fb      	ldrb	r3, [r7, #7]
 8011702:	b29b      	uxth	r3, r3
 8011704:	4313      	orrs	r3, r2
 8011706:	b29a      	uxth	r2, r3
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	68dc      	ldr	r4, [r3, #12]
 801170c:	4610      	mov	r0, r2
 801170e:	f7f9 ffa7 	bl	800b660 <lwip_htons>
 8011712:	4603      	mov	r3, r0
 8011714:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	2200      	movs	r2, #0
 801171c:	749a      	strb	r2, [r3, #18]
 801171e:	2200      	movs	r2, #0
 8011720:	74da      	strb	r2, [r3, #19]
  return seg;
 8011722:	693b      	ldr	r3, [r7, #16]
}
 8011724:	4618      	mov	r0, r3
 8011726:	371c      	adds	r7, #28
 8011728:	46bd      	mov	sp, r7
 801172a:	bd90      	pop	{r4, r7, pc}
 801172c:	08019a30 	.word	0x08019a30
 8011730:	08019a64 	.word	0x08019a64
 8011734:	08019a84 	.word	0x08019a84
 8011738:	08019aac 	.word	0x08019aac
 801173c:	08019ad0 	.word	0x08019ad0

08011740 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af00      	add	r7, sp, #0
 8011746:	607b      	str	r3, [r7, #4]
 8011748:	4603      	mov	r3, r0
 801174a:	73fb      	strb	r3, [r7, #15]
 801174c:	460b      	mov	r3, r1
 801174e:	81bb      	strh	r3, [r7, #12]
 8011750:	4613      	mov	r3, r2
 8011752:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011754:	89bb      	ldrh	r3, [r7, #12]
 8011756:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d105      	bne.n	801176a <tcp_pbuf_prealloc+0x2a>
 801175e:	4b30      	ldr	r3, [pc, #192]	@ (8011820 <tcp_pbuf_prealloc+0xe0>)
 8011760:	22e8      	movs	r2, #232	@ 0xe8
 8011762:	4930      	ldr	r1, [pc, #192]	@ (8011824 <tcp_pbuf_prealloc+0xe4>)
 8011764:	4830      	ldr	r0, [pc, #192]	@ (8011828 <tcp_pbuf_prealloc+0xe8>)
 8011766:	f7ef fcb3 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801176a:	6a3b      	ldr	r3, [r7, #32]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d105      	bne.n	801177c <tcp_pbuf_prealloc+0x3c>
 8011770:	4b2b      	ldr	r3, [pc, #172]	@ (8011820 <tcp_pbuf_prealloc+0xe0>)
 8011772:	22e9      	movs	r2, #233	@ 0xe9
 8011774:	492d      	ldr	r1, [pc, #180]	@ (801182c <tcp_pbuf_prealloc+0xec>)
 8011776:	482c      	ldr	r0, [pc, #176]	@ (8011828 <tcp_pbuf_prealloc+0xe8>)
 8011778:	f7ef fcaa 	bl	80010d0 <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801177c:	89ba      	ldrh	r2, [r7, #12]
 801177e:	897b      	ldrh	r3, [r7, #10]
 8011780:	429a      	cmp	r2, r3
 8011782:	d221      	bcs.n	80117c8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011784:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011788:	f003 0302 	and.w	r3, r3, #2
 801178c:	2b00      	cmp	r3, #0
 801178e:	d111      	bne.n	80117b4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	8b5b      	ldrh	r3, [r3, #26]
 8011794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011798:	2b00      	cmp	r3, #0
 801179a:	d115      	bne.n	80117c8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801179c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d007      	beq.n	80117b4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80117a4:	6a3b      	ldr	r3, [r7, #32]
 80117a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d103      	bne.n	80117b4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80117ac:	6a3b      	ldr	r3, [r7, #32]
 80117ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d009      	beq.n	80117c8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80117b4:	89bb      	ldrh	r3, [r7, #12]
 80117b6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80117ba:	f023 0203 	bic.w	r2, r3, #3
 80117be:	897b      	ldrh	r3, [r7, #10]
 80117c0:	4293      	cmp	r3, r2
 80117c2:	bf28      	it	cs
 80117c4:	4613      	movcs	r3, r2
 80117c6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80117c8:	8af9      	ldrh	r1, [r7, #22]
 80117ca:	7bfb      	ldrb	r3, [r7, #15]
 80117cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fb f853 	bl	800c87c <pbuf_alloc>
 80117d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d101      	bne.n	80117e2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80117de:	2300      	movs	r3, #0
 80117e0:	e019      	b.n	8011816 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d006      	beq.n	80117f8 <tcp_pbuf_prealloc+0xb8>
 80117ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011820 <tcp_pbuf_prealloc+0xe0>)
 80117ec:	f240 120b 	movw	r2, #267	@ 0x10b
 80117f0:	490f      	ldr	r1, [pc, #60]	@ (8011830 <tcp_pbuf_prealloc+0xf0>)
 80117f2:	480d      	ldr	r0, [pc, #52]	@ (8011828 <tcp_pbuf_prealloc+0xe8>)
 80117f4:	f7ef fc6c 	bl	80010d0 <printf>
  *oversize = p->len - length;
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	895a      	ldrh	r2, [r3, #10]
 80117fc:	89bb      	ldrh	r3, [r7, #12]
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	b29a      	uxth	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	89ba      	ldrh	r2, [r7, #12]
 801180a:	811a      	strh	r2, [r3, #8]
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	891a      	ldrh	r2, [r3, #8]
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	815a      	strh	r2, [r3, #10]
  return p;
 8011814:	693b      	ldr	r3, [r7, #16]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3718      	adds	r7, #24
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	08019a30 	.word	0x08019a30
 8011824:	08019ae8 	.word	0x08019ae8
 8011828:	08019a84 	.word	0x08019a84
 801182c:	08019b0c 	.word	0x08019b0c
 8011830:	08019b2c 	.word	0x08019b2c

08011834 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	460b      	mov	r3, r1
 801183e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <tcp_write_checks+0x20>
 8011846:	4b33      	ldr	r3, [pc, #204]	@ (8011914 <tcp_write_checks+0xe0>)
 8011848:	f240 1233 	movw	r2, #307	@ 0x133
 801184c:	4932      	ldr	r1, [pc, #200]	@ (8011918 <tcp_write_checks+0xe4>)
 801184e:	4833      	ldr	r0, [pc, #204]	@ (801191c <tcp_write_checks+0xe8>)
 8011850:	f7ef fc3e 	bl	80010d0 <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	7d1b      	ldrb	r3, [r3, #20]
 8011858:	2b04      	cmp	r3, #4
 801185a:	d00e      	beq.n	801187a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011860:	2b07      	cmp	r3, #7
 8011862:	d00a      	beq.n	801187a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011868:	2b02      	cmp	r3, #2
 801186a:	d006      	beq.n	801187a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011870:	2b03      	cmp	r3, #3
 8011872:	d002      	beq.n	801187a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011874:	f06f 030a 	mvn.w	r3, #10
 8011878:	e048      	b.n	801190c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801187a:	887b      	ldrh	r3, [r7, #2]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d101      	bne.n	8011884 <tcp_write_checks+0x50>
    return ERR_OK;
 8011880:	2300      	movs	r3, #0
 8011882:	e043      	b.n	801190c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801188a:	887a      	ldrh	r2, [r7, #2]
 801188c:	429a      	cmp	r2, r3
 801188e:	d909      	bls.n	80118a4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	8b5b      	ldrh	r3, [r3, #26]
 8011894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011898:	b29a      	uxth	r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801189e:	f04f 33ff 	mov.w	r3, #4294967295
 80118a2:	e033      	b.n	801190c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118aa:	2b08      	cmp	r3, #8
 80118ac:	d909      	bls.n	80118c2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	8b5b      	ldrh	r3, [r3, #26]
 80118b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80118bc:	f04f 33ff 	mov.w	r3, #4294967295
 80118c0:	e024      	b.n	801190c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00f      	beq.n	80118ec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d11a      	bne.n	801190a <tcp_write_checks+0xd6>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d116      	bne.n	801190a <tcp_write_checks+0xd6>
 80118dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011914 <tcp_write_checks+0xe0>)
 80118de:	f240 1255 	movw	r2, #341	@ 0x155
 80118e2:	490f      	ldr	r1, [pc, #60]	@ (8011920 <tcp_write_checks+0xec>)
 80118e4:	480d      	ldr	r0, [pc, #52]	@ (801191c <tcp_write_checks+0xe8>)
 80118e6:	f7ef fbf3 	bl	80010d0 <printf>
 80118ea:	e00e      	b.n	801190a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d103      	bne.n	80118fc <tcp_write_checks+0xc8>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d006      	beq.n	801190a <tcp_write_checks+0xd6>
 80118fc:	4b05      	ldr	r3, [pc, #20]	@ (8011914 <tcp_write_checks+0xe0>)
 80118fe:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011902:	4908      	ldr	r1, [pc, #32]	@ (8011924 <tcp_write_checks+0xf0>)
 8011904:	4805      	ldr	r0, [pc, #20]	@ (801191c <tcp_write_checks+0xe8>)
 8011906:	f7ef fbe3 	bl	80010d0 <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	08019a30 	.word	0x08019a30
 8011918:	08019b40 	.word	0x08019b40
 801191c:	08019a84 	.word	0x08019a84
 8011920:	08019b60 	.word	0x08019b60
 8011924:	08019b9c 	.word	0x08019b9c

08011928 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011928:	b590      	push	{r4, r7, lr}
 801192a:	b09b      	sub	sp, #108	@ 0x6c
 801192c:	af04      	add	r7, sp, #16
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	4611      	mov	r1, r2
 8011934:	461a      	mov	r2, r3
 8011936:	460b      	mov	r3, r1
 8011938:	80fb      	strh	r3, [r7, #6]
 801193a:	4613      	mov	r3, r2
 801193c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801193e:	2300      	movs	r3, #0
 8011940:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011942:	2300      	movs	r3, #0
 8011944:	653b      	str	r3, [r7, #80]	@ 0x50
 8011946:	2300      	movs	r3, #0
 8011948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801194a:	2300      	movs	r3, #0
 801194c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801194e:	2300      	movs	r3, #0
 8011950:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011952:	2300      	movs	r3, #0
 8011954:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011958:	2300      	movs	r3, #0
 801195a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801195e:	2300      	movs	r3, #0
 8011960:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011962:	2300      	movs	r3, #0
 8011964:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d109      	bne.n	8011984 <tcp_write+0x5c>
 8011970:	4ba4      	ldr	r3, [pc, #656]	@ (8011c04 <tcp_write+0x2dc>)
 8011972:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011976:	49a4      	ldr	r1, [pc, #656]	@ (8011c08 <tcp_write+0x2e0>)
 8011978:	48a4      	ldr	r0, [pc, #656]	@ (8011c0c <tcp_write+0x2e4>)
 801197a:	f7ef fba9 	bl	80010d0 <printf>
 801197e:	f06f 030f 	mvn.w	r3, #15
 8011982:	e32a      	b.n	8011fda <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801198a:	085b      	lsrs	r3, r3, #1
 801198c:	b29a      	uxth	r2, r3
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011992:	4293      	cmp	r3, r2
 8011994:	bf28      	it	cs
 8011996:	4613      	movcs	r3, r2
 8011998:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801199a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801199c:	2b00      	cmp	r3, #0
 801199e:	d102      	bne.n	80119a6 <tcp_write+0x7e>
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119a4:	e000      	b.n	80119a8 <tcp_write+0x80>
 80119a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80119a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d109      	bne.n	80119c4 <tcp_write+0x9c>
 80119b0:	4b94      	ldr	r3, [pc, #592]	@ (8011c04 <tcp_write+0x2dc>)
 80119b2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80119b6:	4996      	ldr	r1, [pc, #600]	@ (8011c10 <tcp_write+0x2e8>)
 80119b8:	4894      	ldr	r0, [pc, #592]	@ (8011c0c <tcp_write+0x2e4>)
 80119ba:	f7ef fb89 	bl	80010d0 <printf>
 80119be:	f06f 030f 	mvn.w	r3, #15
 80119c2:	e30a      	b.n	8011fda <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80119c4:	88fb      	ldrh	r3, [r7, #6]
 80119c6:	4619      	mov	r1, r3
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	f7ff ff33 	bl	8011834 <tcp_write_checks>
 80119ce:	4603      	mov	r3, r0
 80119d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80119d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <tcp_write+0xba>
    return err;
 80119dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80119e0:	e2fb      	b.n	8011fda <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80119e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119ec:	2300      	movs	r3, #0
 80119ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f000 80f6 	beq.w	8011be8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a02:	e002      	b.n	8011a0a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011a04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1f8      	bne.n	8011a04 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a14:	7a9b      	ldrb	r3, [r3, #10]
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	f003 0304 	and.w	r3, r3, #4
 8011a1e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011a20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a24:	891b      	ldrh	r3, [r3, #8]
 8011a26:	4619      	mov	r1, r3
 8011a28:	8c3b      	ldrh	r3, [r7, #32]
 8011a2a:	440b      	add	r3, r1
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	da06      	bge.n	8011a3e <tcp_write+0x116>
 8011a30:	4b74      	ldr	r3, [pc, #464]	@ (8011c04 <tcp_write+0x2dc>)
 8011a32:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011a36:	4977      	ldr	r1, [pc, #476]	@ (8011c14 <tcp_write+0x2ec>)
 8011a38:	4874      	ldr	r0, [pc, #464]	@ (8011c0c <tcp_write+0x2e4>)
 8011a3a:	f7ef fb49 	bl	80010d0 <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a40:	891a      	ldrh	r2, [r3, #8]
 8011a42:	8c3b      	ldrh	r3, [r7, #32]
 8011a44:	4413      	add	r3, r2
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011a54:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011a56:	8a7b      	ldrh	r3, [r7, #18]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d026      	beq.n	8011aaa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011a5c:	8a7b      	ldrh	r3, [r7, #18]
 8011a5e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d206      	bcs.n	8011a72 <tcp_write+0x14a>
 8011a64:	4b67      	ldr	r3, [pc, #412]	@ (8011c04 <tcp_write+0x2dc>)
 8011a66:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011a6a:	496b      	ldr	r1, [pc, #428]	@ (8011c18 <tcp_write+0x2f0>)
 8011a6c:	4867      	ldr	r0, [pc, #412]	@ (8011c0c <tcp_write+0x2e4>)
 8011a6e:	f7ef fb2f 	bl	80010d0 <printf>
      seg = last_unsent;
 8011a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011a76:	8a7b      	ldrh	r3, [r7, #18]
 8011a78:	88fa      	ldrh	r2, [r7, #6]
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	bf28      	it	cs
 8011a7e:	4613      	movcs	r3, r2
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011a84:	4293      	cmp	r3, r2
 8011a86:	bf28      	it	cs
 8011a88:	4613      	movcs	r3, r2
 8011a8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011a8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011a90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011a92:	4413      	add	r3, r2
 8011a94:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011a98:	8a7a      	ldrh	r2, [r7, #18]
 8011a9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011a9c:	1ad3      	subs	r3, r2, r3
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011aa2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011aa4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011aaa:	8a7b      	ldrh	r3, [r7, #18]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d00b      	beq.n	8011ac8 <tcp_write+0x1a0>
 8011ab0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ab4:	88fb      	ldrh	r3, [r7, #6]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d006      	beq.n	8011ac8 <tcp_write+0x1a0>
 8011aba:	4b52      	ldr	r3, [pc, #328]	@ (8011c04 <tcp_write+0x2dc>)
 8011abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ac0:	4956      	ldr	r1, [pc, #344]	@ (8011c1c <tcp_write+0x2f4>)
 8011ac2:	4852      	ldr	r0, [pc, #328]	@ (8011c0c <tcp_write+0x2e4>)
 8011ac4:	f7ef fb04 	bl	80010d0 <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011ac8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011acc:	88fb      	ldrh	r3, [r7, #6]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	f080 8167 	bcs.w	8011da2 <tcp_write+0x47a>
 8011ad4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f000 8163 	beq.w	8011da2 <tcp_write+0x47a>
 8011adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ade:	891b      	ldrh	r3, [r3, #8]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f000 815e 	beq.w	8011da2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011ae6:	88fa      	ldrh	r2, [r7, #6]
 8011ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011aec:	1ad2      	subs	r2, r2, r3
 8011aee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011af0:	4293      	cmp	r3, r2
 8011af2:	bfa8      	it	ge
 8011af4:	4613      	movge	r3, r2
 8011af6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011afa:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011afc:	797b      	ldrb	r3, [r7, #5]
 8011afe:	f003 0301 	and.w	r3, r3, #1
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d027      	beq.n	8011b56 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011b06:	f107 0012 	add.w	r0, r7, #18
 8011b0a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011b0c:	8bf9      	ldrh	r1, [r7, #30]
 8011b0e:	2301      	movs	r3, #1
 8011b10:	9302      	str	r3, [sp, #8]
 8011b12:	797b      	ldrb	r3, [r7, #5]
 8011b14:	9301      	str	r3, [sp, #4]
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	9300      	str	r3, [sp, #0]
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	f7ff fe0f 	bl	8011740 <tcp_pbuf_prealloc>
 8011b22:	6578      	str	r0, [r7, #84]	@ 0x54
 8011b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f000 8225 	beq.w	8011f76 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b2e:	6858      	ldr	r0, [r3, #4]
 8011b30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	4413      	add	r3, r2
 8011b38:	8bfa      	ldrh	r2, [r7, #30]
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	f005 f803 	bl	8016b46 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011b40:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011b42:	f7fb fa0d 	bl	800cf60 <pbuf_clen>
 8011b46:	4603      	mov	r3, r0
 8011b48:	461a      	mov	r2, r3
 8011b4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011b4e:	4413      	add	r3, r2
 8011b50:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011b54:	e041      	b.n	8011bda <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b5c:	e002      	b.n	8011b64 <tcp_write+0x23c>
 8011b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d1f8      	bne.n	8011b5e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b6e:	7b1b      	ldrb	r3, [r3, #12]
 8011b70:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d115      	bne.n	8011ba4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b7e:	8952      	ldrh	r2, [r2, #10]
 8011b80:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d10d      	bne.n	8011ba4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011b88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d006      	beq.n	8011b9e <tcp_write+0x276>
 8011b90:	4b1c      	ldr	r3, [pc, #112]	@ (8011c04 <tcp_write+0x2dc>)
 8011b92:	f240 2231 	movw	r2, #561	@ 0x231
 8011b96:	4922      	ldr	r1, [pc, #136]	@ (8011c20 <tcp_write+0x2f8>)
 8011b98:	481c      	ldr	r0, [pc, #112]	@ (8011c0c <tcp_write+0x2e4>)
 8011b9a:	f7ef fa99 	bl	80010d0 <printf>
          extendlen = seglen;
 8011b9e:	8bfb      	ldrh	r3, [r7, #30]
 8011ba0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011ba2:	e01a      	b.n	8011bda <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011ba4:	8bfb      	ldrh	r3, [r7, #30]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	4619      	mov	r1, r3
 8011baa:	2000      	movs	r0, #0
 8011bac:	f7fa fe66 	bl	800c87c <pbuf_alloc>
 8011bb0:	6578      	str	r0, [r7, #84]	@ 0x54
 8011bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f000 81e0 	beq.w	8011f7a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011bba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011bbe:	68ba      	ldr	r2, [r7, #8]
 8011bc0:	441a      	add	r2, r3
 8011bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bc4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011bc6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011bc8:	f7fb f9ca 	bl	800cf60 <pbuf_clen>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	461a      	mov	r2, r3
 8011bd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011bda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011bde:	8bfb      	ldrh	r3, [r7, #30]
 8011be0:	4413      	add	r3, r2
 8011be2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011be6:	e0dc      	b.n	8011da2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f000 80d7 	beq.w	8011da2 <tcp_write+0x47a>
 8011bf4:	4b03      	ldr	r3, [pc, #12]	@ (8011c04 <tcp_write+0x2dc>)
 8011bf6:	f240 224a 	movw	r2, #586	@ 0x24a
 8011bfa:	490a      	ldr	r1, [pc, #40]	@ (8011c24 <tcp_write+0x2fc>)
 8011bfc:	4803      	ldr	r0, [pc, #12]	@ (8011c0c <tcp_write+0x2e4>)
 8011bfe:	f7ef fa67 	bl	80010d0 <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011c02:	e0ce      	b.n	8011da2 <tcp_write+0x47a>
 8011c04:	08019a30 	.word	0x08019a30
 8011c08:	08019bd0 	.word	0x08019bd0
 8011c0c:	08019a84 	.word	0x08019a84
 8011c10:	08019be8 	.word	0x08019be8
 8011c14:	08019c1c 	.word	0x08019c1c
 8011c18:	08019c34 	.word	0x08019c34
 8011c1c:	08019c54 	.word	0x08019c54
 8011c20:	08019c74 	.word	0x08019c74
 8011c24:	08019ca0 	.word	0x08019ca0
    struct pbuf *p;
    u16_t left = len - pos;
 8011c28:	88fa      	ldrh	r2, [r7, #6]
 8011c2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011c32:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011c3a:	1ad3      	subs	r3, r2, r3
 8011c3c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011c3e:	8b7a      	ldrh	r2, [r7, #26]
 8011c40:	8bbb      	ldrh	r3, [r7, #28]
 8011c42:	4293      	cmp	r3, r2
 8011c44:	bf28      	it	cs
 8011c46:	4613      	movcs	r3, r2
 8011c48:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011c4a:	797b      	ldrb	r3, [r7, #5]
 8011c4c:	f003 0301 	and.w	r3, r3, #1
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d036      	beq.n	8011cc2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011c54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	8b3b      	ldrh	r3, [r7, #24]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	b299      	uxth	r1, r3
 8011c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	bf0c      	ite	eq
 8011c66:	2301      	moveq	r3, #1
 8011c68:	2300      	movne	r3, #0
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	f107 0012 	add.w	r0, r7, #18
 8011c70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011c72:	9302      	str	r3, [sp, #8]
 8011c74:	797b      	ldrb	r3, [r7, #5]
 8011c76:	9301      	str	r3, [sp, #4]
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2036      	movs	r0, #54	@ 0x36
 8011c80:	f7ff fd5e 	bl	8011740 <tcp_pbuf_prealloc>
 8011c84:	6338      	str	r0, [r7, #48]	@ 0x30
 8011c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 8178 	beq.w	8011f7e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c90:	895b      	ldrh	r3, [r3, #10]
 8011c92:	8b3a      	ldrh	r2, [r7, #24]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d906      	bls.n	8011ca6 <tcp_write+0x37e>
 8011c98:	4b8c      	ldr	r3, [pc, #560]	@ (8011ecc <tcp_write+0x5a4>)
 8011c9a:	f240 2266 	movw	r2, #614	@ 0x266
 8011c9e:	498c      	ldr	r1, [pc, #560]	@ (8011ed0 <tcp_write+0x5a8>)
 8011ca0:	488c      	ldr	r0, [pc, #560]	@ (8011ed4 <tcp_write+0x5ac>)
 8011ca2:	f7ef fa15 	bl	80010d0 <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ca8:	685a      	ldr	r2, [r3, #4]
 8011caa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011cae:	18d0      	adds	r0, r2, r3
 8011cb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011cb4:	68ba      	ldr	r2, [r7, #8]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	8b3a      	ldrh	r2, [r7, #24]
 8011cba:	4619      	mov	r1, r3
 8011cbc:	f004 ff43 	bl	8016b46 <memcpy>
 8011cc0:	e02f      	b.n	8011d22 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011cc2:	8a7b      	ldrh	r3, [r7, #18]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d006      	beq.n	8011cd6 <tcp_write+0x3ae>
 8011cc8:	4b80      	ldr	r3, [pc, #512]	@ (8011ecc <tcp_write+0x5a4>)
 8011cca:	f240 2271 	movw	r2, #625	@ 0x271
 8011cce:	4982      	ldr	r1, [pc, #520]	@ (8011ed8 <tcp_write+0x5b0>)
 8011cd0:	4880      	ldr	r0, [pc, #512]	@ (8011ed4 <tcp_write+0x5ac>)
 8011cd2:	f7ef f9fd 	bl	80010d0 <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011cd6:	8b3b      	ldrh	r3, [r7, #24]
 8011cd8:	2201      	movs	r2, #1
 8011cda:	4619      	mov	r1, r3
 8011cdc:	2036      	movs	r0, #54	@ 0x36
 8011cde:	f7fa fdcd 	bl	800c87c <pbuf_alloc>
 8011ce2:	6178      	str	r0, [r7, #20]
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	f000 814b 	beq.w	8011f82 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011cec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	441a      	add	r2, r3
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011cf8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d02:	4619      	mov	r1, r3
 8011d04:	2036      	movs	r0, #54	@ 0x36
 8011d06:	f7fa fdb9 	bl	800c87c <pbuf_alloc>
 8011d0a:	6338      	str	r0, [r7, #48]	@ 0x30
 8011d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d103      	bne.n	8011d1a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011d12:	6978      	ldr	r0, [r7, #20]
 8011d14:	f7fb f896 	bl	800ce44 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011d18:	e136      	b.n	8011f88 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011d1a:	6979      	ldr	r1, [r7, #20]
 8011d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d1e:	f7fb f95f 	bl	800cfe0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011d22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d24:	f7fb f91c 	bl	800cf60 <pbuf_clen>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011d30:	4413      	add	r3, r2
 8011d32:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011d3a:	2b09      	cmp	r3, #9
 8011d3c:	d903      	bls.n	8011d46 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011d3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d40:	f7fb f880 	bl	800ce44 <pbuf_free>
      goto memerr;
 8011d44:	e120      	b.n	8011f88 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011d4e:	441a      	add	r2, r3
 8011d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	4613      	mov	r3, r2
 8011d58:	2200      	movs	r2, #0
 8011d5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f7ff fc53 	bl	8011608 <tcp_create_segment>
 8011d62:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 810d 	beq.w	8011f86 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d102      	bne.n	8011d78 <tcp_write+0x450>
      queue = seg;
 8011d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d76:	e00c      	b.n	8011d92 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d106      	bne.n	8011d8c <tcp_write+0x464>
 8011d7e:	4b53      	ldr	r3, [pc, #332]	@ (8011ecc <tcp_write+0x5a4>)
 8011d80:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011d84:	4955      	ldr	r1, [pc, #340]	@ (8011edc <tcp_write+0x5b4>)
 8011d86:	4853      	ldr	r0, [pc, #332]	@ (8011ed4 <tcp_write+0x5ac>)
 8011d88:	f7ef f9a2 	bl	80010d0 <printf>
      prev_seg->next = seg;
 8011d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011d90:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d94:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011d96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011d9a:	8b3b      	ldrh	r3, [r7, #24]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011da2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011da6:	88fb      	ldrh	r3, [r7, #6]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	f4ff af3d 	bcc.w	8011c28 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011dae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d02c      	beq.n	8011e0e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011dba:	e01e      	b.n	8011dfa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dbe:	891a      	ldrh	r2, [r3, #8]
 8011dc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011dc2:	4413      	add	r3, r2
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dc8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d110      	bne.n	8011df4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dd8:	8952      	ldrh	r2, [r2, #10]
 8011dda:	4413      	add	r3, r2
 8011ddc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011dde:	68b9      	ldr	r1, [r7, #8]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f004 feb0 	bl	8016b46 <memcpy>
        p->len += oversize_used;
 8011de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011de8:	895a      	ldrh	r2, [r3, #10]
 8011dea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011dec:	4413      	add	r3, r2
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011df2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d1dd      	bne.n	8011dbc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e02:	891a      	ldrh	r2, [r3, #8]
 8011e04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e06:	4413      	add	r3, r2
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e0c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011e0e:	8a7a      	ldrh	r2, [r7, #18]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d018      	beq.n	8011e4e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d106      	bne.n	8011e30 <tcp_write+0x508>
 8011e22:	4b2a      	ldr	r3, [pc, #168]	@ (8011ecc <tcp_write+0x5a4>)
 8011e24:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8011e28:	492d      	ldr	r1, [pc, #180]	@ (8011ee0 <tcp_write+0x5b8>)
 8011e2a:	482a      	ldr	r0, [pc, #168]	@ (8011ed4 <tcp_write+0x5ac>)
 8011e2c:	f7ef f950 	bl	80010d0 <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7fb f8d2 	bl	800cfe0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e3e:	891a      	ldrh	r2, [r3, #8]
 8011e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e42:	891b      	ldrh	r3, [r3, #8]
 8011e44:	4413      	add	r3, r2
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e4a:	811a      	strh	r2, [r3, #8]
 8011e4c:	e037      	b.n	8011ebe <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011e4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d034      	beq.n	8011ebe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d003      	beq.n	8011e62 <tcp_write+0x53a>
 8011e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d106      	bne.n	8011e70 <tcp_write+0x548>
 8011e62:	4b1a      	ldr	r3, [pc, #104]	@ (8011ecc <tcp_write+0x5a4>)
 8011e64:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8011e68:	491e      	ldr	r1, [pc, #120]	@ (8011ee4 <tcp_write+0x5bc>)
 8011e6a:	481a      	ldr	r0, [pc, #104]	@ (8011ed4 <tcp_write+0x5ac>)
 8011e6c:	f7ef f930 	bl	80010d0 <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e76:	e009      	b.n	8011e8c <tcp_write+0x564>
      p->tot_len += extendlen;
 8011e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e7a:	891a      	ldrh	r2, [r3, #8]
 8011e7c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011e7e:	4413      	add	r3, r2
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e84:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d1f1      	bne.n	8011e78 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e96:	891a      	ldrh	r2, [r3, #8]
 8011e98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011e9a:	4413      	add	r3, r2
 8011e9c:	b29a      	uxth	r2, r3
 8011e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea4:	895a      	ldrh	r2, [r3, #10]
 8011ea6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ea8:	4413      	add	r3, r2
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eae:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eb2:	891a      	ldrh	r2, [r3, #8]
 8011eb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011eb6:	4413      	add	r3, r2
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ebc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d111      	bne.n	8011ee8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ec8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011eca:	e010      	b.n	8011eee <tcp_write+0x5c6>
 8011ecc:	08019a30 	.word	0x08019a30
 8011ed0:	08019cd0 	.word	0x08019cd0
 8011ed4:	08019a84 	.word	0x08019a84
 8011ed8:	08019d10 	.word	0x08019d10
 8011edc:	08019d20 	.word	0x08019d20
 8011ee0:	08019d34 	.word	0x08019d34
 8011ee4:	08019d6c 	.word	0x08019d6c
  } else {
    last_unsent->next = queue;
 8011ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011eec:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011ef2:	88fb      	ldrh	r3, [r7, #6]
 8011ef4:	441a      	add	r2, r3
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011f00:	88fb      	ldrh	r3, [r7, #6]
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011f12:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00e      	beq.n	8011f3e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d10a      	bne.n	8011f3e <tcp_write+0x616>
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d106      	bne.n	8011f3e <tcp_write+0x616>
 8011f30:	4b2c      	ldr	r3, [pc, #176]	@ (8011fe4 <tcp_write+0x6bc>)
 8011f32:	f240 3212 	movw	r2, #786	@ 0x312
 8011f36:	492c      	ldr	r1, [pc, #176]	@ (8011fe8 <tcp_write+0x6c0>)
 8011f38:	482c      	ldr	r0, [pc, #176]	@ (8011fec <tcp_write+0x6c4>)
 8011f3a:	f7ef f8c9 	bl	80010d0 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d016      	beq.n	8011f72 <tcp_write+0x64a>
 8011f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d012      	beq.n	8011f72 <tcp_write+0x64a>
 8011f4c:	797b      	ldrb	r3, [r7, #5]
 8011f4e:	f003 0302 	and.w	r3, r3, #2
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d10d      	bne.n	8011f72 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	899b      	ldrh	r3, [r3, #12]
 8011f5c:	b29c      	uxth	r4, r3
 8011f5e:	2008      	movs	r0, #8
 8011f60:	f7f9 fb7e 	bl	800b660 <lwip_htons>
 8011f64:	4603      	mov	r3, r0
 8011f66:	461a      	mov	r2, r3
 8011f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	4322      	orrs	r2, r4
 8011f6e:	b292      	uxth	r2, r2
 8011f70:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011f72:	2300      	movs	r3, #0
 8011f74:	e031      	b.n	8011fda <tcp_write+0x6b2>
          goto memerr;
 8011f76:	bf00      	nop
 8011f78:	e006      	b.n	8011f88 <tcp_write+0x660>
            goto memerr;
 8011f7a:	bf00      	nop
 8011f7c:	e004      	b.n	8011f88 <tcp_write+0x660>
        goto memerr;
 8011f7e:	bf00      	nop
 8011f80:	e002      	b.n	8011f88 <tcp_write+0x660>
        goto memerr;
 8011f82:	bf00      	nop
 8011f84:	e000      	b.n	8011f88 <tcp_write+0x660>
      goto memerr;
 8011f86:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	8b5b      	ldrh	r3, [r3, #26]
 8011f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d002      	beq.n	8011fa2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011f9c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011f9e:	f7fa ff51 	bl	800ce44 <pbuf_free>
  }
  if (queue != NULL) {
 8011fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d002      	beq.n	8011fae <tcp_write+0x686>
    tcp_segs_free(queue);
 8011fa8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011faa:	f7fc fb71 	bl	800e690 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d00e      	beq.n	8011fd6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d10a      	bne.n	8011fd6 <tcp_write+0x6ae>
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d106      	bne.n	8011fd6 <tcp_write+0x6ae>
 8011fc8:	4b06      	ldr	r3, [pc, #24]	@ (8011fe4 <tcp_write+0x6bc>)
 8011fca:	f240 3227 	movw	r2, #807	@ 0x327
 8011fce:	4906      	ldr	r1, [pc, #24]	@ (8011fe8 <tcp_write+0x6c0>)
 8011fd0:	4806      	ldr	r0, [pc, #24]	@ (8011fec <tcp_write+0x6c4>)
 8011fd2:	f7ef f87d 	bl	80010d0 <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	375c      	adds	r7, #92	@ 0x5c
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd90      	pop	{r4, r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	08019a30 	.word	0x08019a30
 8011fe8:	08019da4 	.word	0x08019da4
 8011fec:	08019a84 	.word	0x08019a84

08011ff0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b08b      	sub	sp, #44	@ 0x2c
 8011ff4:	af02      	add	r7, sp, #8
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	61fb      	str	r3, [r7, #28]
 8012000:	2300      	movs	r3, #0
 8012002:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012004:	2300      	movs	r3, #0
 8012006:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d106      	bne.n	801201c <tcp_split_unsent_seg+0x2c>
 801200e:	4b95      	ldr	r3, [pc, #596]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012010:	f240 324b 	movw	r2, #843	@ 0x34b
 8012014:	4994      	ldr	r1, [pc, #592]	@ (8012268 <tcp_split_unsent_seg+0x278>)
 8012016:	4895      	ldr	r0, [pc, #596]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 8012018:	f7ef f85a 	bl	80010d0 <printf>

  useg = pcb->unsent;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012020:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d102      	bne.n	801202e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012028:	f04f 33ff 	mov.w	r3, #4294967295
 801202c:	e116      	b.n	801225c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801202e:	887b      	ldrh	r3, [r7, #2]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d109      	bne.n	8012048 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012034:	4b8b      	ldr	r3, [pc, #556]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012036:	f240 3253 	movw	r2, #851	@ 0x353
 801203a:	498d      	ldr	r1, [pc, #564]	@ (8012270 <tcp_split_unsent_seg+0x280>)
 801203c:	488b      	ldr	r0, [pc, #556]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 801203e:	f7ef f847 	bl	80010d0 <printf>
    return ERR_VAL;
 8012042:	f06f 0305 	mvn.w	r3, #5
 8012046:	e109      	b.n	801225c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	891b      	ldrh	r3, [r3, #8]
 801204c:	887a      	ldrh	r2, [r7, #2]
 801204e:	429a      	cmp	r2, r3
 8012050:	d301      	bcc.n	8012056 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	e102      	b.n	801225c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801205a:	887a      	ldrh	r2, [r7, #2]
 801205c:	429a      	cmp	r2, r3
 801205e:	d906      	bls.n	801206e <tcp_split_unsent_seg+0x7e>
 8012060:	4b80      	ldr	r3, [pc, #512]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012062:	f240 325b 	movw	r2, #859	@ 0x35b
 8012066:	4983      	ldr	r1, [pc, #524]	@ (8012274 <tcp_split_unsent_seg+0x284>)
 8012068:	4880      	ldr	r0, [pc, #512]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 801206a:	f7ef f831 	bl	80010d0 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	891b      	ldrh	r3, [r3, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d106      	bne.n	8012084 <tcp_split_unsent_seg+0x94>
 8012076:	4b7b      	ldr	r3, [pc, #492]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012078:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801207c:	497e      	ldr	r1, [pc, #504]	@ (8012278 <tcp_split_unsent_seg+0x288>)
 801207e:	487b      	ldr	r0, [pc, #492]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 8012080:	f7ef f826 	bl	80010d0 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	7a9b      	ldrb	r3, [r3, #10]
 8012088:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801208a:	7bfb      	ldrb	r3, [r7, #15]
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	b2db      	uxtb	r3, r3
 8012090:	f003 0304 	and.w	r3, r3, #4
 8012094:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	891a      	ldrh	r2, [r3, #8]
 801209a:	887b      	ldrh	r3, [r7, #2]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80120a0:	7bbb      	ldrb	r3, [r7, #14]
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	89bb      	ldrh	r3, [r7, #12]
 80120a6:	4413      	add	r3, r2
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80120ae:	4619      	mov	r1, r3
 80120b0:	2036      	movs	r0, #54	@ 0x36
 80120b2:	f7fa fbe3 	bl	800c87c <pbuf_alloc>
 80120b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f000 80b7 	beq.w	801222e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	891a      	ldrh	r2, [r3, #8]
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	891b      	ldrh	r3, [r3, #8]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	887b      	ldrh	r3, [r7, #2]
 80120d0:	4413      	add	r3, r2
 80120d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	6858      	ldr	r0, [r3, #4]
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	685a      	ldr	r2, [r3, #4]
 80120dc:	7bbb      	ldrb	r3, [r7, #14]
 80120de:	18d1      	adds	r1, r2, r3
 80120e0:	897b      	ldrh	r3, [r7, #10]
 80120e2:	89ba      	ldrh	r2, [r7, #12]
 80120e4:	f7fb f8a4 	bl	800d230 <pbuf_copy_partial>
 80120e8:	4603      	mov	r3, r0
 80120ea:	461a      	mov	r2, r3
 80120ec:	89bb      	ldrh	r3, [r7, #12]
 80120ee:	4293      	cmp	r3, r2
 80120f0:	f040 809f 	bne.w	8012232 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	899b      	ldrh	r3, [r3, #12]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7f9 faaf 	bl	800b660 <lwip_htons>
 8012102:	4603      	mov	r3, r0
 8012104:	b2db      	uxtb	r3, r3
 8012106:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801210a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801210c:	2300      	movs	r3, #0
 801210e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012110:	7efb      	ldrb	r3, [r7, #27]
 8012112:	f003 0308 	and.w	r3, r3, #8
 8012116:	2b00      	cmp	r3, #0
 8012118:	d007      	beq.n	801212a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801211a:	7efb      	ldrb	r3, [r7, #27]
 801211c:	f023 0308 	bic.w	r3, r3, #8
 8012120:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012122:	7ebb      	ldrb	r3, [r7, #26]
 8012124:	f043 0308 	orr.w	r3, r3, #8
 8012128:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801212a:	7efb      	ldrb	r3, [r7, #27]
 801212c:	f003 0301 	and.w	r3, r3, #1
 8012130:	2b00      	cmp	r3, #0
 8012132:	d007      	beq.n	8012144 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012134:	7efb      	ldrb	r3, [r7, #27]
 8012136:	f023 0301 	bic.w	r3, r3, #1
 801213a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801213c:	7ebb      	ldrb	r3, [r7, #26]
 801213e:	f043 0301 	orr.w	r3, r3, #1
 8012142:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	4618      	mov	r0, r3
 801214c:	f7f9 fa9d 	bl	800b68a <lwip_htonl>
 8012150:	4602      	mov	r2, r0
 8012152:	887b      	ldrh	r3, [r7, #2]
 8012154:	18d1      	adds	r1, r2, r3
 8012156:	7eba      	ldrb	r2, [r7, #26]
 8012158:	7bfb      	ldrb	r3, [r7, #15]
 801215a:	9300      	str	r3, [sp, #0]
 801215c:	460b      	mov	r3, r1
 801215e:	6939      	ldr	r1, [r7, #16]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff fa51 	bl	8011608 <tcp_create_segment>
 8012166:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d063      	beq.n	8012236 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	4618      	mov	r0, r3
 8012174:	f7fa fef4 	bl	800cf60 <pbuf_clen>
 8012178:	4603      	mov	r3, r0
 801217a:	461a      	mov	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012182:	1a9b      	subs	r3, r3, r2
 8012184:	b29a      	uxth	r2, r3
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	6858      	ldr	r0, [r3, #4]
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	891a      	ldrh	r2, [r3, #8]
 8012196:	89bb      	ldrh	r3, [r7, #12]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	b29b      	uxth	r3, r3
 801219c:	4619      	mov	r1, r3
 801219e:	f7fa fccb 	bl	800cb38 <pbuf_realloc>
  useg->len -= remainder;
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	891a      	ldrh	r2, [r3, #8]
 80121a6:	89bb      	ldrh	r3, [r7, #12]
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	899b      	ldrh	r3, [r3, #12]
 80121b6:	b29c      	uxth	r4, r3
 80121b8:	7efb      	ldrb	r3, [r7, #27]
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	4618      	mov	r0, r3
 80121be:	f7f9 fa4f 	bl	800b660 <lwip_htons>
 80121c2:	4603      	mov	r3, r0
 80121c4:	461a      	mov	r2, r3
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	4322      	orrs	r2, r4
 80121cc:	b292      	uxth	r2, r2
 80121ce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7fa fec3 	bl	800cf60 <pbuf_clen>
 80121da:	4603      	mov	r3, r0
 80121dc:	461a      	mov	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80121e4:	4413      	add	r3, r2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80121ee:	69fb      	ldr	r3, [r7, #28]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fa feb4 	bl	800cf60 <pbuf_clen>
 80121f8:	4603      	mov	r3, r0
 80121fa:	461a      	mov	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012202:	4413      	add	r3, r2
 8012204:	b29a      	uxth	r2, r3
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	69fb      	ldr	r3, [r7, #28]
 8012212:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	69fa      	ldr	r2, [r7, #28]
 8012218:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d103      	bne.n	801222a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801222a:	2300      	movs	r3, #0
 801222c:	e016      	b.n	801225c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801222e:	bf00      	nop
 8012230:	e002      	b.n	8012238 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012232:	bf00      	nop
 8012234:	e000      	b.n	8012238 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012236:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d006      	beq.n	801224c <tcp_split_unsent_seg+0x25c>
 801223e:	4b09      	ldr	r3, [pc, #36]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012240:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012244:	490d      	ldr	r1, [pc, #52]	@ (801227c <tcp_split_unsent_seg+0x28c>)
 8012246:	4809      	ldr	r0, [pc, #36]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 8012248:	f7ee ff42 	bl	80010d0 <printf>
  if (p != NULL) {
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d002      	beq.n	8012258 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012252:	6938      	ldr	r0, [r7, #16]
 8012254:	f7fa fdf6 	bl	800ce44 <pbuf_free>
  }

  return ERR_MEM;
 8012258:	f04f 33ff 	mov.w	r3, #4294967295
}
 801225c:	4618      	mov	r0, r3
 801225e:	3724      	adds	r7, #36	@ 0x24
 8012260:	46bd      	mov	sp, r7
 8012262:	bd90      	pop	{r4, r7, pc}
 8012264:	08019a30 	.word	0x08019a30
 8012268:	08019dc4 	.word	0x08019dc4
 801226c:	08019a84 	.word	0x08019a84
 8012270:	08019de8 	.word	0x08019de8
 8012274:	08019e0c 	.word	0x08019e0c
 8012278:	08019e1c 	.word	0x08019e1c
 801227c:	08019e2c 	.word	0x08019e2c

08012280 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012280:	b590      	push	{r4, r7, lr}
 8012282:	b085      	sub	sp, #20
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d106      	bne.n	801229c <tcp_send_fin+0x1c>
 801228e:	4b21      	ldr	r3, [pc, #132]	@ (8012314 <tcp_send_fin+0x94>)
 8012290:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012294:	4920      	ldr	r1, [pc, #128]	@ (8012318 <tcp_send_fin+0x98>)
 8012296:	4821      	ldr	r0, [pc, #132]	@ (801231c <tcp_send_fin+0x9c>)
 8012298:	f7ee ff1a 	bl	80010d0 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d02e      	beq.n	8012302 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a8:	60fb      	str	r3, [r7, #12]
 80122aa:	e002      	b.n	80122b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d1f8      	bne.n	80122ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	68db      	ldr	r3, [r3, #12]
 80122be:	899b      	ldrh	r3, [r3, #12]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7f9 f9cc 	bl	800b660 <lwip_htons>
 80122c8:	4603      	mov	r3, r0
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	f003 0307 	and.w	r3, r3, #7
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d116      	bne.n	8012302 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	899b      	ldrh	r3, [r3, #12]
 80122da:	b29c      	uxth	r4, r3
 80122dc:	2001      	movs	r0, #1
 80122de:	f7f9 f9bf 	bl	800b660 <lwip_htons>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	68db      	ldr	r3, [r3, #12]
 80122ea:	4322      	orrs	r2, r4
 80122ec:	b292      	uxth	r2, r2
 80122ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	8b5b      	ldrh	r3, [r3, #26]
 80122f4:	f043 0320 	orr.w	r3, r3, #32
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80122fe:	2300      	movs	r3, #0
 8012300:	e004      	b.n	801230c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012302:	2101      	movs	r1, #1
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 f80b 	bl	8012320 <tcp_enqueue_flags>
 801230a:	4603      	mov	r3, r0
}
 801230c:	4618      	mov	r0, r3
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	bd90      	pop	{r4, r7, pc}
 8012314:	08019a30 	.word	0x08019a30
 8012318:	08019e38 	.word	0x08019e38
 801231c:	08019a84 	.word	0x08019a84

08012320 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b08a      	sub	sp, #40	@ 0x28
 8012324:	af02      	add	r7, sp, #8
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	460b      	mov	r3, r1
 801232a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801232c:	2300      	movs	r3, #0
 801232e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012330:	2300      	movs	r3, #0
 8012332:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012334:	78fb      	ldrb	r3, [r7, #3]
 8012336:	f003 0303 	and.w	r3, r3, #3
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_enqueue_flags+0x2c>
 801233e:	4b67      	ldr	r3, [pc, #412]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 8012340:	f240 4211 	movw	r2, #1041	@ 0x411
 8012344:	4966      	ldr	r1, [pc, #408]	@ (80124e0 <tcp_enqueue_flags+0x1c0>)
 8012346:	4867      	ldr	r0, [pc, #412]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 8012348:	f7ee fec2 	bl	80010d0 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <tcp_enqueue_flags+0x40>
 8012352:	4b62      	ldr	r3, [pc, #392]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 8012354:	f240 4213 	movw	r2, #1043	@ 0x413
 8012358:	4963      	ldr	r1, [pc, #396]	@ (80124e8 <tcp_enqueue_flags+0x1c8>)
 801235a:	4862      	ldr	r0, [pc, #392]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 801235c:	f7ee feb8 	bl	80010d0 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012360:	78fb      	ldrb	r3, [r7, #3]
 8012362:	f003 0302 	and.w	r3, r3, #2
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801236a:	2301      	movs	r3, #1
 801236c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801236e:	7ffb      	ldrb	r3, [r7, #31]
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	b2db      	uxtb	r3, r3
 8012374:	f003 0304 	and.w	r3, r3, #4
 8012378:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801237a:	7dfb      	ldrb	r3, [r7, #23]
 801237c:	b29b      	uxth	r3, r3
 801237e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012382:	4619      	mov	r1, r3
 8012384:	2036      	movs	r0, #54	@ 0x36
 8012386:	f7fa fa79 	bl	800c87c <pbuf_alloc>
 801238a:	6138      	str	r0, [r7, #16]
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d109      	bne.n	80123a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	8b5b      	ldrh	r3, [r3, #26]
 8012396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801239a:	b29a      	uxth	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80123a0:	f04f 33ff 	mov.w	r3, #4294967295
 80123a4:	e095      	b.n	80124d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	895a      	ldrh	r2, [r3, #10]
 80123aa:	7dfb      	ldrb	r3, [r7, #23]
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d206      	bcs.n	80123c0 <tcp_enqueue_flags+0xa0>
 80123b2:	4b4a      	ldr	r3, [pc, #296]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 80123b4:	f240 4239 	movw	r2, #1081	@ 0x439
 80123b8:	494c      	ldr	r1, [pc, #304]	@ (80124ec <tcp_enqueue_flags+0x1cc>)
 80123ba:	484a      	ldr	r0, [pc, #296]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 80123bc:	f7ee fe88 	bl	80010d0 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80123c4:	78fa      	ldrb	r2, [r7, #3]
 80123c6:	7ffb      	ldrb	r3, [r7, #31]
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	460b      	mov	r3, r1
 80123cc:	6939      	ldr	r1, [r7, #16]
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7ff f91a 	bl	8011608 <tcp_create_segment>
 80123d4:	60f8      	str	r0, [r7, #12]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d109      	bne.n	80123f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	8b5b      	ldrh	r3, [r3, #26]
 80123e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80123ea:	f04f 33ff 	mov.w	r3, #4294967295
 80123ee:	e070      	b.n	80124d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	f003 0303 	and.w	r3, r3, #3
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d006      	beq.n	801240a <tcp_enqueue_flags+0xea>
 80123fc:	4b37      	ldr	r3, [pc, #220]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 80123fe:	f240 4242 	movw	r2, #1090	@ 0x442
 8012402:	493b      	ldr	r1, [pc, #236]	@ (80124f0 <tcp_enqueue_flags+0x1d0>)
 8012404:	4837      	ldr	r0, [pc, #220]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 8012406:	f7ee fe63 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	891b      	ldrh	r3, [r3, #8]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d006      	beq.n	8012420 <tcp_enqueue_flags+0x100>
 8012412:	4b32      	ldr	r3, [pc, #200]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 8012414:	f240 4243 	movw	r2, #1091	@ 0x443
 8012418:	4936      	ldr	r1, [pc, #216]	@ (80124f4 <tcp_enqueue_flags+0x1d4>)
 801241a:	4832      	ldr	r0, [pc, #200]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 801241c:	f7ee fe58 	bl	80010d0 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012424:	2b00      	cmp	r3, #0
 8012426:	d103      	bne.n	8012430 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801242e:	e00d      	b.n	801244c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012434:	61bb      	str	r3, [r7, #24]
 8012436:	e002      	b.n	801243e <tcp_enqueue_flags+0x11e>
 8012438:	69bb      	ldr	r3, [r7, #24]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	61bb      	str	r3, [r7, #24]
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1f8      	bne.n	8012438 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2200      	movs	r2, #0
 8012450:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012454:	78fb      	ldrb	r3, [r7, #3]
 8012456:	f003 0302 	and.w	r3, r3, #2
 801245a:	2b00      	cmp	r3, #0
 801245c:	d104      	bne.n	8012468 <tcp_enqueue_flags+0x148>
 801245e:	78fb      	ldrb	r3, [r7, #3]
 8012460:	f003 0301 	and.w	r3, r3, #1
 8012464:	2b00      	cmp	r3, #0
 8012466:	d004      	beq.n	8012472 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801246c:	1c5a      	adds	r2, r3, #1
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012472:	78fb      	ldrb	r3, [r7, #3]
 8012474:	f003 0301 	and.w	r3, r3, #1
 8012478:	2b00      	cmp	r3, #0
 801247a:	d006      	beq.n	801248a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	8b5b      	ldrh	r3, [r3, #26]
 8012480:	f043 0320 	orr.w	r3, r3, #32
 8012484:	b29a      	uxth	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	f7fa fd66 	bl	800cf60 <pbuf_clen>
 8012494:	4603      	mov	r3, r0
 8012496:	461a      	mov	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801249e:	4413      	add	r3, r2
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d00e      	beq.n	80124d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d10a      	bne.n	80124d0 <tcp_enqueue_flags+0x1b0>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_enqueue_flags+0x1b0>
 80124c2:	4b06      	ldr	r3, [pc, #24]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 80124c4:	f240 4265 	movw	r2, #1125	@ 0x465
 80124c8:	490b      	ldr	r1, [pc, #44]	@ (80124f8 <tcp_enqueue_flags+0x1d8>)
 80124ca:	4806      	ldr	r0, [pc, #24]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 80124cc:	f7ee fe00 	bl	80010d0 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3720      	adds	r7, #32
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	08019a30 	.word	0x08019a30
 80124e0:	08019e54 	.word	0x08019e54
 80124e4:	08019a84 	.word	0x08019a84
 80124e8:	08019eac 	.word	0x08019eac
 80124ec:	08019ecc 	.word	0x08019ecc
 80124f0:	08019f08 	.word	0x08019f08
 80124f4:	08019f20 	.word	0x08019f20
 80124f8:	08019f4c 	.word	0x08019f4c

080124fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80124fc:	b5b0      	push	{r4, r5, r7, lr}
 80124fe:	b08a      	sub	sp, #40	@ 0x28
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <tcp_output+0x1c>
 801250a:	4b8a      	ldr	r3, [pc, #552]	@ (8012734 <tcp_output+0x238>)
 801250c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012510:	4989      	ldr	r1, [pc, #548]	@ (8012738 <tcp_output+0x23c>)
 8012512:	488a      	ldr	r0, [pc, #552]	@ (801273c <tcp_output+0x240>)
 8012514:	f7ee fddc 	bl	80010d0 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	7d1b      	ldrb	r3, [r3, #20]
 801251c:	2b01      	cmp	r3, #1
 801251e:	d106      	bne.n	801252e <tcp_output+0x32>
 8012520:	4b84      	ldr	r3, [pc, #528]	@ (8012734 <tcp_output+0x238>)
 8012522:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012526:	4986      	ldr	r1, [pc, #536]	@ (8012740 <tcp_output+0x244>)
 8012528:	4884      	ldr	r0, [pc, #528]	@ (801273c <tcp_output+0x240>)
 801252a:	f7ee fdd1 	bl	80010d0 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801252e:	4b85      	ldr	r3, [pc, #532]	@ (8012744 <tcp_output+0x248>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	429a      	cmp	r2, r3
 8012536:	d101      	bne.n	801253c <tcp_output+0x40>
    return ERR_OK;
 8012538:	2300      	movs	r3, #0
 801253a:	e1ce      	b.n	80128da <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012548:	4293      	cmp	r3, r2
 801254a:	bf28      	it	cs
 801254c:	4613      	movcs	r3, r2
 801254e:	b29b      	uxth	r3, r3
 8012550:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012556:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255a:	2b00      	cmp	r3, #0
 801255c:	d10b      	bne.n	8012576 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	8b5b      	ldrh	r3, [r3, #26]
 8012562:	f003 0302 	and.w	r3, r3, #2
 8012566:	2b00      	cmp	r3, #0
 8012568:	f000 81aa 	beq.w	80128c0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fdcb 	bl	8013108 <tcp_send_empty_ack>
 8012572:	4603      	mov	r3, r0
 8012574:	e1b1      	b.n	80128da <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012576:	6879      	ldr	r1, [r7, #4]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	3304      	adds	r3, #4
 801257c:	461a      	mov	r2, r3
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff f826 	bl	80115d0 <tcp_route>
 8012584:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d102      	bne.n	8012592 <tcp_output+0x96>
    return ERR_RTE;
 801258c:	f06f 0303 	mvn.w	r3, #3
 8012590:	e1a3      	b.n	80128da <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d003      	beq.n	80125a0 <tcp_output+0xa4>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d111      	bne.n	80125c4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d002      	beq.n	80125ac <tcp_output+0xb0>
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	3304      	adds	r3, #4
 80125aa:	e000      	b.n	80125ae <tcp_output+0xb2>
 80125ac:	2300      	movs	r3, #0
 80125ae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d102      	bne.n	80125bc <tcp_output+0xc0>
      return ERR_RTE;
 80125b6:	f06f 0303 	mvn.w	r3, #3
 80125ba:	e18e      	b.n	80128da <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80125c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7f9 f85d 	bl	800b68a <lwip_htonl>
 80125d0:	4602      	mov	r2, r0
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125d6:	1ad3      	subs	r3, r2, r3
 80125d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125da:	8912      	ldrh	r2, [r2, #8]
 80125dc:	4413      	add	r3, r2
 80125de:	69ba      	ldr	r2, [r7, #24]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d227      	bcs.n	8012634 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80125ea:	461a      	mov	r2, r3
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	4293      	cmp	r3, r2
 80125f0:	d114      	bne.n	801261c <tcp_output+0x120>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d110      	bne.n	801261c <tcp_output+0x120>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012600:	2b00      	cmp	r3, #0
 8012602:	d10b      	bne.n	801261c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2200      	movs	r2, #0
 8012608:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2201      	movs	r2, #1
 8012610:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	8b5b      	ldrh	r3, [r3, #26]
 8012620:	f003 0302 	and.w	r3, r3, #2
 8012624:	2b00      	cmp	r3, #0
 8012626:	f000 814d 	beq.w	80128c4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fd6c 	bl	8013108 <tcp_send_empty_ack>
 8012630:	4603      	mov	r3, r0
 8012632:	e152      	b.n	80128da <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012640:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	2b00      	cmp	r3, #0
 8012646:	f000 811c 	beq.w	8012882 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801264a:	e002      	b.n	8012652 <tcp_output+0x156>
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	623b      	str	r3, [r7, #32]
 8012652:	6a3b      	ldr	r3, [r7, #32]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d1f8      	bne.n	801264c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801265a:	e112      	b.n	8012882 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	899b      	ldrh	r3, [r3, #12]
 8012662:	b29b      	uxth	r3, r3
 8012664:	4618      	mov	r0, r3
 8012666:	f7f8 fffb 	bl	800b660 <lwip_htons>
 801266a:	4603      	mov	r3, r0
 801266c:	b2db      	uxtb	r3, r3
 801266e:	f003 0304 	and.w	r3, r3, #4
 8012672:	2b00      	cmp	r3, #0
 8012674:	d006      	beq.n	8012684 <tcp_output+0x188>
 8012676:	4b2f      	ldr	r3, [pc, #188]	@ (8012734 <tcp_output+0x238>)
 8012678:	f240 5236 	movw	r2, #1334	@ 0x536
 801267c:	4932      	ldr	r1, [pc, #200]	@ (8012748 <tcp_output+0x24c>)
 801267e:	482f      	ldr	r0, [pc, #188]	@ (801273c <tcp_output+0x240>)
 8012680:	f7ee fd26 	bl	80010d0 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012688:	2b00      	cmp	r3, #0
 801268a:	d01f      	beq.n	80126cc <tcp_output+0x1d0>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8b5b      	ldrh	r3, [r3, #26]
 8012690:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012694:	2b00      	cmp	r3, #0
 8012696:	d119      	bne.n	80126cc <tcp_output+0x1d0>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801269c:	2b00      	cmp	r3, #0
 801269e:	d00b      	beq.n	80126b8 <tcp_output+0x1bc>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d110      	bne.n	80126cc <tcp_output+0x1d0>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126ae:	891a      	ldrh	r2, [r3, #8]
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d209      	bcs.n	80126cc <tcp_output+0x1d0>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d004      	beq.n	80126cc <tcp_output+0x1d0>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126c8:	2b08      	cmp	r3, #8
 80126ca:	d901      	bls.n	80126d0 <tcp_output+0x1d4>
 80126cc:	2301      	movs	r3, #1
 80126ce:	e000      	b.n	80126d2 <tcp_output+0x1d6>
 80126d0:	2300      	movs	r3, #0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	8b5b      	ldrh	r3, [r3, #26]
 80126da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80126de:	2b00      	cmp	r3, #0
 80126e0:	f000 80e4 	beq.w	80128ac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	7d1b      	ldrb	r3, [r3, #20]
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d00d      	beq.n	8012708 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80126ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	899b      	ldrh	r3, [r3, #12]
 80126f2:	b29c      	uxth	r4, r3
 80126f4:	2010      	movs	r0, #16
 80126f6:	f7f8 ffb3 	bl	800b660 <lwip_htons>
 80126fa:	4603      	mov	r3, r0
 80126fc:	461a      	mov	r2, r3
 80126fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	4322      	orrs	r2, r4
 8012704:	b292      	uxth	r2, r2
 8012706:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801270e:	f000 f909 	bl	8012924 <tcp_output_segment>
 8012712:	4603      	mov	r3, r0
 8012714:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d016      	beq.n	801274c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	8b5b      	ldrh	r3, [r3, #26]
 8012722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012726:	b29a      	uxth	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	835a      	strh	r2, [r3, #26]
      return err;
 801272c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012730:	e0d3      	b.n	80128da <tcp_output+0x3de>
 8012732:	bf00      	nop
 8012734:	08019a30 	.word	0x08019a30
 8012738:	08019f74 	.word	0x08019f74
 801273c:	08019a84 	.word	0x08019a84
 8012740:	08019f8c 	.word	0x08019f8c
 8012744:	2000c5f0 	.word	0x2000c5f0
 8012748:	08019fb4 	.word	0x08019fb4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	7d1b      	ldrb	r3, [r3, #20]
 8012758:	2b02      	cmp	r3, #2
 801275a:	d006      	beq.n	801276a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	8b5b      	ldrh	r3, [r3, #26]
 8012760:	f023 0303 	bic.w	r3, r3, #3
 8012764:	b29a      	uxth	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4618      	mov	r0, r3
 8012772:	f7f8 ff8a 	bl	800b68a <lwip_htonl>
 8012776:	4604      	mov	r4, r0
 8012778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277a:	891b      	ldrh	r3, [r3, #8]
 801277c:	461d      	mov	r5, r3
 801277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	899b      	ldrh	r3, [r3, #12]
 8012784:	b29b      	uxth	r3, r3
 8012786:	4618      	mov	r0, r3
 8012788:	f7f8 ff6a 	bl	800b660 <lwip_htons>
 801278c:	4603      	mov	r3, r0
 801278e:	b2db      	uxtb	r3, r3
 8012790:	f003 0303 	and.w	r3, r3, #3
 8012794:	2b00      	cmp	r3, #0
 8012796:	d001      	beq.n	801279c <tcp_output+0x2a0>
 8012798:	2301      	movs	r3, #1
 801279a:	e000      	b.n	801279e <tcp_output+0x2a2>
 801279c:	2300      	movs	r3, #0
 801279e:	442b      	add	r3, r5
 80127a0:	4423      	add	r3, r4
 80127a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	da02      	bge.n	80127b6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	68ba      	ldr	r2, [r7, #8]
 80127b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80127b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b8:	891b      	ldrh	r3, [r3, #8]
 80127ba:	461c      	mov	r4, r3
 80127bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	899b      	ldrh	r3, [r3, #12]
 80127c2:	b29b      	uxth	r3, r3
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7f8 ff4b 	bl	800b660 <lwip_htons>
 80127ca:	4603      	mov	r3, r0
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	f003 0303 	and.w	r3, r3, #3
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d001      	beq.n	80127da <tcp_output+0x2de>
 80127d6:	2301      	movs	r3, #1
 80127d8:	e000      	b.n	80127dc <tcp_output+0x2e0>
 80127da:	2300      	movs	r3, #0
 80127dc:	4423      	add	r3, r4
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d049      	beq.n	8012876 <tcp_output+0x37a>
      seg->next = NULL;
 80127e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e4:	2200      	movs	r2, #0
 80127e6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d105      	bne.n	80127fc <tcp_output+0x300>
        pcb->unacked = seg;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127f4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80127f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f8:	623b      	str	r3, [r7, #32]
 80127fa:	e03f      	b.n	801287c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80127fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	4618      	mov	r0, r3
 8012804:	f7f8 ff41 	bl	800b68a <lwip_htonl>
 8012808:	4604      	mov	r4, r0
 801280a:	6a3b      	ldr	r3, [r7, #32]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	685b      	ldr	r3, [r3, #4]
 8012810:	4618      	mov	r0, r3
 8012812:	f7f8 ff3a 	bl	800b68a <lwip_htonl>
 8012816:	4603      	mov	r3, r0
 8012818:	1ae3      	subs	r3, r4, r3
 801281a:	2b00      	cmp	r3, #0
 801281c:	da24      	bge.n	8012868 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3370      	adds	r3, #112	@ 0x70
 8012822:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012824:	e002      	b.n	801282c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d011      	beq.n	8012858 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	4618      	mov	r0, r3
 801283e:	f7f8 ff24 	bl	800b68a <lwip_htonl>
 8012842:	4604      	mov	r4, r0
 8012844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	4618      	mov	r0, r3
 801284c:	f7f8 ff1d 	bl	800b68a <lwip_htonl>
 8012850:	4603      	mov	r3, r0
 8012852:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012854:	2b00      	cmp	r3, #0
 8012856:	dbe6      	blt.n	8012826 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	e009      	b.n	801287c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012868:	6a3b      	ldr	r3, [r7, #32]
 801286a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801286c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801286e:	6a3b      	ldr	r3, [r7, #32]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	623b      	str	r3, [r7, #32]
 8012874:	e002      	b.n	801287c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012878:	f7fb ff1f 	bl	800e6ba <tcp_seg_free>
    }
    seg = pcb->unsent;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012880:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012884:	2b00      	cmp	r3, #0
 8012886:	d012      	beq.n	80128ae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	4618      	mov	r0, r3
 8012890:	f7f8 fefb 	bl	800b68a <lwip_htonl>
 8012894:	4602      	mov	r2, r0
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801289e:	8912      	ldrh	r2, [r2, #8]
 80128a0:	4413      	add	r3, r2
  while (seg != NULL &&
 80128a2:	69ba      	ldr	r2, [r7, #24]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	f4bf aed9 	bcs.w	801265c <tcp_output+0x160>
 80128aa:	e000      	b.n	80128ae <tcp_output+0x3b2>
      break;
 80128ac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d108      	bne.n	80128c8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80128be:	e004      	b.n	80128ca <tcp_output+0x3ce>
    goto output_done;
 80128c0:	bf00      	nop
 80128c2:	e002      	b.n	80128ca <tcp_output+0x3ce>
    goto output_done;
 80128c4:	bf00      	nop
 80128c6:	e000      	b.n	80128ca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80128c8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	8b5b      	ldrh	r3, [r3, #26]
 80128ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3728      	adds	r7, #40	@ 0x28
 80128de:	46bd      	mov	sp, r7
 80128e0:	bdb0      	pop	{r4, r5, r7, pc}
 80128e2:	bf00      	nop

080128e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d106      	bne.n	8012900 <tcp_output_segment_busy+0x1c>
 80128f2:	4b09      	ldr	r3, [pc, #36]	@ (8012918 <tcp_output_segment_busy+0x34>)
 80128f4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80128f8:	4908      	ldr	r1, [pc, #32]	@ (801291c <tcp_output_segment_busy+0x38>)
 80128fa:	4809      	ldr	r0, [pc, #36]	@ (8012920 <tcp_output_segment_busy+0x3c>)
 80128fc:	f7ee fbe8 	bl	80010d0 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	7b9b      	ldrb	r3, [r3, #14]
 8012906:	2b01      	cmp	r3, #1
 8012908:	d001      	beq.n	801290e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801290a:	2301      	movs	r3, #1
 801290c:	e000      	b.n	8012910 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801290e:	2300      	movs	r3, #0
}
 8012910:	4618      	mov	r0, r3
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	08019a30 	.word	0x08019a30
 801291c:	08019fcc 	.word	0x08019fcc
 8012920:	08019a84 	.word	0x08019a84

08012924 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012924:	b5b0      	push	{r4, r5, r7, lr}
 8012926:	b08c      	sub	sp, #48	@ 0x30
 8012928:	af04      	add	r7, sp, #16
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <tcp_output_segment+0x20>
 8012936:	4b64      	ldr	r3, [pc, #400]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 8012938:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801293c:	4963      	ldr	r1, [pc, #396]	@ (8012acc <tcp_output_segment+0x1a8>)
 801293e:	4864      	ldr	r0, [pc, #400]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012940:	f7ee fbc6 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d106      	bne.n	8012958 <tcp_output_segment+0x34>
 801294a:	4b5f      	ldr	r3, [pc, #380]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 801294c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012950:	4960      	ldr	r1, [pc, #384]	@ (8012ad4 <tcp_output_segment+0x1b0>)
 8012952:	485f      	ldr	r0, [pc, #380]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012954:	f7ee fbbc 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_output_segment+0x48>
 801295e:	4b5a      	ldr	r3, [pc, #360]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 8012960:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012964:	495c      	ldr	r1, [pc, #368]	@ (8012ad8 <tcp_output_segment+0x1b4>)
 8012966:	485a      	ldr	r0, [pc, #360]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012968:	f7ee fbb2 	bl	80010d0 <printf>

  if (tcp_output_segment_busy(seg)) {
 801296c:	68f8      	ldr	r0, [r7, #12]
 801296e:	f7ff ffb9 	bl	80128e4 <tcp_output_segment_busy>
 8012972:	4603      	mov	r3, r0
 8012974:	2b00      	cmp	r3, #0
 8012976:	d001      	beq.n	801297c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012978:	2300      	movs	r3, #0
 801297a:	e0a1      	b.n	8012ac0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	68dc      	ldr	r4, [r3, #12]
 8012984:	4610      	mov	r0, r2
 8012986:	f7f8 fe80 	bl	800b68a <lwip_htonl>
 801298a:	4603      	mov	r3, r0
 801298c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	68dc      	ldr	r4, [r3, #12]
 8012996:	4610      	mov	r0, r2
 8012998:	f7f8 fe62 	bl	800b660 <lwip_htons>
 801299c:	4603      	mov	r3, r0
 801299e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129a4:	68ba      	ldr	r2, [r7, #8]
 80129a6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80129a8:	441a      	add	r2, r3
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	3314      	adds	r3, #20
 80129b4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	7a9b      	ldrb	r3, [r3, #10]
 80129ba:	f003 0301 	and.w	r3, r3, #1
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d015      	beq.n	80129ee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	3304      	adds	r3, #4
 80129c6:	461a      	mov	r2, r3
 80129c8:	6879      	ldr	r1, [r7, #4]
 80129ca:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80129ce:	f7fc fa39 	bl	800ee44 <tcp_eff_send_mss_netif>
 80129d2:	4603      	mov	r3, r0
 80129d4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80129d6:	8b7b      	ldrh	r3, [r7, #26]
 80129d8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80129dc:	4618      	mov	r0, r3
 80129de:	f7f8 fe54 	bl	800b68a <lwip_htonl>
 80129e2:	4602      	mov	r2, r0
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80129e8:	69fb      	ldr	r3, [r7, #28]
 80129ea:	3304      	adds	r3, #4
 80129ec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	da02      	bge.n	80129fe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	2200      	movs	r2, #0
 80129fc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d10c      	bne.n	8012a20 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012a06:	4b35      	ldr	r3, [pc, #212]	@ (8012adc <tcp_output_segment+0x1b8>)
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f8 fe38 	bl	800b68a <lwip_htonl>
 8012a1a:	4602      	mov	r2, r0
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	68da      	ldr	r2, [r3, #12]
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	1ad3      	subs	r3, r2, r3
 8012a2c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	8959      	ldrh	r1, [r3, #10]
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	8b3a      	ldrh	r2, [r7, #24]
 8012a3a:	1a8a      	subs	r2, r1, r2
 8012a3c:	b292      	uxth	r2, r2
 8012a3e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	8919      	ldrh	r1, [r3, #8]
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	8b3a      	ldrh	r2, [r7, #24]
 8012a4c:	1a8a      	subs	r2, r1, r2
 8012a4e:	b292      	uxth	r2, r2
 8012a50:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	68d2      	ldr	r2, [r2, #12]
 8012a5a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	2200      	movs	r2, #0
 8012a62:	741a      	strb	r2, [r3, #16]
 8012a64:	2200      	movs	r2, #0
 8012a66:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	68da      	ldr	r2, [r3, #12]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	7a9b      	ldrb	r3, [r3, #10]
 8012a70:	f003 0301 	and.w	r3, r3, #1
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d001      	beq.n	8012a7c <tcp_output_segment+0x158>
 8012a78:	2318      	movs	r3, #24
 8012a7a:	e000      	b.n	8012a7e <tcp_output_segment+0x15a>
 8012a7c:	2314      	movs	r3, #20
 8012a7e:	4413      	add	r3, r2
 8012a80:	69fa      	ldr	r2, [r7, #28]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d006      	beq.n	8012a94 <tcp_output_segment+0x170>
 8012a86:	4b10      	ldr	r3, [pc, #64]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 8012a88:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012a8c:	4914      	ldr	r1, [pc, #80]	@ (8012ae0 <tcp_output_segment+0x1bc>)
 8012a8e:	4810      	ldr	r0, [pc, #64]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012a90:	f7ee fb1e 	bl	80010d0 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	6858      	ldr	r0, [r3, #4]
 8012a98:	68b9      	ldr	r1, [r7, #8]
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	1d1c      	adds	r4, r3, #4
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	7add      	ldrb	r5, [r3, #11]
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	7a9b      	ldrb	r3, [r3, #10]
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	9202      	str	r2, [sp, #8]
 8012aaa:	2206      	movs	r2, #6
 8012aac:	9201      	str	r2, [sp, #4]
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	462b      	mov	r3, r5
 8012ab2:	4622      	mov	r2, r4
 8012ab4:	f002 fc18 	bl	80152e8 <ip4_output_if>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3720      	adds	r7, #32
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ac8:	08019a30 	.word	0x08019a30
 8012acc:	08019ff4 	.word	0x08019ff4
 8012ad0:	08019a84 	.word	0x08019a84
 8012ad4:	0801a014 	.word	0x0801a014
 8012ad8:	0801a034 	.word	0x0801a034
 8012adc:	2000c5a4 	.word	0x2000c5a4
 8012ae0:	0801a058 	.word	0x0801a058

08012ae4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012ae4:	b5b0      	push	{r4, r5, r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <tcp_rexmit_rto_prepare+0x1c>
 8012af2:	4b31      	ldr	r3, [pc, #196]	@ (8012bb8 <tcp_rexmit_rto_prepare+0xd4>)
 8012af4:	f240 6263 	movw	r2, #1635	@ 0x663
 8012af8:	4930      	ldr	r1, [pc, #192]	@ (8012bbc <tcp_rexmit_rto_prepare+0xd8>)
 8012afa:	4831      	ldr	r0, [pc, #196]	@ (8012bc0 <tcp_rexmit_rto_prepare+0xdc>)
 8012afc:	f7ee fae8 	bl	80010d0 <printf>

  if (pcb->unacked == NULL) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d102      	bne.n	8012b0e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012b08:	f06f 0305 	mvn.w	r3, #5
 8012b0c:	e050      	b.n	8012bb0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b12:	60fb      	str	r3, [r7, #12]
 8012b14:	e00b      	b.n	8012b2e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012b16:	68f8      	ldr	r0, [r7, #12]
 8012b18:	f7ff fee4 	bl	80128e4 <tcp_output_segment_busy>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d002      	beq.n	8012b28 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012b22:	f06f 0305 	mvn.w	r3, #5
 8012b26:	e043      	b.n	8012bb0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	60fb      	str	r3, [r7, #12]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d1ef      	bne.n	8012b16 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012b36:	68f8      	ldr	r0, [r7, #12]
 8012b38:	f7ff fed4 	bl	80128e4 <tcp_output_segment_busy>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d002      	beq.n	8012b48 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012b42:	f06f 0305 	mvn.w	r3, #5
 8012b46:	e033      	b.n	8012bb0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	8b5b      	ldrh	r3, [r3, #26]
 8012b62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7f8 fd89 	bl	800b68a <lwip_htonl>
 8012b78:	4604      	mov	r4, r0
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	891b      	ldrh	r3, [r3, #8]
 8012b7e:	461d      	mov	r5, r3
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f8 fd69 	bl	800b660 <lwip_htons>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	f003 0303 	and.w	r3, r3, #3
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <tcp_rexmit_rto_prepare+0xba>
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	e000      	b.n	8012ba0 <tcp_rexmit_rto_prepare+0xbc>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	442b      	add	r3, r5
 8012ba2:	18e2      	adds	r2, r4, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8012bb8:	08019a30 	.word	0x08019a30
 8012bbc:	0801a06c 	.word	0x0801a06c
 8012bc0:	08019a84 	.word	0x08019a84

08012bc4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d106      	bne.n	8012be0 <tcp_rexmit_rto_commit+0x1c>
 8012bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8012c08 <tcp_rexmit_rto_commit+0x44>)
 8012bd4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012bd8:	490c      	ldr	r1, [pc, #48]	@ (8012c0c <tcp_rexmit_rto_commit+0x48>)
 8012bda:	480d      	ldr	r0, [pc, #52]	@ (8012c10 <tcp_rexmit_rto_commit+0x4c>)
 8012bdc:	f7ee fa78 	bl	80010d0 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012be6:	2bff      	cmp	r3, #255	@ 0xff
 8012be8:	d007      	beq.n	8012bfa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	b2da      	uxtb	r2, r3
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff fc7e 	bl	80124fc <tcp_output>
}
 8012c00:	bf00      	nop
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	08019a30 	.word	0x08019a30
 8012c0c:	0801a090 	.word	0x0801a090
 8012c10:	08019a84 	.word	0x08019a84

08012c14 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d106      	bne.n	8012c30 <tcp_rexmit_rto+0x1c>
 8012c22:	4b0a      	ldr	r3, [pc, #40]	@ (8012c4c <tcp_rexmit_rto+0x38>)
 8012c24:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012c28:	4909      	ldr	r1, [pc, #36]	@ (8012c50 <tcp_rexmit_rto+0x3c>)
 8012c2a:	480a      	ldr	r0, [pc, #40]	@ (8012c54 <tcp_rexmit_rto+0x40>)
 8012c2c:	f7ee fa50 	bl	80010d0 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff ff57 	bl	8012ae4 <tcp_rexmit_rto_prepare>
 8012c36:	4603      	mov	r3, r0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d102      	bne.n	8012c42 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff ffc1 	bl	8012bc4 <tcp_rexmit_rto_commit>
  }
}
 8012c42:	bf00      	nop
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	08019a30 	.word	0x08019a30
 8012c50:	0801a0b4 	.word	0x0801a0b4
 8012c54:	08019a84 	.word	0x08019a84

08012c58 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012c58:	b590      	push	{r4, r7, lr}
 8012c5a:	b085      	sub	sp, #20
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d106      	bne.n	8012c74 <tcp_rexmit+0x1c>
 8012c66:	4b2f      	ldr	r3, [pc, #188]	@ (8012d24 <tcp_rexmit+0xcc>)
 8012c68:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012c6c:	492e      	ldr	r1, [pc, #184]	@ (8012d28 <tcp_rexmit+0xd0>)
 8012c6e:	482f      	ldr	r0, [pc, #188]	@ (8012d2c <tcp_rexmit+0xd4>)
 8012c70:	f7ee fa2e 	bl	80010d0 <printf>

  if (pcb->unacked == NULL) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d102      	bne.n	8012c82 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012c7c:	f06f 0305 	mvn.w	r3, #5
 8012c80:	e04c      	b.n	8012d1c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c86:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012c88:	68b8      	ldr	r0, [r7, #8]
 8012c8a:	f7ff fe2b 	bl	80128e4 <tcp_output_segment_busy>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012c94:	f06f 0305 	mvn.w	r3, #5
 8012c98:	e040      	b.n	8012d1c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	336c      	adds	r3, #108	@ 0x6c
 8012ca6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ca8:	e002      	b.n	8012cb0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d011      	beq.n	8012cdc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	68db      	ldr	r3, [r3, #12]
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7f8 fce2 	bl	800b68a <lwip_htonl>
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	68db      	ldr	r3, [r3, #12]
 8012ccc:	685b      	ldr	r3, [r3, #4]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7f8 fcdb 	bl	800b68a <lwip_htonl>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	dbe6      	blt.n	8012caa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	68ba      	ldr	r2, [r7, #8]
 8012ce8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d103      	bne.n	8012cfa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d00:	2bff      	cmp	r3, #255	@ 0xff
 8012d02:	d007      	beq.n	8012d14 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	b2da      	uxtb	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2200      	movs	r2, #0
 8012d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012d1a:	2300      	movs	r3, #0
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3714      	adds	r7, #20
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd90      	pop	{r4, r7, pc}
 8012d24:	08019a30 	.word	0x08019a30
 8012d28:	0801a0d0 	.word	0x0801a0d0
 8012d2c:	08019a84 	.word	0x08019a84

08012d30 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d106      	bne.n	8012d4c <tcp_rexmit_fast+0x1c>
 8012d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8012de8 <tcp_rexmit_fast+0xb8>)
 8012d40:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012d44:	4929      	ldr	r1, [pc, #164]	@ (8012dec <tcp_rexmit_fast+0xbc>)
 8012d46:	482a      	ldr	r0, [pc, #168]	@ (8012df0 <tcp_rexmit_fast+0xc0>)
 8012d48:	f7ee f9c2 	bl	80010d0 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d045      	beq.n	8012de0 <tcp_rexmit_fast+0xb0>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	8b5b      	ldrh	r3, [r3, #26]
 8012d58:	f003 0304 	and.w	r3, r3, #4
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d13f      	bne.n	8012de0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7ff ff79 	bl	8012c58 <tcp_rexmit>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d139      	bne.n	8012de0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012d78:	4293      	cmp	r3, r2
 8012d7a:	bf28      	it	cs
 8012d7c:	4613      	movcs	r3, r2
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	da00      	bge.n	8012d86 <tcp_rexmit_fast+0x56>
 8012d84:	3301      	adds	r3, #1
 8012d86:	105b      	asrs	r3, r3, #1
 8012d88:	b29a      	uxth	r2, r3
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012d96:	461a      	mov	r2, r3
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d9c:	005b      	lsls	r3, r3, #1
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d206      	bcs.n	8012db0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012da6:	005b      	lsls	r3, r3, #1
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012dba:	4619      	mov	r1, r3
 8012dbc:	0049      	lsls	r1, r1, #1
 8012dbe:	440b      	add	r3, r1
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	4413      	add	r3, r2
 8012dc4:	b29a      	uxth	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	8b5b      	ldrh	r3, [r3, #26]
 8012dd0:	f043 0304 	orr.w	r3, r3, #4
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012de0:	bf00      	nop
 8012de2:	3708      	adds	r7, #8
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	08019a30 	.word	0x08019a30
 8012dec:	0801a0e8 	.word	0x0801a0e8
 8012df0:	08019a84 	.word	0x08019a84

08012df4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b086      	sub	sp, #24
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	607b      	str	r3, [r7, #4]
 8012dfe:	460b      	mov	r3, r1
 8012e00:	817b      	strh	r3, [r7, #10]
 8012e02:	4613      	mov	r3, r2
 8012e04:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012e06:	897a      	ldrh	r2, [r7, #10]
 8012e08:	893b      	ldrh	r3, [r7, #8]
 8012e0a:	4413      	add	r3, r2
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	3314      	adds	r3, #20
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012e16:	4619      	mov	r1, r3
 8012e18:	2022      	movs	r0, #34	@ 0x22
 8012e1a:	f7f9 fd2f 	bl	800c87c <pbuf_alloc>
 8012e1e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d04d      	beq.n	8012ec2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012e26:	897b      	ldrh	r3, [r7, #10]
 8012e28:	3313      	adds	r3, #19
 8012e2a:	697a      	ldr	r2, [r7, #20]
 8012e2c:	8952      	ldrh	r2, [r2, #10]
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	db06      	blt.n	8012e40 <tcp_output_alloc_header_common+0x4c>
 8012e32:	4b26      	ldr	r3, [pc, #152]	@ (8012ecc <tcp_output_alloc_header_common+0xd8>)
 8012e34:	f240 7223 	movw	r2, #1827	@ 0x723
 8012e38:	4925      	ldr	r1, [pc, #148]	@ (8012ed0 <tcp_output_alloc_header_common+0xdc>)
 8012e3a:	4826      	ldr	r0, [pc, #152]	@ (8012ed4 <tcp_output_alloc_header_common+0xe0>)
 8012e3c:	f7ee f948 	bl	80010d0 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012e46:	8c3b      	ldrh	r3, [r7, #32]
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7f8 fc09 	bl	800b660 <lwip_htons>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	461a      	mov	r2, r3
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012e56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7f8 fc01 	bl	800b660 <lwip_htons>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	461a      	mov	r2, r3
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012e6c:	68f8      	ldr	r0, [r7, #12]
 8012e6e:	f7f8 fc0c 	bl	800b68a <lwip_htonl>
 8012e72:	4602      	mov	r2, r0
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012e78:	897b      	ldrh	r3, [r7, #10]
 8012e7a:	089b      	lsrs	r3, r3, #2
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	3305      	adds	r3, #5
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	031b      	lsls	r3, r3, #12
 8012e84:	b29a      	uxth	r2, r3
 8012e86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7f8 fbe5 	bl	800b660 <lwip_htons>
 8012e96:	4603      	mov	r3, r0
 8012e98:	461a      	mov	r2, r3
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012e9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7f8 fbdd 	bl	800b660 <lwip_htons>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	741a      	strb	r2, [r3, #16]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	749a      	strb	r2, [r3, #18]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012ec2:	697b      	ldr	r3, [r7, #20]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3718      	adds	r7, #24
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	08019a30 	.word	0x08019a30
 8012ed0:	0801a108 	.word	0x0801a108
 8012ed4:	08019a84 	.word	0x08019a84

08012ed8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012ed8:	b5b0      	push	{r4, r5, r7, lr}
 8012eda:	b08a      	sub	sp, #40	@ 0x28
 8012edc:	af04      	add	r7, sp, #16
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	607b      	str	r3, [r7, #4]
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	817b      	strh	r3, [r7, #10]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d106      	bne.n	8012efe <tcp_output_alloc_header+0x26>
 8012ef0:	4b15      	ldr	r3, [pc, #84]	@ (8012f48 <tcp_output_alloc_header+0x70>)
 8012ef2:	f240 7242 	movw	r2, #1858	@ 0x742
 8012ef6:	4915      	ldr	r1, [pc, #84]	@ (8012f4c <tcp_output_alloc_header+0x74>)
 8012ef8:	4815      	ldr	r0, [pc, #84]	@ (8012f50 <tcp_output_alloc_header+0x78>)
 8012efa:	f7ee f8e9 	bl	80010d0 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	8adb      	ldrh	r3, [r3, #22]
 8012f06:	68fa      	ldr	r2, [r7, #12]
 8012f08:	8b12      	ldrh	r2, [r2, #24]
 8012f0a:	68f9      	ldr	r1, [r7, #12]
 8012f0c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012f0e:	893d      	ldrh	r5, [r7, #8]
 8012f10:	897c      	ldrh	r4, [r7, #10]
 8012f12:	9103      	str	r1, [sp, #12]
 8012f14:	2110      	movs	r1, #16
 8012f16:	9102      	str	r1, [sp, #8]
 8012f18:	9201      	str	r2, [sp, #4]
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	462a      	mov	r2, r5
 8012f20:	4621      	mov	r1, r4
 8012f22:	f7ff ff67 	bl	8012df4 <tcp_output_alloc_header_common>
 8012f26:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d006      	beq.n	8012f3c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012f36:	441a      	add	r2, r3
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012f3c:	697b      	ldr	r3, [r7, #20]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3718      	adds	r7, #24
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bdb0      	pop	{r4, r5, r7, pc}
 8012f46:	bf00      	nop
 8012f48:	08019a30 	.word	0x08019a30
 8012f4c:	0801a138 	.word	0x0801a138
 8012f50:	08019a84 	.word	0x08019a84

08012f54 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b088      	sub	sp, #32
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	4611      	mov	r1, r2
 8012f60:	461a      	mov	r2, r3
 8012f62:	460b      	mov	r3, r1
 8012f64:	71fb      	strb	r3, [r7, #7]
 8012f66:	4613      	mov	r3, r2
 8012f68:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d106      	bne.n	8012f82 <tcp_output_fill_options+0x2e>
 8012f74:	4b12      	ldr	r3, [pc, #72]	@ (8012fc0 <tcp_output_fill_options+0x6c>)
 8012f76:	f240 7256 	movw	r2, #1878	@ 0x756
 8012f7a:	4912      	ldr	r1, [pc, #72]	@ (8012fc4 <tcp_output_fill_options+0x70>)
 8012f7c:	4812      	ldr	r0, [pc, #72]	@ (8012fc8 <tcp_output_fill_options+0x74>)
 8012f7e:	f7ee f8a7 	bl	80010d0 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	3314      	adds	r3, #20
 8012f8c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012f8e:	8bfb      	ldrh	r3, [r7, #30]
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	461a      	mov	r2, r3
 8012f94:	79fb      	ldrb	r3, [r7, #7]
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	f003 0304 	and.w	r3, r3, #4
 8012f9c:	4413      	add	r3, r2
 8012f9e:	3314      	adds	r3, #20
 8012fa0:	69ba      	ldr	r2, [r7, #24]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	697a      	ldr	r2, [r7, #20]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d006      	beq.n	8012fb8 <tcp_output_fill_options+0x64>
 8012faa:	4b05      	ldr	r3, [pc, #20]	@ (8012fc0 <tcp_output_fill_options+0x6c>)
 8012fac:	f240 7275 	movw	r2, #1909	@ 0x775
 8012fb0:	4906      	ldr	r1, [pc, #24]	@ (8012fcc <tcp_output_fill_options+0x78>)
 8012fb2:	4805      	ldr	r0, [pc, #20]	@ (8012fc8 <tcp_output_fill_options+0x74>)
 8012fb4:	f7ee f88c 	bl	80010d0 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012fb8:	bf00      	nop
 8012fba:	3720      	adds	r7, #32
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	08019a30 	.word	0x08019a30
 8012fc4:	0801a160 	.word	0x0801a160
 8012fc8:	08019a84 	.word	0x08019a84
 8012fcc:	0801a058 	.word	0x0801a058

08012fd0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b08a      	sub	sp, #40	@ 0x28
 8012fd4:	af04      	add	r7, sp, #16
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	607a      	str	r2, [r7, #4]
 8012fdc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d106      	bne.n	8012ff2 <tcp_output_control_segment+0x22>
 8012fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8013058 <tcp_output_control_segment+0x88>)
 8012fe6:	f240 7287 	movw	r2, #1927	@ 0x787
 8012fea:	491c      	ldr	r1, [pc, #112]	@ (801305c <tcp_output_control_segment+0x8c>)
 8012fec:	481c      	ldr	r0, [pc, #112]	@ (8013060 <tcp_output_control_segment+0x90>)
 8012fee:	f7ee f86f 	bl	80010d0 <printf>

  netif = tcp_route(pcb, src, dst);
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	6879      	ldr	r1, [r7, #4]
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f7fe faea 	bl	80115d0 <tcp_route>
 8012ffc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d102      	bne.n	801300a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013004:	23fc      	movs	r3, #252	@ 0xfc
 8013006:	75fb      	strb	r3, [r7, #23]
 8013008:	e01c      	b.n	8013044 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d006      	beq.n	801301e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	7adb      	ldrb	r3, [r3, #11]
 8013014:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	7a9b      	ldrb	r3, [r3, #10]
 801301a:	757b      	strb	r3, [r7, #21]
 801301c:	e003      	b.n	8013026 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801301e:	23ff      	movs	r3, #255	@ 0xff
 8013020:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013026:	7dba      	ldrb	r2, [r7, #22]
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	9302      	str	r3, [sp, #8]
 801302c:	2306      	movs	r3, #6
 801302e:	9301      	str	r3, [sp, #4]
 8013030:	7d7b      	ldrb	r3, [r7, #21]
 8013032:	9300      	str	r3, [sp, #0]
 8013034:	4613      	mov	r3, r2
 8013036:	683a      	ldr	r2, [r7, #0]
 8013038:	6879      	ldr	r1, [r7, #4]
 801303a:	68b8      	ldr	r0, [r7, #8]
 801303c:	f002 f954 	bl	80152e8 <ip4_output_if>
 8013040:	4603      	mov	r3, r0
 8013042:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013044:	68b8      	ldr	r0, [r7, #8]
 8013046:	f7f9 fefd 	bl	800ce44 <pbuf_free>
  return err;
 801304a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3718      	adds	r7, #24
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	08019a30 	.word	0x08019a30
 801305c:	0801a188 	.word	0x0801a188
 8013060:	08019a84 	.word	0x08019a84

08013064 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013064:	b590      	push	{r4, r7, lr}
 8013066:	b08b      	sub	sp, #44	@ 0x2c
 8013068:	af04      	add	r7, sp, #16
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	607a      	str	r2, [r7, #4]
 8013070:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d106      	bne.n	8013086 <tcp_rst+0x22>
 8013078:	4b1f      	ldr	r3, [pc, #124]	@ (80130f8 <tcp_rst+0x94>)
 801307a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801307e:	491f      	ldr	r1, [pc, #124]	@ (80130fc <tcp_rst+0x98>)
 8013080:	481f      	ldr	r0, [pc, #124]	@ (8013100 <tcp_rst+0x9c>)
 8013082:	f7ee f825 	bl	80010d0 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013088:	2b00      	cmp	r3, #0
 801308a:	d106      	bne.n	801309a <tcp_rst+0x36>
 801308c:	4b1a      	ldr	r3, [pc, #104]	@ (80130f8 <tcp_rst+0x94>)
 801308e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013092:	491c      	ldr	r1, [pc, #112]	@ (8013104 <tcp_rst+0xa0>)
 8013094:	481a      	ldr	r0, [pc, #104]	@ (8013100 <tcp_rst+0x9c>)
 8013096:	f7ee f81b 	bl	80010d0 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801309a:	2300      	movs	r3, #0
 801309c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801309e:	f246 0308 	movw	r3, #24584	@ 0x6008
 80130a2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80130a4:	7dfb      	ldrb	r3, [r7, #23]
 80130a6:	b29c      	uxth	r4, r3
 80130a8:	68b8      	ldr	r0, [r7, #8]
 80130aa:	f7f8 faee 	bl	800b68a <lwip_htonl>
 80130ae:	4602      	mov	r2, r0
 80130b0:	8abb      	ldrh	r3, [r7, #20]
 80130b2:	9303      	str	r3, [sp, #12]
 80130b4:	2314      	movs	r3, #20
 80130b6:	9302      	str	r3, [sp, #8]
 80130b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	4613      	mov	r3, r2
 80130c2:	2200      	movs	r2, #0
 80130c4:	4621      	mov	r1, r4
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f7ff fe94 	bl	8012df4 <tcp_output_alloc_header_common>
 80130cc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00c      	beq.n	80130ee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80130d4:	7dfb      	ldrb	r3, [r7, #23]
 80130d6:	2200      	movs	r2, #0
 80130d8:	6939      	ldr	r1, [r7, #16]
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f7ff ff3a 	bl	8012f54 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80130e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	6939      	ldr	r1, [r7, #16]
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f7ff ff72 	bl	8012fd0 <tcp_output_control_segment>
 80130ec:	e000      	b.n	80130f0 <tcp_rst+0x8c>
    return;
 80130ee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80130f0:	371c      	adds	r7, #28
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd90      	pop	{r4, r7, pc}
 80130f6:	bf00      	nop
 80130f8:	08019a30 	.word	0x08019a30
 80130fc:	0801a1b4 	.word	0x0801a1b4
 8013100:	08019a84 	.word	0x08019a84
 8013104:	0801a1d0 	.word	0x0801a1d0

08013108 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013108:	b590      	push	{r4, r7, lr}
 801310a:	b087      	sub	sp, #28
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013110:	2300      	movs	r3, #0
 8013112:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013114:	2300      	movs	r3, #0
 8013116:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d106      	bne.n	801312c <tcp_send_empty_ack+0x24>
 801311e:	4b28      	ldr	r3, [pc, #160]	@ (80131c0 <tcp_send_empty_ack+0xb8>)
 8013120:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013124:	4927      	ldr	r1, [pc, #156]	@ (80131c4 <tcp_send_empty_ack+0xbc>)
 8013126:	4828      	ldr	r0, [pc, #160]	@ (80131c8 <tcp_send_empty_ack+0xc0>)
 8013128:	f7ed ffd2 	bl	80010d0 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801312c:	7dfb      	ldrb	r3, [r7, #23]
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	b2db      	uxtb	r3, r3
 8013132:	f003 0304 	and.w	r3, r3, #4
 8013136:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013138:	7d7b      	ldrb	r3, [r7, #21]
 801313a:	b29c      	uxth	r4, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013140:	4618      	mov	r0, r3
 8013142:	f7f8 faa2 	bl	800b68a <lwip_htonl>
 8013146:	4603      	mov	r3, r0
 8013148:	2200      	movs	r2, #0
 801314a:	4621      	mov	r1, r4
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7ff fec3 	bl	8012ed8 <tcp_output_alloc_header>
 8013152:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d109      	bne.n	801316e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	8b5b      	ldrh	r3, [r3, #26]
 801315e:	f043 0303 	orr.w	r3, r3, #3
 8013162:	b29a      	uxth	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013168:	f06f 0301 	mvn.w	r3, #1
 801316c:	e023      	b.n	80131b6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801316e:	7dbb      	ldrb	r3, [r7, #22]
 8013170:	7dfa      	ldrb	r2, [r7, #23]
 8013172:	6939      	ldr	r1, [r7, #16]
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7ff feed 	bl	8012f54 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	3304      	adds	r3, #4
 8013180:	6939      	ldr	r1, [r7, #16]
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff ff24 	bl	8012fd0 <tcp_output_control_segment>
 8013188:	4603      	mov	r3, r0
 801318a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801318c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d007      	beq.n	80131a4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	8b5b      	ldrh	r3, [r3, #26]
 8013198:	f043 0303 	orr.w	r3, r3, #3
 801319c:	b29a      	uxth	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	835a      	strh	r2, [r3, #26]
 80131a2:	e006      	b.n	80131b2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	8b5b      	ldrh	r3, [r3, #26]
 80131a8:	f023 0303 	bic.w	r3, r3, #3
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80131b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	371c      	adds	r7, #28
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd90      	pop	{r4, r7, pc}
 80131be:	bf00      	nop
 80131c0:	08019a30 	.word	0x08019a30
 80131c4:	0801a1ec 	.word	0x0801a1ec
 80131c8:	08019a84 	.word	0x08019a84

080131cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80131cc:	b590      	push	{r4, r7, lr}
 80131ce:	b087      	sub	sp, #28
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80131d4:	2300      	movs	r3, #0
 80131d6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <tcp_keepalive+0x20>
 80131de:	4b18      	ldr	r3, [pc, #96]	@ (8013240 <tcp_keepalive+0x74>)
 80131e0:	f640 0224 	movw	r2, #2084	@ 0x824
 80131e4:	4917      	ldr	r1, [pc, #92]	@ (8013244 <tcp_keepalive+0x78>)
 80131e6:	4818      	ldr	r0, [pc, #96]	@ (8013248 <tcp_keepalive+0x7c>)
 80131e8:	f7ed ff72 	bl	80010d0 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80131ec:	7dfb      	ldrb	r3, [r7, #23]
 80131ee:	b29c      	uxth	r4, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131f4:	3b01      	subs	r3, #1
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7f8 fa47 	bl	800b68a <lwip_htonl>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2200      	movs	r2, #0
 8013200:	4621      	mov	r1, r4
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f7ff fe68 	bl	8012ed8 <tcp_output_alloc_header>
 8013208:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d102      	bne.n	8013216 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295
 8013214:	e010      	b.n	8013238 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013216:	7dfb      	ldrb	r3, [r7, #23]
 8013218:	2200      	movs	r2, #0
 801321a:	6939      	ldr	r1, [r7, #16]
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7ff fe99 	bl	8012f54 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	3304      	adds	r3, #4
 8013228:	6939      	ldr	r1, [r7, #16]
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f7ff fed0 	bl	8012fd0 <tcp_output_control_segment>
 8013230:	4603      	mov	r3, r0
 8013232:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013238:	4618      	mov	r0, r3
 801323a:	371c      	adds	r7, #28
 801323c:	46bd      	mov	sp, r7
 801323e:	bd90      	pop	{r4, r7, pc}
 8013240:	08019a30 	.word	0x08019a30
 8013244:	0801a20c 	.word	0x0801a20c
 8013248:	08019a84 	.word	0x08019a84

0801324c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801324c:	b590      	push	{r4, r7, lr}
 801324e:	b08b      	sub	sp, #44	@ 0x2c
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013254:	2300      	movs	r3, #0
 8013256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d106      	bne.n	801326e <tcp_zero_window_probe+0x22>
 8013260:	4b4c      	ldr	r3, [pc, #304]	@ (8013394 <tcp_zero_window_probe+0x148>)
 8013262:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013266:	494c      	ldr	r1, [pc, #304]	@ (8013398 <tcp_zero_window_probe+0x14c>)
 8013268:	484c      	ldr	r0, [pc, #304]	@ (801339c <tcp_zero_window_probe+0x150>)
 801326a:	f7ed ff31 	bl	80010d0 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013272:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013274:	6a3b      	ldr	r3, [r7, #32]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d101      	bne.n	801327e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801327a:	2300      	movs	r3, #0
 801327c:	e086      	b.n	801338c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013284:	2bff      	cmp	r3, #255	@ 0xff
 8013286:	d007      	beq.n	8013298 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801328e:	3301      	adds	r3, #1
 8013290:	b2da      	uxtb	r2, r3
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013298:	6a3b      	ldr	r3, [r7, #32]
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	899b      	ldrh	r3, [r3, #12]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f8 f9dd 	bl	800b660 <lwip_htons>
 80132a6:	4603      	mov	r3, r0
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d005      	beq.n	80132be <tcp_zero_window_probe+0x72>
 80132b2:	6a3b      	ldr	r3, [r7, #32]
 80132b4:	891b      	ldrh	r3, [r3, #8]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <tcp_zero_window_probe+0x72>
 80132ba:	2301      	movs	r3, #1
 80132bc:	e000      	b.n	80132c0 <tcp_zero_window_probe+0x74>
 80132be:	2300      	movs	r3, #0
 80132c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80132c2:	7ffb      	ldrb	r3, [r7, #31]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	bf0c      	ite	eq
 80132c8:	2301      	moveq	r3, #1
 80132ca:	2300      	movne	r3, #0
 80132cc:	b2db      	uxtb	r3, r3
 80132ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80132d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132d4:	b299      	uxth	r1, r3
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	8bba      	ldrh	r2, [r7, #28]
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7ff fdfa 	bl	8012ed8 <tcp_output_alloc_header>
 80132e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d102      	bne.n	80132f2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80132ec:	f04f 33ff 	mov.w	r3, #4294967295
 80132f0:	e04c      	b.n	801338c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80132f8:	7ffb      	ldrb	r3, [r7, #31]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d011      	beq.n	8013322 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	899b      	ldrh	r3, [r3, #12]
 8013302:	b29b      	uxth	r3, r3
 8013304:	b21b      	sxth	r3, r3
 8013306:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801330a:	b21c      	sxth	r4, r3
 801330c:	2011      	movs	r0, #17
 801330e:	f7f8 f9a7 	bl	800b660 <lwip_htons>
 8013312:	4603      	mov	r3, r0
 8013314:	b21b      	sxth	r3, r3
 8013316:	4323      	orrs	r3, r4
 8013318:	b21b      	sxth	r3, r3
 801331a:	b29a      	uxth	r2, r3
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	819a      	strh	r2, [r3, #12]
 8013320:	e010      	b.n	8013344 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	3314      	adds	r3, #20
 8013328:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801332a:	6a3b      	ldr	r3, [r7, #32]
 801332c:	6858      	ldr	r0, [r3, #4]
 801332e:	6a3b      	ldr	r3, [r7, #32]
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	891a      	ldrh	r2, [r3, #8]
 8013334:	6a3b      	ldr	r3, [r7, #32]
 8013336:	891b      	ldrh	r3, [r3, #8]
 8013338:	1ad3      	subs	r3, r2, r3
 801333a:	b29b      	uxth	r3, r3
 801333c:	2201      	movs	r2, #1
 801333e:	6939      	ldr	r1, [r7, #16]
 8013340:	f7f9 ff76 	bl	800d230 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013344:	6a3b      	ldr	r3, [r7, #32]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	4618      	mov	r0, r3
 801334c:	f7f8 f99d 	bl	800b68a <lwip_htonl>
 8013350:	4603      	mov	r3, r0
 8013352:	3301      	adds	r3, #1
 8013354:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	2b00      	cmp	r3, #0
 8013360:	da02      	bge.n	8013368 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	68fa      	ldr	r2, [r7, #12]
 8013366:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801336c:	2200      	movs	r2, #0
 801336e:	69b9      	ldr	r1, [r7, #24]
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7ff fdef 	bl	8012f54 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	3304      	adds	r3, #4
 801337c:	69b9      	ldr	r1, [r7, #24]
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7ff fe26 	bl	8012fd0 <tcp_output_control_segment>
 8013384:	4603      	mov	r3, r0
 8013386:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013388:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801338c:	4618      	mov	r0, r3
 801338e:	372c      	adds	r7, #44	@ 0x2c
 8013390:	46bd      	mov	sp, r7
 8013392:	bd90      	pop	{r4, r7, pc}
 8013394:	08019a30 	.word	0x08019a30
 8013398:	0801a228 	.word	0x0801a228
 801339c:	08019a84 	.word	0x08019a84

080133a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80133a8:	f7fa f830 	bl	800d40c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80133ac:	4b0a      	ldr	r3, [pc, #40]	@ (80133d8 <tcpip_tcp_timer+0x38>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d103      	bne.n	80133bc <tcpip_tcp_timer+0x1c>
 80133b4:	4b09      	ldr	r3, [pc, #36]	@ (80133dc <tcpip_tcp_timer+0x3c>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d005      	beq.n	80133c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80133bc:	2200      	movs	r2, #0
 80133be:	4908      	ldr	r1, [pc, #32]	@ (80133e0 <tcpip_tcp_timer+0x40>)
 80133c0:	20fa      	movs	r0, #250	@ 0xfa
 80133c2:	f000 f8f3 	bl	80135ac <sys_timeout>
 80133c6:	e003      	b.n	80133d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80133c8:	4b06      	ldr	r3, [pc, #24]	@ (80133e4 <tcpip_tcp_timer+0x44>)
 80133ca:	2200      	movs	r2, #0
 80133cc:	601a      	str	r2, [r3, #0]
  }
}
 80133ce:	bf00      	nop
 80133d0:	bf00      	nop
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	2000c5b0 	.word	0x2000c5b0
 80133dc:	2000c5b4 	.word	0x2000c5b4
 80133e0:	080133a1 	.word	0x080133a1
 80133e4:	2000c5fc 	.word	0x2000c5fc

080133e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80133ec:	4b0a      	ldr	r3, [pc, #40]	@ (8013418 <tcp_timer_needed+0x30>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d10f      	bne.n	8013414 <tcp_timer_needed+0x2c>
 80133f4:	4b09      	ldr	r3, [pc, #36]	@ (801341c <tcp_timer_needed+0x34>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d103      	bne.n	8013404 <tcp_timer_needed+0x1c>
 80133fc:	4b08      	ldr	r3, [pc, #32]	@ (8013420 <tcp_timer_needed+0x38>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d007      	beq.n	8013414 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013404:	4b04      	ldr	r3, [pc, #16]	@ (8013418 <tcp_timer_needed+0x30>)
 8013406:	2201      	movs	r2, #1
 8013408:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801340a:	2200      	movs	r2, #0
 801340c:	4905      	ldr	r1, [pc, #20]	@ (8013424 <tcp_timer_needed+0x3c>)
 801340e:	20fa      	movs	r0, #250	@ 0xfa
 8013410:	f000 f8cc 	bl	80135ac <sys_timeout>
  }
}
 8013414:	bf00      	nop
 8013416:	bd80      	pop	{r7, pc}
 8013418:	2000c5fc 	.word	0x2000c5fc
 801341c:	2000c5b0 	.word	0x2000c5b0
 8013420:	2000c5b4 	.word	0x2000c5b4
 8013424:	080133a1 	.word	0x080133a1

08013428 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013434:	200a      	movs	r0, #10
 8013436:	f7f8 fdeb 	bl	800c010 <memp_malloc>
 801343a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d109      	bne.n	8013456 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d151      	bne.n	80134ec <sys_timeout_abs+0xc4>
 8013448:	4b2a      	ldr	r3, [pc, #168]	@ (80134f4 <sys_timeout_abs+0xcc>)
 801344a:	22be      	movs	r2, #190	@ 0xbe
 801344c:	492a      	ldr	r1, [pc, #168]	@ (80134f8 <sys_timeout_abs+0xd0>)
 801344e:	482b      	ldr	r0, [pc, #172]	@ (80134fc <sys_timeout_abs+0xd4>)
 8013450:	f7ed fe3e 	bl	80010d0 <printf>
    return;
 8013454:	e04a      	b.n	80134ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	2200      	movs	r2, #0
 801345a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	68ba      	ldr	r2, [r7, #8]
 8013460:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	687a      	ldr	r2, [r7, #4]
 8013466:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801346e:	4b24      	ldr	r3, [pc, #144]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d103      	bne.n	801347e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013476:	4a22      	ldr	r2, [pc, #136]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	6013      	str	r3, [r2, #0]
    return;
 801347c:	e037      	b.n	80134ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	685a      	ldr	r2, [r3, #4]
 8013482:	4b1f      	ldr	r3, [pc, #124]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	0fdb      	lsrs	r3, r3, #31
 801348c:	f003 0301 	and.w	r3, r3, #1
 8013490:	b2db      	uxtb	r3, r3
 8013492:	2b00      	cmp	r3, #0
 8013494:	d007      	beq.n	80134a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013496:	4b1a      	ldr	r3, [pc, #104]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801349e:	4a18      	ldr	r2, [pc, #96]	@ (8013500 <sys_timeout_abs+0xd8>)
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	6013      	str	r3, [r2, #0]
 80134a4:	e023      	b.n	80134ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80134a6:	4b16      	ldr	r3, [pc, #88]	@ (8013500 <sys_timeout_abs+0xd8>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	617b      	str	r3, [r7, #20]
 80134ac:	e01a      	b.n	80134e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d00b      	beq.n	80134ce <sys_timeout_abs+0xa6>
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	685a      	ldr	r2, [r3, #4]
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	1ad3      	subs	r3, r2, r3
 80134c2:	0fdb      	lsrs	r3, r3, #31
 80134c4:	f003 0301 	and.w	r3, r3, #1
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d007      	beq.n	80134de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	693a      	ldr	r2, [r7, #16]
 80134da:	601a      	str	r2, [r3, #0]
        break;
 80134dc:	e007      	b.n	80134ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	617b      	str	r3, [r7, #20]
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d1e1      	bne.n	80134ae <sys_timeout_abs+0x86>
 80134ea:	e000      	b.n	80134ee <sys_timeout_abs+0xc6>
    return;
 80134ec:	bf00      	nop
      }
    }
  }
}
 80134ee:	3718      	adds	r7, #24
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	0801a24c 	.word	0x0801a24c
 80134f8:	0801a280 	.word	0x0801a280
 80134fc:	0801a2c0 	.word	0x0801a2c0
 8013500:	2000c5f4 	.word	0x2000c5f4

08013504 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b086      	sub	sp, #24
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	4798      	blx	r3

  now = sys_now();
 8013516:	f7f2 fd7b 	bl	8006010 <sys_now>
 801351a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	4b0f      	ldr	r3, [pc, #60]	@ (8013560 <lwip_cyclic_timer+0x5c>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4413      	add	r3, r2
 8013526:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	0fdb      	lsrs	r3, r3, #31
 8013530:	f003 0301 	and.w	r3, r3, #1
 8013534:	b2db      	uxtb	r3, r3
 8013536:	2b00      	cmp	r3, #0
 8013538:	d009      	beq.n	801354e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	4413      	add	r3, r2
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	4907      	ldr	r1, [pc, #28]	@ (8013564 <lwip_cyclic_timer+0x60>)
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff ff6e 	bl	8013428 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801354c:	e004      	b.n	8013558 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	4904      	ldr	r1, [pc, #16]	@ (8013564 <lwip_cyclic_timer+0x60>)
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f7ff ff68 	bl	8013428 <sys_timeout_abs>
}
 8013558:	bf00      	nop
 801355a:	3718      	adds	r7, #24
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	2000c5f8 	.word	0x2000c5f8
 8013564:	08013505 	.word	0x08013505

08013568 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801356e:	2301      	movs	r3, #1
 8013570:	607b      	str	r3, [r7, #4]
 8013572:	e00e      	b.n	8013592 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013574:	4a0b      	ldr	r2, [pc, #44]	@ (80135a4 <sys_timeouts_init+0x3c>)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	00db      	lsls	r3, r3, #3
 8013580:	4a08      	ldr	r2, [pc, #32]	@ (80135a4 <sys_timeouts_init+0x3c>)
 8013582:	4413      	add	r3, r2
 8013584:	461a      	mov	r2, r3
 8013586:	4908      	ldr	r1, [pc, #32]	@ (80135a8 <sys_timeouts_init+0x40>)
 8013588:	f000 f810 	bl	80135ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	3301      	adds	r3, #1
 8013590:	607b      	str	r3, [r7, #4]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2b02      	cmp	r3, #2
 8013596:	d9ed      	bls.n	8013574 <sys_timeouts_init+0xc>
  }
}
 8013598:	bf00      	nop
 801359a:	bf00      	nop
 801359c:	3708      	adds	r7, #8
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	0801ae7c 	.word	0x0801ae7c
 80135a8:	08013505 	.word	0x08013505

080135ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b086      	sub	sp, #24
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135be:	d306      	bcc.n	80135ce <sys_timeout+0x22>
 80135c0:	4b0a      	ldr	r3, [pc, #40]	@ (80135ec <sys_timeout+0x40>)
 80135c2:	f240 1229 	movw	r2, #297	@ 0x129
 80135c6:	490a      	ldr	r1, [pc, #40]	@ (80135f0 <sys_timeout+0x44>)
 80135c8:	480a      	ldr	r0, [pc, #40]	@ (80135f4 <sys_timeout+0x48>)
 80135ca:	f7ed fd81 	bl	80010d0 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80135ce:	f7f2 fd1f 	bl	8006010 <sys_now>
 80135d2:	4602      	mov	r2, r0
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	4413      	add	r3, r2
 80135d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	68b9      	ldr	r1, [r7, #8]
 80135de:	6978      	ldr	r0, [r7, #20]
 80135e0:	f7ff ff22 	bl	8013428 <sys_timeout_abs>
#endif
}
 80135e4:	bf00      	nop
 80135e6:	3718      	adds	r7, #24
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	0801a24c 	.word	0x0801a24c
 80135f0:	0801a2e8 	.word	0x0801a2e8
 80135f4:	0801a2c0 	.word	0x0801a2c0

080135f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80135fe:	f7f2 fd07 	bl	8006010 <sys_now>
 8013602:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013604:	4b17      	ldr	r3, [pc, #92]	@ (8013664 <sys_check_timeouts+0x6c>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d022      	beq.n	8013656 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	68fa      	ldr	r2, [r7, #12]
 8013616:	1ad3      	subs	r3, r2, r3
 8013618:	0fdb      	lsrs	r3, r3, #31
 801361a:	f003 0301 	and.w	r3, r3, #1
 801361e:	b2db      	uxtb	r3, r3
 8013620:	2b00      	cmp	r3, #0
 8013622:	d11a      	bne.n	801365a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	4a0e      	ldr	r2, [pc, #56]	@ (8013664 <sys_check_timeouts+0x6c>)
 801362a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	689b      	ldr	r3, [r3, #8]
 8013630:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	68db      	ldr	r3, [r3, #12]
 8013636:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	4a0a      	ldr	r2, [pc, #40]	@ (8013668 <sys_check_timeouts+0x70>)
 801363e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013640:	68b9      	ldr	r1, [r7, #8]
 8013642:	200a      	movs	r0, #10
 8013644:	f7f8 fd5a 	bl	800c0fc <memp_free>
    if (handler != NULL) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d0da      	beq.n	8013604 <sys_check_timeouts+0xc>
      handler(arg);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6838      	ldr	r0, [r7, #0]
 8013652:	4798      	blx	r3
  do {
 8013654:	e7d6      	b.n	8013604 <sys_check_timeouts+0xc>
      return;
 8013656:	bf00      	nop
 8013658:	e000      	b.n	801365c <sys_check_timeouts+0x64>
      return;
 801365a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	2000c5f4 	.word	0x2000c5f4
 8013668:	2000c5f8 	.word	0x2000c5f8

0801366c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013672:	4b16      	ldr	r3, [pc, #88]	@ (80136cc <sys_timeouts_sleeptime+0x60>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d102      	bne.n	8013680 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801367a:	f04f 33ff 	mov.w	r3, #4294967295
 801367e:	e020      	b.n	80136c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013680:	f7f2 fcc6 	bl	8006010 <sys_now>
 8013684:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013686:	4b11      	ldr	r3, [pc, #68]	@ (80136cc <sys_timeouts_sleeptime+0x60>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	685a      	ldr	r2, [r3, #4]
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	1ad3      	subs	r3, r2, r3
 8013690:	0fdb      	lsrs	r3, r3, #31
 8013692:	f003 0301 	and.w	r3, r3, #1
 8013696:	b2db      	uxtb	r3, r3
 8013698:	2b00      	cmp	r3, #0
 801369a:	d001      	beq.n	80136a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801369c:	2300      	movs	r3, #0
 801369e:	e010      	b.n	80136c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80136a0:	4b0a      	ldr	r3, [pc, #40]	@ (80136cc <sys_timeouts_sleeptime+0x60>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	685a      	ldr	r2, [r3, #4]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	1ad3      	subs	r3, r2, r3
 80136aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	da06      	bge.n	80136c0 <sys_timeouts_sleeptime+0x54>
 80136b2:	4b07      	ldr	r3, [pc, #28]	@ (80136d0 <sys_timeouts_sleeptime+0x64>)
 80136b4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80136b8:	4906      	ldr	r1, [pc, #24]	@ (80136d4 <sys_timeouts_sleeptime+0x68>)
 80136ba:	4807      	ldr	r0, [pc, #28]	@ (80136d8 <sys_timeouts_sleeptime+0x6c>)
 80136bc:	f7ed fd08 	bl	80010d0 <printf>
    return ret;
 80136c0:	683b      	ldr	r3, [r7, #0]
  }
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3708      	adds	r7, #8
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	2000c5f4 	.word	0x2000c5f4
 80136d0:	0801a24c 	.word	0x0801a24c
 80136d4:	0801a320 	.word	0x0801a320
 80136d8:	0801a2c0 	.word	0x0801a2c0

080136dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80136e0:	f003 f812 	bl	8016708 <rand>
 80136e4:	4603      	mov	r3, r0
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	4b01      	ldr	r3, [pc, #4]	@ (80136fc <udp_init+0x20>)
 80136f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80136f8:	bf00      	nop
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	2000002c 	.word	0x2000002c

08013700 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013700:	b480      	push	{r7}
 8013702:	b083      	sub	sp, #12
 8013704:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013706:	2300      	movs	r3, #0
 8013708:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801370a:	4b17      	ldr	r3, [pc, #92]	@ (8013768 <udp_new_port+0x68>)
 801370c:	881b      	ldrh	r3, [r3, #0]
 801370e:	1c5a      	adds	r2, r3, #1
 8013710:	b291      	uxth	r1, r2
 8013712:	4a15      	ldr	r2, [pc, #84]	@ (8013768 <udp_new_port+0x68>)
 8013714:	8011      	strh	r1, [r2, #0]
 8013716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801371a:	4293      	cmp	r3, r2
 801371c:	d103      	bne.n	8013726 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801371e:	4b12      	ldr	r3, [pc, #72]	@ (8013768 <udp_new_port+0x68>)
 8013720:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013724:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013726:	4b11      	ldr	r3, [pc, #68]	@ (801376c <udp_new_port+0x6c>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	603b      	str	r3, [r7, #0]
 801372c:	e011      	b.n	8013752 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	8a5a      	ldrh	r2, [r3, #18]
 8013732:	4b0d      	ldr	r3, [pc, #52]	@ (8013768 <udp_new_port+0x68>)
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	429a      	cmp	r2, r3
 8013738:	d108      	bne.n	801374c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801373a:	88fb      	ldrh	r3, [r7, #6]
 801373c:	3301      	adds	r3, #1
 801373e:	80fb      	strh	r3, [r7, #6]
 8013740:	88fb      	ldrh	r3, [r7, #6]
 8013742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013746:	d3e0      	bcc.n	801370a <udp_new_port+0xa>
        return 0;
 8013748:	2300      	movs	r3, #0
 801374a:	e007      	b.n	801375c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	603b      	str	r3, [r7, #0]
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d1ea      	bne.n	801372e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013758:	4b03      	ldr	r3, [pc, #12]	@ (8013768 <udp_new_port+0x68>)
 801375a:	881b      	ldrh	r3, [r3, #0]
}
 801375c:	4618      	mov	r0, r3
 801375e:	370c      	adds	r7, #12
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr
 8013768:	2000002c 	.word	0x2000002c
 801376c:	2000c600 	.word	0x2000c600

08013770 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	4613      	mov	r3, r2
 801377c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d105      	bne.n	8013790 <udp_input_local_match+0x20>
 8013784:	4b27      	ldr	r3, [pc, #156]	@ (8013824 <udp_input_local_match+0xb4>)
 8013786:	2287      	movs	r2, #135	@ 0x87
 8013788:	4927      	ldr	r1, [pc, #156]	@ (8013828 <udp_input_local_match+0xb8>)
 801378a:	4828      	ldr	r0, [pc, #160]	@ (801382c <udp_input_local_match+0xbc>)
 801378c:	f7ed fca0 	bl	80010d0 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d105      	bne.n	80137a2 <udp_input_local_match+0x32>
 8013796:	4b23      	ldr	r3, [pc, #140]	@ (8013824 <udp_input_local_match+0xb4>)
 8013798:	2288      	movs	r2, #136	@ 0x88
 801379a:	4925      	ldr	r1, [pc, #148]	@ (8013830 <udp_input_local_match+0xc0>)
 801379c:	4823      	ldr	r0, [pc, #140]	@ (801382c <udp_input_local_match+0xbc>)
 801379e:	f7ed fc97 	bl	80010d0 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	7a1b      	ldrb	r3, [r3, #8]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d00b      	beq.n	80137c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	7a1a      	ldrb	r2, [r3, #8]
 80137ae:	4b21      	ldr	r3, [pc, #132]	@ (8013834 <udp_input_local_match+0xc4>)
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80137b6:	3301      	adds	r3, #1
 80137b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d001      	beq.n	80137c2 <udp_input_local_match+0x52>
    return 0;
 80137be:	2300      	movs	r3, #0
 80137c0:	e02b      	b.n	801381a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80137c2:	79fb      	ldrb	r3, [r7, #7]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d018      	beq.n	80137fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d013      	beq.n	80137f6 <udp_input_local_match+0x86>
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d00f      	beq.n	80137f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80137d6:	4b17      	ldr	r3, [pc, #92]	@ (8013834 <udp_input_local_match+0xc4>)
 80137d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80137da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137de:	d00a      	beq.n	80137f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681a      	ldr	r2, [r3, #0]
 80137e4:	4b13      	ldr	r3, [pc, #76]	@ (8013834 <udp_input_local_match+0xc4>)
 80137e6:	695b      	ldr	r3, [r3, #20]
 80137e8:	405a      	eors	r2, r3
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	3308      	adds	r3, #8
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d110      	bne.n	8013818 <udp_input_local_match+0xa8>
          return 1;
 80137f6:	2301      	movs	r3, #1
 80137f8:	e00f      	b.n	801381a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d009      	beq.n	8013814 <udp_input_local_match+0xa4>
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d005      	beq.n	8013814 <udp_input_local_match+0xa4>
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	681a      	ldr	r2, [r3, #0]
 801380c:	4b09      	ldr	r3, [pc, #36]	@ (8013834 <udp_input_local_match+0xc4>)
 801380e:	695b      	ldr	r3, [r3, #20]
 8013810:	429a      	cmp	r2, r3
 8013812:	d101      	bne.n	8013818 <udp_input_local_match+0xa8>
        return 1;
 8013814:	2301      	movs	r3, #1
 8013816:	e000      	b.n	801381a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013818:	2300      	movs	r3, #0
}
 801381a:	4618      	mov	r0, r3
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop
 8013824:	0801a334 	.word	0x0801a334
 8013828:	0801a364 	.word	0x0801a364
 801382c:	0801a388 	.word	0x0801a388
 8013830:	0801a3b0 	.word	0x0801a3b0
 8013834:	20008e50 	.word	0x20008e50

08013838 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013838:	b590      	push	{r4, r7, lr}
 801383a:	b08d      	sub	sp, #52	@ 0x34
 801383c:	af02      	add	r7, sp, #8
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013842:	2300      	movs	r3, #0
 8013844:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d105      	bne.n	8013858 <udp_input+0x20>
 801384c:	4b7c      	ldr	r3, [pc, #496]	@ (8013a40 <udp_input+0x208>)
 801384e:	22cf      	movs	r2, #207	@ 0xcf
 8013850:	497c      	ldr	r1, [pc, #496]	@ (8013a44 <udp_input+0x20c>)
 8013852:	487d      	ldr	r0, [pc, #500]	@ (8013a48 <udp_input+0x210>)
 8013854:	f7ed fc3c 	bl	80010d0 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d105      	bne.n	801386a <udp_input+0x32>
 801385e:	4b78      	ldr	r3, [pc, #480]	@ (8013a40 <udp_input+0x208>)
 8013860:	22d0      	movs	r2, #208	@ 0xd0
 8013862:	497a      	ldr	r1, [pc, #488]	@ (8013a4c <udp_input+0x214>)
 8013864:	4878      	ldr	r0, [pc, #480]	@ (8013a48 <udp_input+0x210>)
 8013866:	f7ed fc33 	bl	80010d0 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	895b      	ldrh	r3, [r3, #10]
 801386e:	2b07      	cmp	r3, #7
 8013870:	d803      	bhi.n	801387a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f7f9 fae6 	bl	800ce44 <pbuf_free>
    goto end;
 8013878:	e0de      	b.n	8013a38 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013880:	4b73      	ldr	r3, [pc, #460]	@ (8013a50 <udp_input+0x218>)
 8013882:	695b      	ldr	r3, [r3, #20]
 8013884:	4a72      	ldr	r2, [pc, #456]	@ (8013a50 <udp_input+0x218>)
 8013886:	6812      	ldr	r2, [r2, #0]
 8013888:	4611      	mov	r1, r2
 801388a:	4618      	mov	r0, r3
 801388c:	f001 fe04 	bl	8015498 <ip4_addr_isbroadcast_u32>
 8013890:	4603      	mov	r3, r0
 8013892:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	881b      	ldrh	r3, [r3, #0]
 8013898:	b29b      	uxth	r3, r3
 801389a:	4618      	mov	r0, r3
 801389c:	f7f7 fee0 	bl	800b660 <lwip_htons>
 80138a0:	4603      	mov	r3, r0
 80138a2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	885b      	ldrh	r3, [r3, #2]
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7f7 fed8 	bl	800b660 <lwip_htons>
 80138b0:	4603      	mov	r3, r0
 80138b2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80138b4:	2300      	movs	r3, #0
 80138b6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80138b8:	2300      	movs	r3, #0
 80138ba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80138bc:	2300      	movs	r3, #0
 80138be:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80138c0:	4b64      	ldr	r3, [pc, #400]	@ (8013a54 <udp_input+0x21c>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80138c6:	e054      	b.n	8013972 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80138c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ca:	8a5b      	ldrh	r3, [r3, #18]
 80138cc:	89fa      	ldrh	r2, [r7, #14]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d14a      	bne.n	8013968 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80138d2:	7cfb      	ldrb	r3, [r7, #19]
 80138d4:	461a      	mov	r2, r3
 80138d6:	6839      	ldr	r1, [r7, #0]
 80138d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80138da:	f7ff ff49 	bl	8013770 <udp_input_local_match>
 80138de:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d041      	beq.n	8013968 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80138e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e6:	7c1b      	ldrb	r3, [r3, #16]
 80138e8:	f003 0304 	and.w	r3, r3, #4
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d11d      	bne.n	801392c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d102      	bne.n	80138fc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80138f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f8:	61fb      	str	r3, [r7, #28]
 80138fa:	e017      	b.n	801392c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80138fc:	7cfb      	ldrb	r3, [r7, #19]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d014      	beq.n	801392c <udp_input+0xf4>
 8013902:	4b53      	ldr	r3, [pc, #332]	@ (8013a50 <udp_input+0x218>)
 8013904:	695b      	ldr	r3, [r3, #20]
 8013906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801390a:	d10f      	bne.n	801392c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	3304      	adds	r3, #4
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	429a      	cmp	r2, r3
 8013918:	d008      	beq.n	801392c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801391c:	681a      	ldr	r2, [r3, #0]
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	3304      	adds	r3, #4
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	429a      	cmp	r2, r3
 8013926:	d101      	bne.n	801392c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801392a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801392e:	8a9b      	ldrh	r3, [r3, #20]
 8013930:	8a3a      	ldrh	r2, [r7, #16]
 8013932:	429a      	cmp	r2, r3
 8013934:	d118      	bne.n	8013968 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013938:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801393a:	2b00      	cmp	r3, #0
 801393c:	d005      	beq.n	801394a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013940:	685a      	ldr	r2, [r3, #4]
 8013942:	4b43      	ldr	r3, [pc, #268]	@ (8013a50 <udp_input+0x218>)
 8013944:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013946:	429a      	cmp	r2, r3
 8013948:	d10e      	bne.n	8013968 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801394a:	6a3b      	ldr	r3, [r7, #32]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d014      	beq.n	801397a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013952:	68da      	ldr	r2, [r3, #12]
 8013954:	6a3b      	ldr	r3, [r7, #32]
 8013956:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013958:	4b3e      	ldr	r3, [pc, #248]	@ (8013a54 <udp_input+0x21c>)
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801395e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013960:	4a3c      	ldr	r2, [pc, #240]	@ (8013a54 <udp_input+0x21c>)
 8013962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013964:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013966:	e008      	b.n	801397a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801396a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801396e:	68db      	ldr	r3, [r3, #12]
 8013970:	627b      	str	r3, [r7, #36]	@ 0x24
 8013972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013974:	2b00      	cmp	r3, #0
 8013976:	d1a7      	bne.n	80138c8 <udp_input+0x90>
 8013978:	e000      	b.n	801397c <udp_input+0x144>
        break;
 801397a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801397e:	2b00      	cmp	r3, #0
 8013980:	d101      	bne.n	8013986 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013988:	2b00      	cmp	r3, #0
 801398a:	d002      	beq.n	8013992 <udp_input+0x15a>
    for_us = 1;
 801398c:	2301      	movs	r3, #1
 801398e:	76fb      	strb	r3, [r7, #27]
 8013990:	e00a      	b.n	80139a8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	3304      	adds	r3, #4
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	4b2d      	ldr	r3, [pc, #180]	@ (8013a50 <udp_input+0x218>)
 801399a:	695b      	ldr	r3, [r3, #20]
 801399c:	429a      	cmp	r2, r3
 801399e:	bf0c      	ite	eq
 80139a0:	2301      	moveq	r3, #1
 80139a2:	2300      	movne	r3, #0
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80139a8:	7efb      	ldrb	r3, [r7, #27]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d041      	beq.n	8013a32 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80139ae:	2108      	movs	r1, #8
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f7f9 f9c1 	bl	800cd38 <pbuf_remove_header>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00a      	beq.n	80139d2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80139bc:	4b20      	ldr	r3, [pc, #128]	@ (8013a40 <udp_input+0x208>)
 80139be:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80139c2:	4925      	ldr	r1, [pc, #148]	@ (8013a58 <udp_input+0x220>)
 80139c4:	4820      	ldr	r0, [pc, #128]	@ (8013a48 <udp_input+0x210>)
 80139c6:	f7ed fb83 	bl	80010d0 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f7f9 fa3a 	bl	800ce44 <pbuf_free>
      goto end;
 80139d0:	e032      	b.n	8013a38 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80139d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d012      	beq.n	80139fe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80139d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139da:	699b      	ldr	r3, [r3, #24]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d00a      	beq.n	80139f6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80139e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139e2:	699c      	ldr	r4, [r3, #24]
 80139e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139e6:	69d8      	ldr	r0, [r3, #28]
 80139e8:	8a3b      	ldrh	r3, [r7, #16]
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	4b1b      	ldr	r3, [pc, #108]	@ (8013a5c <udp_input+0x224>)
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80139f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80139f4:	e021      	b.n	8013a3a <udp_input+0x202>
        pbuf_free(p);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7f9 fa24 	bl	800ce44 <pbuf_free>
        goto end;
 80139fc:	e01c      	b.n	8013a38 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80139fe:	7cfb      	ldrb	r3, [r7, #19]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d112      	bne.n	8013a2a <udp_input+0x1f2>
 8013a04:	4b12      	ldr	r3, [pc, #72]	@ (8013a50 <udp_input+0x218>)
 8013a06:	695b      	ldr	r3, [r3, #20]
 8013a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013a0c:	2be0      	cmp	r3, #224	@ 0xe0
 8013a0e:	d00c      	beq.n	8013a2a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013a10:	4b0f      	ldr	r3, [pc, #60]	@ (8013a50 <udp_input+0x218>)
 8013a12:	899b      	ldrh	r3, [r3, #12]
 8013a14:	3308      	adds	r3, #8
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	b21b      	sxth	r3, r3
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f7f9 f9fe 	bl	800ce1e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013a22:	2103      	movs	r1, #3
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f001 fa17 	bl	8014e58 <icmp_dest_unreach>
      pbuf_free(p);
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f7f9 fa0a 	bl	800ce44 <pbuf_free>
  return;
 8013a30:	e003      	b.n	8013a3a <udp_input+0x202>
    pbuf_free(p);
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f7f9 fa06 	bl	800ce44 <pbuf_free>
  return;
 8013a38:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013a3a:	372c      	adds	r7, #44	@ 0x2c
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd90      	pop	{r4, r7, pc}
 8013a40:	0801a334 	.word	0x0801a334
 8013a44:	0801a3d8 	.word	0x0801a3d8
 8013a48:	0801a388 	.word	0x0801a388
 8013a4c:	0801a3f0 	.word	0x0801a3f0
 8013a50:	20008e50 	.word	0x20008e50
 8013a54:	2000c600 	.word	0x2000c600
 8013a58:	0801a40c 	.word	0x0801a40c
 8013a5c:	20008e60 	.word	0x20008e60

08013a60 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b086      	sub	sp, #24
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d101      	bne.n	8013a78 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013a74:	4b39      	ldr	r3, [pc, #228]	@ (8013b5c <udp_bind+0xfc>)
 8013a76:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d109      	bne.n	8013a92 <udp_bind+0x32>
 8013a7e:	4b38      	ldr	r3, [pc, #224]	@ (8013b60 <udp_bind+0x100>)
 8013a80:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013a84:	4937      	ldr	r1, [pc, #220]	@ (8013b64 <udp_bind+0x104>)
 8013a86:	4838      	ldr	r0, [pc, #224]	@ (8013b68 <udp_bind+0x108>)
 8013a88:	f7ed fb22 	bl	80010d0 <printf>
 8013a8c:	f06f 030f 	mvn.w	r3, #15
 8013a90:	e060      	b.n	8013b54 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013a92:	2300      	movs	r3, #0
 8013a94:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a96:	4b35      	ldr	r3, [pc, #212]	@ (8013b6c <udp_bind+0x10c>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	617b      	str	r3, [r7, #20]
 8013a9c:	e009      	b.n	8013ab2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d102      	bne.n	8013aac <udp_bind+0x4c>
      rebind = 1;
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8013aaa:	e005      	b.n	8013ab8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	617b      	str	r3, [r7, #20]
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d1f2      	bne.n	8013a9e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013ab8:	88fb      	ldrh	r3, [r7, #6]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d109      	bne.n	8013ad2 <udp_bind+0x72>
    port = udp_new_port();
 8013abe:	f7ff fe1f 	bl	8013700 <udp_new_port>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013ac6:	88fb      	ldrh	r3, [r7, #6]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d12c      	bne.n	8013b26 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013acc:	f06f 0307 	mvn.w	r3, #7
 8013ad0:	e040      	b.n	8013b54 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ad2:	4b26      	ldr	r3, [pc, #152]	@ (8013b6c <udp_bind+0x10c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	617b      	str	r3, [r7, #20]
 8013ad8:	e022      	b.n	8013b20 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d01b      	beq.n	8013b1a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	8a5b      	ldrh	r3, [r3, #18]
 8013ae6:	88fa      	ldrh	r2, [r7, #6]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d116      	bne.n	8013b1a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	681a      	ldr	r2, [r3, #0]
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d00d      	beq.n	8013b14 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d00a      	beq.n	8013b14 <udp_bind+0xb4>
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d006      	beq.n	8013b14 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b06:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d003      	beq.n	8013b14 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d102      	bne.n	8013b1a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013b14:	f06f 0307 	mvn.w	r3, #7
 8013b18:	e01c      	b.n	8013b54 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	68db      	ldr	r3, [r3, #12]
 8013b1e:	617b      	str	r3, [r7, #20]
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d1d9      	bne.n	8013ada <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <udp_bind+0xd2>
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	e000      	b.n	8013b34 <udp_bind+0xd4>
 8013b32:	2300      	movs	r3, #0
 8013b34:	68fa      	ldr	r2, [r7, #12]
 8013b36:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	88fa      	ldrh	r2, [r7, #6]
 8013b3c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013b3e:	7cfb      	ldrb	r3, [r7, #19]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d106      	bne.n	8013b52 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013b44:	4b09      	ldr	r3, [pc, #36]	@ (8013b6c <udp_bind+0x10c>)
 8013b46:	681a      	ldr	r2, [r3, #0]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013b4c:	4a07      	ldr	r2, [pc, #28]	@ (8013b6c <udp_bind+0x10c>)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013b52:	2300      	movs	r3, #0
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3718      	adds	r7, #24
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	0801ae94 	.word	0x0801ae94
 8013b60:	0801a334 	.word	0x0801a334
 8013b64:	0801a5fc 	.word	0x0801a5fc
 8013b68:	0801a388 	.word	0x0801a388
 8013b6c:	2000c600 	.word	0x2000c600

08013b70 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b086      	sub	sp, #24
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	4613      	mov	r3, r2
 8013b7c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d109      	bne.n	8013b98 <udp_connect+0x28>
 8013b84:	4b2c      	ldr	r3, [pc, #176]	@ (8013c38 <udp_connect+0xc8>)
 8013b86:	f240 4235 	movw	r2, #1077	@ 0x435
 8013b8a:	492c      	ldr	r1, [pc, #176]	@ (8013c3c <udp_connect+0xcc>)
 8013b8c:	482c      	ldr	r0, [pc, #176]	@ (8013c40 <udp_connect+0xd0>)
 8013b8e:	f7ed fa9f 	bl	80010d0 <printf>
 8013b92:	f06f 030f 	mvn.w	r3, #15
 8013b96:	e04b      	b.n	8013c30 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d109      	bne.n	8013bb2 <udp_connect+0x42>
 8013b9e:	4b26      	ldr	r3, [pc, #152]	@ (8013c38 <udp_connect+0xc8>)
 8013ba0:	f240 4236 	movw	r2, #1078	@ 0x436
 8013ba4:	4927      	ldr	r1, [pc, #156]	@ (8013c44 <udp_connect+0xd4>)
 8013ba6:	4826      	ldr	r0, [pc, #152]	@ (8013c40 <udp_connect+0xd0>)
 8013ba8:	f7ed fa92 	bl	80010d0 <printf>
 8013bac:	f06f 030f 	mvn.w	r3, #15
 8013bb0:	e03e      	b.n	8013c30 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	8a5b      	ldrh	r3, [r3, #18]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d10f      	bne.n	8013bda <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013bba:	68f9      	ldr	r1, [r7, #12]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	8a5b      	ldrh	r3, [r3, #18]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f7ff ff4c 	bl	8013a60 <udp_bind>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013bcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d002      	beq.n	8013bda <udp_connect+0x6a>
      return err;
 8013bd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bd8:	e02a      	b.n	8013c30 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d002      	beq.n	8013be6 <udp_connect+0x76>
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	e000      	b.n	8013be8 <udp_connect+0x78>
 8013be6:	2300      	movs	r3, #0
 8013be8:	68fa      	ldr	r2, [r7, #12]
 8013bea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	88fa      	ldrh	r2, [r7, #6]
 8013bf0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	7c1b      	ldrb	r3, [r3, #16]
 8013bf6:	f043 0304 	orr.w	r3, r3, #4
 8013bfa:	b2da      	uxtb	r2, r3
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c00:	4b11      	ldr	r3, [pc, #68]	@ (8013c48 <udp_connect+0xd8>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	617b      	str	r3, [r7, #20]
 8013c06:	e008      	b.n	8013c1a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013c08:	68fa      	ldr	r2, [r7, #12]
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d101      	bne.n	8013c14 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013c10:	2300      	movs	r3, #0
 8013c12:	e00d      	b.n	8013c30 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	617b      	str	r3, [r7, #20]
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d1f3      	bne.n	8013c08 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013c20:	4b09      	ldr	r3, [pc, #36]	@ (8013c48 <udp_connect+0xd8>)
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013c28:	4a07      	ldr	r2, [pc, #28]	@ (8013c48 <udp_connect+0xd8>)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013c2e:	2300      	movs	r3, #0
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3718      	adds	r7, #24
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	0801a334 	.word	0x0801a334
 8013c3c:	0801a614 	.word	0x0801a614
 8013c40:	0801a388 	.word	0x0801a388
 8013c44:	0801a630 	.word	0x0801a630
 8013c48:	2000c600 	.word	0x2000c600

08013c4c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	60f8      	str	r0, [r7, #12]
 8013c54:	60b9      	str	r1, [r7, #8]
 8013c56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d107      	bne.n	8013c6e <udp_recv+0x22>
 8013c5e:	4b08      	ldr	r3, [pc, #32]	@ (8013c80 <udp_recv+0x34>)
 8013c60:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013c64:	4907      	ldr	r1, [pc, #28]	@ (8013c84 <udp_recv+0x38>)
 8013c66:	4808      	ldr	r0, [pc, #32]	@ (8013c88 <udp_recv+0x3c>)
 8013c68:	f7ed fa32 	bl	80010d0 <printf>
 8013c6c:	e005      	b.n	8013c7a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	68ba      	ldr	r2, [r7, #8]
 8013c72:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	61da      	str	r2, [r3, #28]
}
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}
 8013c80:	0801a334 	.word	0x0801a334
 8013c84:	0801a668 	.word	0x0801a668
 8013c88:	0801a388 	.word	0x0801a388

08013c8c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b084      	sub	sp, #16
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d107      	bne.n	8013caa <udp_remove+0x1e>
 8013c9a:	4b19      	ldr	r3, [pc, #100]	@ (8013d00 <udp_remove+0x74>)
 8013c9c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013ca0:	4918      	ldr	r1, [pc, #96]	@ (8013d04 <udp_remove+0x78>)
 8013ca2:	4819      	ldr	r0, [pc, #100]	@ (8013d08 <udp_remove+0x7c>)
 8013ca4:	f7ed fa14 	bl	80010d0 <printf>
 8013ca8:	e026      	b.n	8013cf8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013caa:	4b18      	ldr	r3, [pc, #96]	@ (8013d0c <udp_remove+0x80>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d105      	bne.n	8013cc0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013cb4:	4b15      	ldr	r3, [pc, #84]	@ (8013d0c <udp_remove+0x80>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	4a14      	ldr	r2, [pc, #80]	@ (8013d0c <udp_remove+0x80>)
 8013cbc:	6013      	str	r3, [r2, #0]
 8013cbe:	e017      	b.n	8013cf0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013cc0:	4b12      	ldr	r3, [pc, #72]	@ (8013d0c <udp_remove+0x80>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	60fb      	str	r3, [r7, #12]
 8013cc6:	e010      	b.n	8013cea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d009      	beq.n	8013ce4 <udp_remove+0x58>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	687a      	ldr	r2, [r7, #4]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d104      	bne.n	8013ce4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	68da      	ldr	r2, [r3, #12]
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	60da      	str	r2, [r3, #12]
        break;
 8013ce2:	e005      	b.n	8013cf0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	68db      	ldr	r3, [r3, #12]
 8013ce8:	60fb      	str	r3, [r7, #12]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d1eb      	bne.n	8013cc8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013cf0:	6879      	ldr	r1, [r7, #4]
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	f7f8 fa02 	bl	800c0fc <memp_free>
}
 8013cf8:	3710      	adds	r7, #16
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	0801a334 	.word	0x0801a334
 8013d04:	0801a680 	.word	0x0801a680
 8013d08:	0801a388 	.word	0x0801a388
 8013d0c:	2000c600 	.word	0x2000c600

08013d10 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013d16:	2000      	movs	r0, #0
 8013d18:	f7f8 f97a 	bl	800c010 <memp_malloc>
 8013d1c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d007      	beq.n	8013d34 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013d24:	2220      	movs	r2, #32
 8013d26:	2100      	movs	r1, #0
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f002 fe40 	bl	80169ae <memset>
    pcb->ttl = UDP_TTL;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	22ff      	movs	r2, #255	@ 0xff
 8013d32:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013d34:	687b      	ldr	r3, [r7, #4]
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3708      	adds	r7, #8
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}

08013d3e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013d3e:	b580      	push	{r7, lr}
 8013d40:	b084      	sub	sp, #16
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	4603      	mov	r3, r0
 8013d46:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013d48:	f7ff ffe2 	bl	8013d10 <udp_new>
 8013d4c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3710      	adds	r7, #16
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d01e      	beq.n	8013da6 <udp_netif_ip_addr_changed+0x4e>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d01a      	beq.n	8013da6 <udp_netif_ip_addr_changed+0x4e>
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d017      	beq.n	8013da6 <udp_netif_ip_addr_changed+0x4e>
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d013      	beq.n	8013da6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8013db4 <udp_netif_ip_addr_changed+0x5c>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	60fb      	str	r3, [r7, #12]
 8013d84:	e00c      	b.n	8013da0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d103      	bne.n	8013d9a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	681a      	ldr	r2, [r3, #0]
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	60fb      	str	r3, [r7, #12]
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d1ef      	bne.n	8013d86 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013da6:	bf00      	nop
 8013da8:	3714      	adds	r7, #20
 8013daa:	46bd      	mov	sp, r7
 8013dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db0:	4770      	bx	lr
 8013db2:	bf00      	nop
 8013db4:	2000c600 	.word	0x2000c600

08013db8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013dc0:	4915      	ldr	r1, [pc, #84]	@ (8013e18 <etharp_free_entry+0x60>)
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	4613      	mov	r3, r2
 8013dc6:	005b      	lsls	r3, r3, #1
 8013dc8:	4413      	add	r3, r2
 8013dca:	00db      	lsls	r3, r3, #3
 8013dcc:	440b      	add	r3, r1
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d013      	beq.n	8013dfc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013dd4:	4910      	ldr	r1, [pc, #64]	@ (8013e18 <etharp_free_entry+0x60>)
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	4613      	mov	r3, r2
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	4413      	add	r3, r2
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	440b      	add	r3, r1
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7f9 f82d 	bl	800ce44 <pbuf_free>
    arp_table[i].q = NULL;
 8013dea:	490b      	ldr	r1, [pc, #44]	@ (8013e18 <etharp_free_entry+0x60>)
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	4613      	mov	r3, r2
 8013df0:	005b      	lsls	r3, r3, #1
 8013df2:	4413      	add	r3, r2
 8013df4:	00db      	lsls	r3, r3, #3
 8013df6:	440b      	add	r3, r1
 8013df8:	2200      	movs	r2, #0
 8013dfa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013dfc:	4906      	ldr	r1, [pc, #24]	@ (8013e18 <etharp_free_entry+0x60>)
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	4613      	mov	r3, r2
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	4413      	add	r3, r2
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	440b      	add	r3, r1
 8013e0a:	3314      	adds	r3, #20
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013e10:	bf00      	nop
 8013e12:	3708      	adds	r7, #8
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	2000c604 	.word	0x2000c604

08013e1c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e22:	2300      	movs	r3, #0
 8013e24:	607b      	str	r3, [r7, #4]
 8013e26:	e096      	b.n	8013f56 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013e28:	494f      	ldr	r1, [pc, #316]	@ (8013f68 <etharp_tmr+0x14c>)
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	4613      	mov	r3, r2
 8013e2e:	005b      	lsls	r3, r3, #1
 8013e30:	4413      	add	r3, r2
 8013e32:	00db      	lsls	r3, r3, #3
 8013e34:	440b      	add	r3, r1
 8013e36:	3314      	adds	r3, #20
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013e3c:	78fb      	ldrb	r3, [r7, #3]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	f000 8086 	beq.w	8013f50 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013e44:	4948      	ldr	r1, [pc, #288]	@ (8013f68 <etharp_tmr+0x14c>)
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	4613      	mov	r3, r2
 8013e4a:	005b      	lsls	r3, r3, #1
 8013e4c:	4413      	add	r3, r2
 8013e4e:	00db      	lsls	r3, r3, #3
 8013e50:	440b      	add	r3, r1
 8013e52:	3312      	adds	r3, #18
 8013e54:	881b      	ldrh	r3, [r3, #0]
 8013e56:	3301      	adds	r3, #1
 8013e58:	b298      	uxth	r0, r3
 8013e5a:	4943      	ldr	r1, [pc, #268]	@ (8013f68 <etharp_tmr+0x14c>)
 8013e5c:	687a      	ldr	r2, [r7, #4]
 8013e5e:	4613      	mov	r3, r2
 8013e60:	005b      	lsls	r3, r3, #1
 8013e62:	4413      	add	r3, r2
 8013e64:	00db      	lsls	r3, r3, #3
 8013e66:	440b      	add	r3, r1
 8013e68:	3312      	adds	r3, #18
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013e6e:	493e      	ldr	r1, [pc, #248]	@ (8013f68 <etharp_tmr+0x14c>)
 8013e70:	687a      	ldr	r2, [r7, #4]
 8013e72:	4613      	mov	r3, r2
 8013e74:	005b      	lsls	r3, r3, #1
 8013e76:	4413      	add	r3, r2
 8013e78:	00db      	lsls	r3, r3, #3
 8013e7a:	440b      	add	r3, r1
 8013e7c:	3312      	adds	r3, #18
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013e84:	d215      	bcs.n	8013eb2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013e86:	4938      	ldr	r1, [pc, #224]	@ (8013f68 <etharp_tmr+0x14c>)
 8013e88:	687a      	ldr	r2, [r7, #4]
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	005b      	lsls	r3, r3, #1
 8013e8e:	4413      	add	r3, r2
 8013e90:	00db      	lsls	r3, r3, #3
 8013e92:	440b      	add	r3, r1
 8013e94:	3314      	adds	r3, #20
 8013e96:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d10e      	bne.n	8013eba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013e9c:	4932      	ldr	r1, [pc, #200]	@ (8013f68 <etharp_tmr+0x14c>)
 8013e9e:	687a      	ldr	r2, [r7, #4]
 8013ea0:	4613      	mov	r3, r2
 8013ea2:	005b      	lsls	r3, r3, #1
 8013ea4:	4413      	add	r3, r2
 8013ea6:	00db      	lsls	r3, r3, #3
 8013ea8:	440b      	add	r3, r1
 8013eaa:	3312      	adds	r3, #18
 8013eac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013eae:	2b04      	cmp	r3, #4
 8013eb0:	d903      	bls.n	8013eba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7ff ff80 	bl	8013db8 <etharp_free_entry>
 8013eb8:	e04a      	b.n	8013f50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013eba:	492b      	ldr	r1, [pc, #172]	@ (8013f68 <etharp_tmr+0x14c>)
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	005b      	lsls	r3, r3, #1
 8013ec2:	4413      	add	r3, r2
 8013ec4:	00db      	lsls	r3, r3, #3
 8013ec6:	440b      	add	r3, r1
 8013ec8:	3314      	adds	r3, #20
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	2b03      	cmp	r3, #3
 8013ece:	d10a      	bne.n	8013ee6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013ed0:	4925      	ldr	r1, [pc, #148]	@ (8013f68 <etharp_tmr+0x14c>)
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	4413      	add	r3, r2
 8013eda:	00db      	lsls	r3, r3, #3
 8013edc:	440b      	add	r3, r1
 8013ede:	3314      	adds	r3, #20
 8013ee0:	2204      	movs	r2, #4
 8013ee2:	701a      	strb	r2, [r3, #0]
 8013ee4:	e034      	b.n	8013f50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013ee6:	4920      	ldr	r1, [pc, #128]	@ (8013f68 <etharp_tmr+0x14c>)
 8013ee8:	687a      	ldr	r2, [r7, #4]
 8013eea:	4613      	mov	r3, r2
 8013eec:	005b      	lsls	r3, r3, #1
 8013eee:	4413      	add	r3, r2
 8013ef0:	00db      	lsls	r3, r3, #3
 8013ef2:	440b      	add	r3, r1
 8013ef4:	3314      	adds	r3, #20
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	2b04      	cmp	r3, #4
 8013efa:	d10a      	bne.n	8013f12 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013efc:	491a      	ldr	r1, [pc, #104]	@ (8013f68 <etharp_tmr+0x14c>)
 8013efe:	687a      	ldr	r2, [r7, #4]
 8013f00:	4613      	mov	r3, r2
 8013f02:	005b      	lsls	r3, r3, #1
 8013f04:	4413      	add	r3, r2
 8013f06:	00db      	lsls	r3, r3, #3
 8013f08:	440b      	add	r3, r1
 8013f0a:	3314      	adds	r3, #20
 8013f0c:	2202      	movs	r2, #2
 8013f0e:	701a      	strb	r2, [r3, #0]
 8013f10:	e01e      	b.n	8013f50 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f12:	4915      	ldr	r1, [pc, #84]	@ (8013f68 <etharp_tmr+0x14c>)
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	4613      	mov	r3, r2
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	4413      	add	r3, r2
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	440b      	add	r3, r1
 8013f20:	3314      	adds	r3, #20
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d113      	bne.n	8013f50 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013f28:	490f      	ldr	r1, [pc, #60]	@ (8013f68 <etharp_tmr+0x14c>)
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	005b      	lsls	r3, r3, #1
 8013f30:	4413      	add	r3, r2
 8013f32:	00db      	lsls	r3, r3, #3
 8013f34:	440b      	add	r3, r1
 8013f36:	3308      	adds	r3, #8
 8013f38:	6818      	ldr	r0, [r3, #0]
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	005b      	lsls	r3, r3, #1
 8013f40:	4413      	add	r3, r2
 8013f42:	00db      	lsls	r3, r3, #3
 8013f44:	4a08      	ldr	r2, [pc, #32]	@ (8013f68 <etharp_tmr+0x14c>)
 8013f46:	4413      	add	r3, r2
 8013f48:	3304      	adds	r3, #4
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	f000 fe6e 	bl	8014c2c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	3301      	adds	r3, #1
 8013f54:	607b      	str	r3, [r7, #4]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2b09      	cmp	r3, #9
 8013f5a:	f77f af65 	ble.w	8013e28 <etharp_tmr+0xc>
      }
    }
  }
}
 8013f5e:	bf00      	nop
 8013f60:	bf00      	nop
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}
 8013f68:	2000c604 	.word	0x2000c604

08013f6c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b08a      	sub	sp, #40	@ 0x28
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	60f8      	str	r0, [r7, #12]
 8013f74:	460b      	mov	r3, r1
 8013f76:	607a      	str	r2, [r7, #4]
 8013f78:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013f7a:	230a      	movs	r3, #10
 8013f7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013f7e:	230a      	movs	r3, #10
 8013f80:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013f82:	230a      	movs	r3, #10
 8013f84:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013f8a:	230a      	movs	r3, #10
 8013f8c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	83bb      	strh	r3, [r7, #28]
 8013f92:	2300      	movs	r3, #0
 8013f94:	837b      	strh	r3, [r7, #26]
 8013f96:	2300      	movs	r3, #0
 8013f98:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	843b      	strh	r3, [r7, #32]
 8013f9e:	e0ae      	b.n	80140fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013fa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fa4:	49a6      	ldr	r1, [pc, #664]	@ (8014240 <etharp_find_entry+0x2d4>)
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	005b      	lsls	r3, r3, #1
 8013faa:	4413      	add	r3, r2
 8013fac:	00db      	lsls	r3, r3, #3
 8013fae:	440b      	add	r3, r1
 8013fb0:	3314      	adds	r3, #20
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013fb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013fba:	2b0a      	cmp	r3, #10
 8013fbc:	d105      	bne.n	8013fca <etharp_find_entry+0x5e>
 8013fbe:	7dfb      	ldrb	r3, [r7, #23]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d102      	bne.n	8013fca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013fc4:	8c3b      	ldrh	r3, [r7, #32]
 8013fc6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013fc8:	e095      	b.n	80140f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013fca:	7dfb      	ldrb	r3, [r7, #23]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	f000 8092 	beq.w	80140f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013fd2:	7dfb      	ldrb	r3, [r7, #23]
 8013fd4:	2b01      	cmp	r3, #1
 8013fd6:	d009      	beq.n	8013fec <etharp_find_entry+0x80>
 8013fd8:	7dfb      	ldrb	r3, [r7, #23]
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d806      	bhi.n	8013fec <etharp_find_entry+0x80>
 8013fde:	4b99      	ldr	r3, [pc, #612]	@ (8014244 <etharp_find_entry+0x2d8>)
 8013fe0:	f240 1223 	movw	r2, #291	@ 0x123
 8013fe4:	4998      	ldr	r1, [pc, #608]	@ (8014248 <etharp_find_entry+0x2dc>)
 8013fe6:	4899      	ldr	r0, [pc, #612]	@ (801424c <etharp_find_entry+0x2e0>)
 8013fe8:	f7ed f872 	bl	80010d0 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d020      	beq.n	8014034 <etharp_find_entry+0xc8>
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	6819      	ldr	r1, [r3, #0]
 8013ff6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ffa:	4891      	ldr	r0, [pc, #580]	@ (8014240 <etharp_find_entry+0x2d4>)
 8013ffc:	4613      	mov	r3, r2
 8013ffe:	005b      	lsls	r3, r3, #1
 8014000:	4413      	add	r3, r2
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	4403      	add	r3, r0
 8014006:	3304      	adds	r3, #4
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4299      	cmp	r1, r3
 801400c:	d112      	bne.n	8014034 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d00c      	beq.n	801402e <etharp_find_entry+0xc2>
 8014014:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014018:	4989      	ldr	r1, [pc, #548]	@ (8014240 <etharp_find_entry+0x2d4>)
 801401a:	4613      	mov	r3, r2
 801401c:	005b      	lsls	r3, r3, #1
 801401e:	4413      	add	r3, r2
 8014020:	00db      	lsls	r3, r3, #3
 8014022:	440b      	add	r3, r1
 8014024:	3308      	adds	r3, #8
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	429a      	cmp	r2, r3
 801402c:	d102      	bne.n	8014034 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801402e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014032:	e100      	b.n	8014236 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014034:	7dfb      	ldrb	r3, [r7, #23]
 8014036:	2b01      	cmp	r3, #1
 8014038:	d140      	bne.n	80140bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801403a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801403e:	4980      	ldr	r1, [pc, #512]	@ (8014240 <etharp_find_entry+0x2d4>)
 8014040:	4613      	mov	r3, r2
 8014042:	005b      	lsls	r3, r3, #1
 8014044:	4413      	add	r3, r2
 8014046:	00db      	lsls	r3, r3, #3
 8014048:	440b      	add	r3, r1
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d01a      	beq.n	8014086 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014050:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014054:	497a      	ldr	r1, [pc, #488]	@ (8014240 <etharp_find_entry+0x2d4>)
 8014056:	4613      	mov	r3, r2
 8014058:	005b      	lsls	r3, r3, #1
 801405a:	4413      	add	r3, r2
 801405c:	00db      	lsls	r3, r3, #3
 801405e:	440b      	add	r3, r1
 8014060:	3312      	adds	r3, #18
 8014062:	881b      	ldrh	r3, [r3, #0]
 8014064:	8bba      	ldrh	r2, [r7, #28]
 8014066:	429a      	cmp	r2, r3
 8014068:	d845      	bhi.n	80140f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801406a:	8c3b      	ldrh	r3, [r7, #32]
 801406c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801406e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014072:	4973      	ldr	r1, [pc, #460]	@ (8014240 <etharp_find_entry+0x2d4>)
 8014074:	4613      	mov	r3, r2
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	4413      	add	r3, r2
 801407a:	00db      	lsls	r3, r3, #3
 801407c:	440b      	add	r3, r1
 801407e:	3312      	adds	r3, #18
 8014080:	881b      	ldrh	r3, [r3, #0]
 8014082:	83bb      	strh	r3, [r7, #28]
 8014084:	e037      	b.n	80140f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014086:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801408a:	496d      	ldr	r1, [pc, #436]	@ (8014240 <etharp_find_entry+0x2d4>)
 801408c:	4613      	mov	r3, r2
 801408e:	005b      	lsls	r3, r3, #1
 8014090:	4413      	add	r3, r2
 8014092:	00db      	lsls	r3, r3, #3
 8014094:	440b      	add	r3, r1
 8014096:	3312      	adds	r3, #18
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	8b7a      	ldrh	r2, [r7, #26]
 801409c:	429a      	cmp	r2, r3
 801409e:	d82a      	bhi.n	80140f6 <etharp_find_entry+0x18a>
            old_pending = i;
 80140a0:	8c3b      	ldrh	r3, [r7, #32]
 80140a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80140a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140a8:	4965      	ldr	r1, [pc, #404]	@ (8014240 <etharp_find_entry+0x2d4>)
 80140aa:	4613      	mov	r3, r2
 80140ac:	005b      	lsls	r3, r3, #1
 80140ae:	4413      	add	r3, r2
 80140b0:	00db      	lsls	r3, r3, #3
 80140b2:	440b      	add	r3, r1
 80140b4:	3312      	adds	r3, #18
 80140b6:	881b      	ldrh	r3, [r3, #0]
 80140b8:	837b      	strh	r3, [r7, #26]
 80140ba:	e01c      	b.n	80140f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80140bc:	7dfb      	ldrb	r3, [r7, #23]
 80140be:	2b01      	cmp	r3, #1
 80140c0:	d919      	bls.n	80140f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80140c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140c6:	495e      	ldr	r1, [pc, #376]	@ (8014240 <etharp_find_entry+0x2d4>)
 80140c8:	4613      	mov	r3, r2
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	4413      	add	r3, r2
 80140ce:	00db      	lsls	r3, r3, #3
 80140d0:	440b      	add	r3, r1
 80140d2:	3312      	adds	r3, #18
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	8b3a      	ldrh	r2, [r7, #24]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d80c      	bhi.n	80140f6 <etharp_find_entry+0x18a>
            old_stable = i;
 80140dc:	8c3b      	ldrh	r3, [r7, #32]
 80140de:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80140e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140e4:	4956      	ldr	r1, [pc, #344]	@ (8014240 <etharp_find_entry+0x2d4>)
 80140e6:	4613      	mov	r3, r2
 80140e8:	005b      	lsls	r3, r3, #1
 80140ea:	4413      	add	r3, r2
 80140ec:	00db      	lsls	r3, r3, #3
 80140ee:	440b      	add	r3, r1
 80140f0:	3312      	adds	r3, #18
 80140f2:	881b      	ldrh	r3, [r3, #0]
 80140f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140f6:	8c3b      	ldrh	r3, [r7, #32]
 80140f8:	3301      	adds	r3, #1
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	843b      	strh	r3, [r7, #32]
 80140fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014102:	2b09      	cmp	r3, #9
 8014104:	f77f af4c 	ble.w	8013fa0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014108:	7afb      	ldrb	r3, [r7, #11]
 801410a:	f003 0302 	and.w	r3, r3, #2
 801410e:	2b00      	cmp	r3, #0
 8014110:	d108      	bne.n	8014124 <etharp_find_entry+0x1b8>
 8014112:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014116:	2b0a      	cmp	r3, #10
 8014118:	d107      	bne.n	801412a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801411a:	7afb      	ldrb	r3, [r7, #11]
 801411c:	f003 0301 	and.w	r3, r3, #1
 8014120:	2b00      	cmp	r3, #0
 8014122:	d102      	bne.n	801412a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014124:	f04f 33ff 	mov.w	r3, #4294967295
 8014128:	e085      	b.n	8014236 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801412a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801412e:	2b09      	cmp	r3, #9
 8014130:	dc02      	bgt.n	8014138 <etharp_find_entry+0x1cc>
    i = empty;
 8014132:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014134:	843b      	strh	r3, [r7, #32]
 8014136:	e039      	b.n	80141ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014138:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801413c:	2b09      	cmp	r3, #9
 801413e:	dc14      	bgt.n	801416a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014140:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014142:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014144:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014148:	493d      	ldr	r1, [pc, #244]	@ (8014240 <etharp_find_entry+0x2d4>)
 801414a:	4613      	mov	r3, r2
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	4413      	add	r3, r2
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	440b      	add	r3, r1
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d018      	beq.n	801418c <etharp_find_entry+0x220>
 801415a:	4b3a      	ldr	r3, [pc, #232]	@ (8014244 <etharp_find_entry+0x2d8>)
 801415c:	f240 126d 	movw	r2, #365	@ 0x16d
 8014160:	493b      	ldr	r1, [pc, #236]	@ (8014250 <etharp_find_entry+0x2e4>)
 8014162:	483a      	ldr	r0, [pc, #232]	@ (801424c <etharp_find_entry+0x2e0>)
 8014164:	f7ec ffb4 	bl	80010d0 <printf>
 8014168:	e010      	b.n	801418c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801416a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801416e:	2b09      	cmp	r3, #9
 8014170:	dc02      	bgt.n	8014178 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014172:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014174:	843b      	strh	r3, [r7, #32]
 8014176:	e009      	b.n	801418c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014178:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801417c:	2b09      	cmp	r3, #9
 801417e:	dc02      	bgt.n	8014186 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014180:	8bfb      	ldrh	r3, [r7, #30]
 8014182:	843b      	strh	r3, [r7, #32]
 8014184:	e002      	b.n	801418c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014186:	f04f 33ff 	mov.w	r3, #4294967295
 801418a:	e054      	b.n	8014236 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801418c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014190:	2b09      	cmp	r3, #9
 8014192:	dd06      	ble.n	80141a2 <etharp_find_entry+0x236>
 8014194:	4b2b      	ldr	r3, [pc, #172]	@ (8014244 <etharp_find_entry+0x2d8>)
 8014196:	f240 127f 	movw	r2, #383	@ 0x17f
 801419a:	492e      	ldr	r1, [pc, #184]	@ (8014254 <etharp_find_entry+0x2e8>)
 801419c:	482b      	ldr	r0, [pc, #172]	@ (801424c <etharp_find_entry+0x2e0>)
 801419e:	f7ec ff97 	bl	80010d0 <printf>
    etharp_free_entry(i);
 80141a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7ff fe06 	bl	8013db8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80141ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141b0:	2b09      	cmp	r3, #9
 80141b2:	dd06      	ble.n	80141c2 <etharp_find_entry+0x256>
 80141b4:	4b23      	ldr	r3, [pc, #140]	@ (8014244 <etharp_find_entry+0x2d8>)
 80141b6:	f240 1283 	movw	r2, #387	@ 0x183
 80141ba:	4926      	ldr	r1, [pc, #152]	@ (8014254 <etharp_find_entry+0x2e8>)
 80141bc:	4823      	ldr	r0, [pc, #140]	@ (801424c <etharp_find_entry+0x2e0>)
 80141be:	f7ec ff87 	bl	80010d0 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80141c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141c6:	491e      	ldr	r1, [pc, #120]	@ (8014240 <etharp_find_entry+0x2d4>)
 80141c8:	4613      	mov	r3, r2
 80141ca:	005b      	lsls	r3, r3, #1
 80141cc:	4413      	add	r3, r2
 80141ce:	00db      	lsls	r3, r3, #3
 80141d0:	440b      	add	r3, r1
 80141d2:	3314      	adds	r3, #20
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d006      	beq.n	80141e8 <etharp_find_entry+0x27c>
 80141da:	4b1a      	ldr	r3, [pc, #104]	@ (8014244 <etharp_find_entry+0x2d8>)
 80141dc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80141e0:	491d      	ldr	r1, [pc, #116]	@ (8014258 <etharp_find_entry+0x2ec>)
 80141e2:	481a      	ldr	r0, [pc, #104]	@ (801424c <etharp_find_entry+0x2e0>)
 80141e4:	f7ec ff74 	bl	80010d0 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d00b      	beq.n	8014206 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80141ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	6819      	ldr	r1, [r3, #0]
 80141f6:	4812      	ldr	r0, [pc, #72]	@ (8014240 <etharp_find_entry+0x2d4>)
 80141f8:	4613      	mov	r3, r2
 80141fa:	005b      	lsls	r3, r3, #1
 80141fc:	4413      	add	r3, r2
 80141fe:	00db      	lsls	r3, r3, #3
 8014200:	4403      	add	r3, r0
 8014202:	3304      	adds	r3, #4
 8014204:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014206:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801420a:	490d      	ldr	r1, [pc, #52]	@ (8014240 <etharp_find_entry+0x2d4>)
 801420c:	4613      	mov	r3, r2
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	4413      	add	r3, r2
 8014212:	00db      	lsls	r3, r3, #3
 8014214:	440b      	add	r3, r1
 8014216:	3312      	adds	r3, #18
 8014218:	2200      	movs	r2, #0
 801421a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801421c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014220:	4907      	ldr	r1, [pc, #28]	@ (8014240 <etharp_find_entry+0x2d4>)
 8014222:	4613      	mov	r3, r2
 8014224:	005b      	lsls	r3, r3, #1
 8014226:	4413      	add	r3, r2
 8014228:	00db      	lsls	r3, r3, #3
 801422a:	440b      	add	r3, r1
 801422c:	3308      	adds	r3, #8
 801422e:	687a      	ldr	r2, [r7, #4]
 8014230:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014232:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014236:	4618      	mov	r0, r3
 8014238:	3728      	adds	r7, #40	@ 0x28
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	2000c604 	.word	0x2000c604
 8014244:	0801a698 	.word	0x0801a698
 8014248:	0801a6d0 	.word	0x0801a6d0
 801424c:	0801a710 	.word	0x0801a710
 8014250:	0801a738 	.word	0x0801a738
 8014254:	0801a750 	.word	0x0801a750
 8014258:	0801a764 	.word	0x0801a764

0801425c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b088      	sub	sp, #32
 8014260:	af02      	add	r7, sp, #8
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	60b9      	str	r1, [r7, #8]
 8014266:	607a      	str	r2, [r7, #4]
 8014268:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014270:	2b06      	cmp	r3, #6
 8014272:	d006      	beq.n	8014282 <etharp_update_arp_entry+0x26>
 8014274:	4b48      	ldr	r3, [pc, #288]	@ (8014398 <etharp_update_arp_entry+0x13c>)
 8014276:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801427a:	4948      	ldr	r1, [pc, #288]	@ (801439c <etharp_update_arp_entry+0x140>)
 801427c:	4848      	ldr	r0, [pc, #288]	@ (80143a0 <etharp_update_arp_entry+0x144>)
 801427e:	f7ec ff27 	bl	80010d0 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d012      	beq.n	80142ae <etharp_update_arp_entry+0x52>
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d00e      	beq.n	80142ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	68f9      	ldr	r1, [r7, #12]
 8014296:	4618      	mov	r0, r3
 8014298:	f001 f8fe 	bl	8015498 <ip4_addr_isbroadcast_u32>
 801429c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d105      	bne.n	80142ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80142aa:	2be0      	cmp	r3, #224	@ 0xe0
 80142ac:	d102      	bne.n	80142b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80142ae:	f06f 030f 	mvn.w	r3, #15
 80142b2:	e06c      	b.n	801438e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80142b4:	78fb      	ldrb	r3, [r7, #3]
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	4619      	mov	r1, r3
 80142ba:	68b8      	ldr	r0, [r7, #8]
 80142bc:	f7ff fe56 	bl	8013f6c <etharp_find_entry>
 80142c0:	4603      	mov	r3, r0
 80142c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80142c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	da02      	bge.n	80142d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80142cc:	8afb      	ldrh	r3, [r7, #22]
 80142ce:	b25b      	sxtb	r3, r3
 80142d0:	e05d      	b.n	801438e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80142d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142d6:	4933      	ldr	r1, [pc, #204]	@ (80143a4 <etharp_update_arp_entry+0x148>)
 80142d8:	4613      	mov	r3, r2
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	4413      	add	r3, r2
 80142de:	00db      	lsls	r3, r3, #3
 80142e0:	440b      	add	r3, r1
 80142e2:	3314      	adds	r3, #20
 80142e4:	2202      	movs	r2, #2
 80142e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80142e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142ec:	492d      	ldr	r1, [pc, #180]	@ (80143a4 <etharp_update_arp_entry+0x148>)
 80142ee:	4613      	mov	r3, r2
 80142f0:	005b      	lsls	r3, r3, #1
 80142f2:	4413      	add	r3, r2
 80142f4:	00db      	lsls	r3, r3, #3
 80142f6:	440b      	add	r3, r1
 80142f8:	3308      	adds	r3, #8
 80142fa:	68fa      	ldr	r2, [r7, #12]
 80142fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80142fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014302:	4613      	mov	r3, r2
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	4413      	add	r3, r2
 8014308:	00db      	lsls	r3, r3, #3
 801430a:	3308      	adds	r3, #8
 801430c:	4a25      	ldr	r2, [pc, #148]	@ (80143a4 <etharp_update_arp_entry+0x148>)
 801430e:	4413      	add	r3, r2
 8014310:	3304      	adds	r3, #4
 8014312:	2206      	movs	r2, #6
 8014314:	6879      	ldr	r1, [r7, #4]
 8014316:	4618      	mov	r0, r3
 8014318:	f002 fc15 	bl	8016b46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801431c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014320:	4920      	ldr	r1, [pc, #128]	@ (80143a4 <etharp_update_arp_entry+0x148>)
 8014322:	4613      	mov	r3, r2
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	4413      	add	r3, r2
 8014328:	00db      	lsls	r3, r3, #3
 801432a:	440b      	add	r3, r1
 801432c:	3312      	adds	r3, #18
 801432e:	2200      	movs	r2, #0
 8014330:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014332:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014336:	491b      	ldr	r1, [pc, #108]	@ (80143a4 <etharp_update_arp_entry+0x148>)
 8014338:	4613      	mov	r3, r2
 801433a:	005b      	lsls	r3, r3, #1
 801433c:	4413      	add	r3, r2
 801433e:	00db      	lsls	r3, r3, #3
 8014340:	440b      	add	r3, r1
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d021      	beq.n	801438c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014348:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801434c:	4915      	ldr	r1, [pc, #84]	@ (80143a4 <etharp_update_arp_entry+0x148>)
 801434e:	4613      	mov	r3, r2
 8014350:	005b      	lsls	r3, r3, #1
 8014352:	4413      	add	r3, r2
 8014354:	00db      	lsls	r3, r3, #3
 8014356:	440b      	add	r3, r1
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801435c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014360:	4910      	ldr	r1, [pc, #64]	@ (80143a4 <etharp_update_arp_entry+0x148>)
 8014362:	4613      	mov	r3, r2
 8014364:	005b      	lsls	r3, r3, #1
 8014366:	4413      	add	r3, r2
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	440b      	add	r3, r1
 801436c:	2200      	movs	r2, #0
 801436e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014376:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6939      	ldr	r1, [r7, #16]
 8014380:	68f8      	ldr	r0, [r7, #12]
 8014382:	f001 ff97 	bl	80162b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014386:	6938      	ldr	r0, [r7, #16]
 8014388:	f7f8 fd5c 	bl	800ce44 <pbuf_free>
  }
  return ERR_OK;
 801438c:	2300      	movs	r3, #0
}
 801438e:	4618      	mov	r0, r3
 8014390:	3718      	adds	r7, #24
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	0801a698 	.word	0x0801a698
 801439c:	0801a790 	.word	0x0801a790
 80143a0:	0801a710 	.word	0x0801a710
 80143a4:	2000c604 	.word	0x2000c604

080143a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143b0:	2300      	movs	r3, #0
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	e01e      	b.n	80143f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80143b6:	4913      	ldr	r1, [pc, #76]	@ (8014404 <etharp_cleanup_netif+0x5c>)
 80143b8:	68fa      	ldr	r2, [r7, #12]
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	440b      	add	r3, r1
 80143c4:	3314      	adds	r3, #20
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80143ca:	7afb      	ldrb	r3, [r7, #11]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00e      	beq.n	80143ee <etharp_cleanup_netif+0x46>
 80143d0:	490c      	ldr	r1, [pc, #48]	@ (8014404 <etharp_cleanup_netif+0x5c>)
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	4613      	mov	r3, r2
 80143d6:	005b      	lsls	r3, r3, #1
 80143d8:	4413      	add	r3, r2
 80143da:	00db      	lsls	r3, r3, #3
 80143dc:	440b      	add	r3, r1
 80143de:	3308      	adds	r3, #8
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d102      	bne.n	80143ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7ff fce5 	bl	8013db8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	3301      	adds	r3, #1
 80143f2:	60fb      	str	r3, [r7, #12]
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	2b09      	cmp	r3, #9
 80143f8:	dddd      	ble.n	80143b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80143fa:	bf00      	nop
 80143fc:	bf00      	nop
 80143fe:	3710      	adds	r7, #16
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	2000c604 	.word	0x2000c604

08014408 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014408:	b5b0      	push	{r4, r5, r7, lr}
 801440a:	b08a      	sub	sp, #40	@ 0x28
 801440c:	af04      	add	r7, sp, #16
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d107      	bne.n	8014428 <etharp_input+0x20>
 8014418:	4b3d      	ldr	r3, [pc, #244]	@ (8014510 <etharp_input+0x108>)
 801441a:	f240 228a 	movw	r2, #650	@ 0x28a
 801441e:	493d      	ldr	r1, [pc, #244]	@ (8014514 <etharp_input+0x10c>)
 8014420:	483d      	ldr	r0, [pc, #244]	@ (8014518 <etharp_input+0x110>)
 8014422:	f7ec fe55 	bl	80010d0 <printf>
 8014426:	e06f      	b.n	8014508 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	881b      	ldrh	r3, [r3, #0]
 8014432:	b29b      	uxth	r3, r3
 8014434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014438:	d10c      	bne.n	8014454 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801443e:	2b06      	cmp	r3, #6
 8014440:	d108      	bne.n	8014454 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014446:	2b04      	cmp	r3, #4
 8014448:	d104      	bne.n	8014454 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	885b      	ldrh	r3, [r3, #2]
 801444e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014450:	2b08      	cmp	r3, #8
 8014452:	d003      	beq.n	801445c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f7f8 fcf5 	bl	800ce44 <pbuf_free>
    return;
 801445a:	e055      	b.n	8014508 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	330e      	adds	r3, #14
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	3318      	adds	r3, #24
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	3304      	adds	r3, #4
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d102      	bne.n	801447c <etharp_input+0x74>
    for_us = 0;
 8014476:	2300      	movs	r3, #0
 8014478:	75fb      	strb	r3, [r7, #23]
 801447a:	e009      	b.n	8014490 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	3304      	adds	r3, #4
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	429a      	cmp	r2, r3
 8014486:	bf0c      	ite	eq
 8014488:	2301      	moveq	r3, #1
 801448a:	2300      	movne	r3, #0
 801448c:	b2db      	uxtb	r3, r3
 801448e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	f103 0208 	add.w	r2, r3, #8
 8014496:	7dfb      	ldrb	r3, [r7, #23]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d001      	beq.n	80144a0 <etharp_input+0x98>
 801449c:	2301      	movs	r3, #1
 801449e:	e000      	b.n	80144a2 <etharp_input+0x9a>
 80144a0:	2302      	movs	r3, #2
 80144a2:	f107 010c 	add.w	r1, r7, #12
 80144a6:	6838      	ldr	r0, [r7, #0]
 80144a8:	f7ff fed8 	bl	801425c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	88db      	ldrh	r3, [r3, #6]
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144b6:	d003      	beq.n	80144c0 <etharp_input+0xb8>
 80144b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144bc:	d01e      	beq.n	80144fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80144be:	e020      	b.n	8014502 <etharp_input+0xfa>
      if (for_us) {
 80144c0:	7dfb      	ldrb	r3, [r7, #23]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d01c      	beq.n	8014500 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80144dc:	693a      	ldr	r2, [r7, #16]
 80144de:	3208      	adds	r2, #8
        etharp_raw(netif,
 80144e0:	2102      	movs	r1, #2
 80144e2:	9103      	str	r1, [sp, #12]
 80144e4:	f107 010c 	add.w	r1, r7, #12
 80144e8:	9102      	str	r1, [sp, #8]
 80144ea:	9201      	str	r2, [sp, #4]
 80144ec:	9300      	str	r3, [sp, #0]
 80144ee:	462b      	mov	r3, r5
 80144f0:	4622      	mov	r2, r4
 80144f2:	4601      	mov	r1, r0
 80144f4:	6838      	ldr	r0, [r7, #0]
 80144f6:	f000 faeb 	bl	8014ad0 <etharp_raw>
      break;
 80144fa:	e001      	b.n	8014500 <etharp_input+0xf8>
      break;
 80144fc:	bf00      	nop
 80144fe:	e000      	b.n	8014502 <etharp_input+0xfa>
      break;
 8014500:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7f8 fc9e 	bl	800ce44 <pbuf_free>
}
 8014508:	3718      	adds	r7, #24
 801450a:	46bd      	mov	sp, r7
 801450c:	bdb0      	pop	{r4, r5, r7, pc}
 801450e:	bf00      	nop
 8014510:	0801a698 	.word	0x0801a698
 8014514:	0801a7e8 	.word	0x0801a7e8
 8014518:	0801a710 	.word	0x0801a710

0801451c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b086      	sub	sp, #24
 8014520:	af02      	add	r7, sp, #8
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	4613      	mov	r3, r2
 8014528:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801452a:	79fa      	ldrb	r2, [r7, #7]
 801452c:	4944      	ldr	r1, [pc, #272]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 801452e:	4613      	mov	r3, r2
 8014530:	005b      	lsls	r3, r3, #1
 8014532:	4413      	add	r3, r2
 8014534:	00db      	lsls	r3, r3, #3
 8014536:	440b      	add	r3, r1
 8014538:	3314      	adds	r3, #20
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	2b01      	cmp	r3, #1
 801453e:	d806      	bhi.n	801454e <etharp_output_to_arp_index+0x32>
 8014540:	4b40      	ldr	r3, [pc, #256]	@ (8014644 <etharp_output_to_arp_index+0x128>)
 8014542:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014546:	4940      	ldr	r1, [pc, #256]	@ (8014648 <etharp_output_to_arp_index+0x12c>)
 8014548:	4840      	ldr	r0, [pc, #256]	@ (801464c <etharp_output_to_arp_index+0x130>)
 801454a:	f7ec fdc1 	bl	80010d0 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801454e:	79fa      	ldrb	r2, [r7, #7]
 8014550:	493b      	ldr	r1, [pc, #236]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 8014552:	4613      	mov	r3, r2
 8014554:	005b      	lsls	r3, r3, #1
 8014556:	4413      	add	r3, r2
 8014558:	00db      	lsls	r3, r3, #3
 801455a:	440b      	add	r3, r1
 801455c:	3314      	adds	r3, #20
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	2b02      	cmp	r3, #2
 8014562:	d153      	bne.n	801460c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014564:	79fa      	ldrb	r2, [r7, #7]
 8014566:	4936      	ldr	r1, [pc, #216]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 8014568:	4613      	mov	r3, r2
 801456a:	005b      	lsls	r3, r3, #1
 801456c:	4413      	add	r3, r2
 801456e:	00db      	lsls	r3, r3, #3
 8014570:	440b      	add	r3, r1
 8014572:	3312      	adds	r3, #18
 8014574:	881b      	ldrh	r3, [r3, #0]
 8014576:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801457a:	d919      	bls.n	80145b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801457c:	79fa      	ldrb	r2, [r7, #7]
 801457e:	4613      	mov	r3, r2
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	4413      	add	r3, r2
 8014584:	00db      	lsls	r3, r3, #3
 8014586:	4a2e      	ldr	r2, [pc, #184]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 8014588:	4413      	add	r3, r2
 801458a:	3304      	adds	r3, #4
 801458c:	4619      	mov	r1, r3
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f000 fb4c 	bl	8014c2c <etharp_request>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d138      	bne.n	801460c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801459a:	79fa      	ldrb	r2, [r7, #7]
 801459c:	4928      	ldr	r1, [pc, #160]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 801459e:	4613      	mov	r3, r2
 80145a0:	005b      	lsls	r3, r3, #1
 80145a2:	4413      	add	r3, r2
 80145a4:	00db      	lsls	r3, r3, #3
 80145a6:	440b      	add	r3, r1
 80145a8:	3314      	adds	r3, #20
 80145aa:	2203      	movs	r2, #3
 80145ac:	701a      	strb	r2, [r3, #0]
 80145ae:	e02d      	b.n	801460c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80145b0:	79fa      	ldrb	r2, [r7, #7]
 80145b2:	4923      	ldr	r1, [pc, #140]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 80145b4:	4613      	mov	r3, r2
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	4413      	add	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	440b      	add	r3, r1
 80145be:	3312      	adds	r3, #18
 80145c0:	881b      	ldrh	r3, [r3, #0]
 80145c2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80145c6:	d321      	bcc.n	801460c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80145c8:	79fa      	ldrb	r2, [r7, #7]
 80145ca:	4613      	mov	r3, r2
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	4413      	add	r3, r2
 80145d0:	00db      	lsls	r3, r3, #3
 80145d2:	4a1b      	ldr	r2, [pc, #108]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 80145d4:	4413      	add	r3, r2
 80145d6:	1d19      	adds	r1, r3, #4
 80145d8:	79fa      	ldrb	r2, [r7, #7]
 80145da:	4613      	mov	r3, r2
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	4413      	add	r3, r2
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	3308      	adds	r3, #8
 80145e4:	4a16      	ldr	r2, [pc, #88]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 80145e6:	4413      	add	r3, r2
 80145e8:	3304      	adds	r3, #4
 80145ea:	461a      	mov	r2, r3
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	f000 fafb 	bl	8014be8 <etharp_request_dst>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d109      	bne.n	801460c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80145f8:	79fa      	ldrb	r2, [r7, #7]
 80145fa:	4911      	ldr	r1, [pc, #68]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 80145fc:	4613      	mov	r3, r2
 80145fe:	005b      	lsls	r3, r3, #1
 8014600:	4413      	add	r3, r2
 8014602:	00db      	lsls	r3, r3, #3
 8014604:	440b      	add	r3, r1
 8014606:	3314      	adds	r3, #20
 8014608:	2203      	movs	r2, #3
 801460a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014612:	79fa      	ldrb	r2, [r7, #7]
 8014614:	4613      	mov	r3, r2
 8014616:	005b      	lsls	r3, r3, #1
 8014618:	4413      	add	r3, r2
 801461a:	00db      	lsls	r3, r3, #3
 801461c:	3308      	adds	r3, #8
 801461e:	4a08      	ldr	r2, [pc, #32]	@ (8014640 <etharp_output_to_arp_index+0x124>)
 8014620:	4413      	add	r3, r2
 8014622:	3304      	adds	r3, #4
 8014624:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014628:	9200      	str	r2, [sp, #0]
 801462a:	460a      	mov	r2, r1
 801462c:	68b9      	ldr	r1, [r7, #8]
 801462e:	68f8      	ldr	r0, [r7, #12]
 8014630:	f001 fe40 	bl	80162b4 <ethernet_output>
 8014634:	4603      	mov	r3, r0
}
 8014636:	4618      	mov	r0, r3
 8014638:	3710      	adds	r7, #16
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}
 801463e:	bf00      	nop
 8014640:	2000c604 	.word	0x2000c604
 8014644:	0801a698 	.word	0x0801a698
 8014648:	0801a808 	.word	0x0801a808
 801464c:	0801a710 	.word	0x0801a710

08014650 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b08a      	sub	sp, #40	@ 0x28
 8014654:	af02      	add	r7, sp, #8
 8014656:	60f8      	str	r0, [r7, #12]
 8014658:	60b9      	str	r1, [r7, #8]
 801465a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d106      	bne.n	8014674 <etharp_output+0x24>
 8014666:	4b73      	ldr	r3, [pc, #460]	@ (8014834 <etharp_output+0x1e4>)
 8014668:	f240 321e 	movw	r2, #798	@ 0x31e
 801466c:	4972      	ldr	r1, [pc, #456]	@ (8014838 <etharp_output+0x1e8>)
 801466e:	4873      	ldr	r0, [pc, #460]	@ (801483c <etharp_output+0x1ec>)
 8014670:	f7ec fd2e 	bl	80010d0 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d106      	bne.n	8014688 <etharp_output+0x38>
 801467a:	4b6e      	ldr	r3, [pc, #440]	@ (8014834 <etharp_output+0x1e4>)
 801467c:	f240 321f 	movw	r2, #799	@ 0x31f
 8014680:	496f      	ldr	r1, [pc, #444]	@ (8014840 <etharp_output+0x1f0>)
 8014682:	486e      	ldr	r0, [pc, #440]	@ (801483c <etharp_output+0x1ec>)
 8014684:	f7ec fd24 	bl	80010d0 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d106      	bne.n	801469c <etharp_output+0x4c>
 801468e:	4b69      	ldr	r3, [pc, #420]	@ (8014834 <etharp_output+0x1e4>)
 8014690:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014694:	496b      	ldr	r1, [pc, #428]	@ (8014844 <etharp_output+0x1f4>)
 8014696:	4869      	ldr	r0, [pc, #420]	@ (801483c <etharp_output+0x1ec>)
 8014698:	f7ec fd1a 	bl	80010d0 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	68f9      	ldr	r1, [r7, #12]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f000 fef8 	bl	8015498 <ip4_addr_isbroadcast_u32>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d002      	beq.n	80146b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80146ae:	4b66      	ldr	r3, [pc, #408]	@ (8014848 <etharp_output+0x1f8>)
 80146b0:	61fb      	str	r3, [r7, #28]
 80146b2:	e0af      	b.n	8014814 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80146bc:	2be0      	cmp	r3, #224	@ 0xe0
 80146be:	d118      	bne.n	80146f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80146c0:	2301      	movs	r3, #1
 80146c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80146c4:	2300      	movs	r3, #0
 80146c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80146c8:	235e      	movs	r3, #94	@ 0x5e
 80146ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	3301      	adds	r3, #1
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80146d6:	b2db      	uxtb	r3, r3
 80146d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	3302      	adds	r3, #2
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	3303      	adds	r3, #3
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80146ea:	f107 0310 	add.w	r3, r7, #16
 80146ee:	61fb      	str	r3, [r7, #28]
 80146f0:	e090      	b.n	8014814 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681a      	ldr	r2, [r3, #0]
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	3304      	adds	r3, #4
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	405a      	eors	r2, r3
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	3308      	adds	r3, #8
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4013      	ands	r3, r2
 8014706:	2b00      	cmp	r3, #0
 8014708:	d012      	beq.n	8014730 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014710:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014714:	4293      	cmp	r3, r2
 8014716:	d00b      	beq.n	8014730 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	330c      	adds	r3, #12
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d003      	beq.n	801472a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	330c      	adds	r3, #12
 8014726:	61bb      	str	r3, [r7, #24]
 8014728:	e002      	b.n	8014730 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801472a:	f06f 0303 	mvn.w	r3, #3
 801472e:	e07d      	b.n	801482c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014730:	4b46      	ldr	r3, [pc, #280]	@ (801484c <etharp_output+0x1fc>)
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	4619      	mov	r1, r3
 8014736:	4a46      	ldr	r2, [pc, #280]	@ (8014850 <etharp_output+0x200>)
 8014738:	460b      	mov	r3, r1
 801473a:	005b      	lsls	r3, r3, #1
 801473c:	440b      	add	r3, r1
 801473e:	00db      	lsls	r3, r3, #3
 8014740:	4413      	add	r3, r2
 8014742:	3314      	adds	r3, #20
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	2b01      	cmp	r3, #1
 8014748:	d925      	bls.n	8014796 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801474a:	4b40      	ldr	r3, [pc, #256]	@ (801484c <etharp_output+0x1fc>)
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	4619      	mov	r1, r3
 8014750:	4a3f      	ldr	r2, [pc, #252]	@ (8014850 <etharp_output+0x200>)
 8014752:	460b      	mov	r3, r1
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	440b      	add	r3, r1
 8014758:	00db      	lsls	r3, r3, #3
 801475a:	4413      	add	r3, r2
 801475c:	3308      	adds	r3, #8
 801475e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	429a      	cmp	r2, r3
 8014764:	d117      	bne.n	8014796 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	681a      	ldr	r2, [r3, #0]
 801476a:	4b38      	ldr	r3, [pc, #224]	@ (801484c <etharp_output+0x1fc>)
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	4618      	mov	r0, r3
 8014770:	4937      	ldr	r1, [pc, #220]	@ (8014850 <etharp_output+0x200>)
 8014772:	4603      	mov	r3, r0
 8014774:	005b      	lsls	r3, r3, #1
 8014776:	4403      	add	r3, r0
 8014778:	00db      	lsls	r3, r3, #3
 801477a:	440b      	add	r3, r1
 801477c:	3304      	adds	r3, #4
 801477e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014780:	429a      	cmp	r2, r3
 8014782:	d108      	bne.n	8014796 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014784:	4b31      	ldr	r3, [pc, #196]	@ (801484c <etharp_output+0x1fc>)
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	461a      	mov	r2, r3
 801478a:	68b9      	ldr	r1, [r7, #8]
 801478c:	68f8      	ldr	r0, [r7, #12]
 801478e:	f7ff fec5 	bl	801451c <etharp_output_to_arp_index>
 8014792:	4603      	mov	r3, r0
 8014794:	e04a      	b.n	801482c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014796:	2300      	movs	r3, #0
 8014798:	75fb      	strb	r3, [r7, #23]
 801479a:	e031      	b.n	8014800 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801479c:	7dfa      	ldrb	r2, [r7, #23]
 801479e:	492c      	ldr	r1, [pc, #176]	@ (8014850 <etharp_output+0x200>)
 80147a0:	4613      	mov	r3, r2
 80147a2:	005b      	lsls	r3, r3, #1
 80147a4:	4413      	add	r3, r2
 80147a6:	00db      	lsls	r3, r3, #3
 80147a8:	440b      	add	r3, r1
 80147aa:	3314      	adds	r3, #20
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d923      	bls.n	80147fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80147b2:	7dfa      	ldrb	r2, [r7, #23]
 80147b4:	4926      	ldr	r1, [pc, #152]	@ (8014850 <etharp_output+0x200>)
 80147b6:	4613      	mov	r3, r2
 80147b8:	005b      	lsls	r3, r3, #1
 80147ba:	4413      	add	r3, r2
 80147bc:	00db      	lsls	r3, r3, #3
 80147be:	440b      	add	r3, r1
 80147c0:	3308      	adds	r3, #8
 80147c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80147c4:	68fa      	ldr	r2, [r7, #12]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d117      	bne.n	80147fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	6819      	ldr	r1, [r3, #0]
 80147ce:	7dfa      	ldrb	r2, [r7, #23]
 80147d0:	481f      	ldr	r0, [pc, #124]	@ (8014850 <etharp_output+0x200>)
 80147d2:	4613      	mov	r3, r2
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	4413      	add	r3, r2
 80147d8:	00db      	lsls	r3, r3, #3
 80147da:	4403      	add	r3, r0
 80147dc:	3304      	adds	r3, #4
 80147de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80147e0:	4299      	cmp	r1, r3
 80147e2:	d10a      	bne.n	80147fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80147e4:	4a19      	ldr	r2, [pc, #100]	@ (801484c <etharp_output+0x1fc>)
 80147e6:	7dfb      	ldrb	r3, [r7, #23]
 80147e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80147ea:	7dfb      	ldrb	r3, [r7, #23]
 80147ec:	461a      	mov	r2, r3
 80147ee:	68b9      	ldr	r1, [r7, #8]
 80147f0:	68f8      	ldr	r0, [r7, #12]
 80147f2:	f7ff fe93 	bl	801451c <etharp_output_to_arp_index>
 80147f6:	4603      	mov	r3, r0
 80147f8:	e018      	b.n	801482c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80147fa:	7dfb      	ldrb	r3, [r7, #23]
 80147fc:	3301      	adds	r3, #1
 80147fe:	75fb      	strb	r3, [r7, #23]
 8014800:	7dfb      	ldrb	r3, [r7, #23]
 8014802:	2b09      	cmp	r3, #9
 8014804:	d9ca      	bls.n	801479c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014806:	68ba      	ldr	r2, [r7, #8]
 8014808:	69b9      	ldr	r1, [r7, #24]
 801480a:	68f8      	ldr	r0, [r7, #12]
 801480c:	f000 f822 	bl	8014854 <etharp_query>
 8014810:	4603      	mov	r3, r0
 8014812:	e00b      	b.n	801482c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801481a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	68b9      	ldr	r1, [r7, #8]
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f001 fd45 	bl	80162b4 <ethernet_output>
 801482a:	4603      	mov	r3, r0
}
 801482c:	4618      	mov	r0, r3
 801482e:	3720      	adds	r7, #32
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}
 8014834:	0801a698 	.word	0x0801a698
 8014838:	0801a7e8 	.word	0x0801a7e8
 801483c:	0801a710 	.word	0x0801a710
 8014840:	0801a838 	.word	0x0801a838
 8014844:	0801a7d8 	.word	0x0801a7d8
 8014848:	0801ae98 	.word	0x0801ae98
 801484c:	2000c6f4 	.word	0x2000c6f4
 8014850:	2000c604 	.word	0x2000c604

08014854 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b08c      	sub	sp, #48	@ 0x30
 8014858:	af02      	add	r7, sp, #8
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	3326      	adds	r3, #38	@ 0x26
 8014864:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014866:	23ff      	movs	r3, #255	@ 0xff
 8014868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801486c:	2300      	movs	r3, #0
 801486e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	68f9      	ldr	r1, [r7, #12]
 8014876:	4618      	mov	r0, r3
 8014878:	f000 fe0e 	bl	8015498 <ip4_addr_isbroadcast_u32>
 801487c:	4603      	mov	r3, r0
 801487e:	2b00      	cmp	r3, #0
 8014880:	d10c      	bne.n	801489c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801488a:	2be0      	cmp	r3, #224	@ 0xe0
 801488c:	d006      	beq.n	801489c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d003      	beq.n	801489c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d102      	bne.n	80148a2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801489c:	f06f 030f 	mvn.w	r3, #15
 80148a0:	e101      	b.n	8014aa6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80148a2:	68fa      	ldr	r2, [r7, #12]
 80148a4:	2101      	movs	r1, #1
 80148a6:	68b8      	ldr	r0, [r7, #8]
 80148a8:	f7ff fb60 	bl	8013f6c <etharp_find_entry>
 80148ac:	4603      	mov	r3, r0
 80148ae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80148b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	da02      	bge.n	80148be <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80148b8:	8a7b      	ldrh	r3, [r7, #18]
 80148ba:	b25b      	sxtb	r3, r3
 80148bc:	e0f3      	b.n	8014aa6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80148be:	8a7b      	ldrh	r3, [r7, #18]
 80148c0:	2b7e      	cmp	r3, #126	@ 0x7e
 80148c2:	d906      	bls.n	80148d2 <etharp_query+0x7e>
 80148c4:	4b7a      	ldr	r3, [pc, #488]	@ (8014ab0 <etharp_query+0x25c>)
 80148c6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80148ca:	497a      	ldr	r1, [pc, #488]	@ (8014ab4 <etharp_query+0x260>)
 80148cc:	487a      	ldr	r0, [pc, #488]	@ (8014ab8 <etharp_query+0x264>)
 80148ce:	f7ec fbff 	bl	80010d0 <printf>
  i = (netif_addr_idx_t)i_err;
 80148d2:	8a7b      	ldrh	r3, [r7, #18]
 80148d4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80148d6:	7c7a      	ldrb	r2, [r7, #17]
 80148d8:	4978      	ldr	r1, [pc, #480]	@ (8014abc <etharp_query+0x268>)
 80148da:	4613      	mov	r3, r2
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	4413      	add	r3, r2
 80148e0:	00db      	lsls	r3, r3, #3
 80148e2:	440b      	add	r3, r1
 80148e4:	3314      	adds	r3, #20
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d115      	bne.n	8014918 <etharp_query+0xc4>
    is_new_entry = 1;
 80148ec:	2301      	movs	r3, #1
 80148ee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80148f0:	7c7a      	ldrb	r2, [r7, #17]
 80148f2:	4972      	ldr	r1, [pc, #456]	@ (8014abc <etharp_query+0x268>)
 80148f4:	4613      	mov	r3, r2
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	4413      	add	r3, r2
 80148fa:	00db      	lsls	r3, r3, #3
 80148fc:	440b      	add	r3, r1
 80148fe:	3314      	adds	r3, #20
 8014900:	2201      	movs	r2, #1
 8014902:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014904:	7c7a      	ldrb	r2, [r7, #17]
 8014906:	496d      	ldr	r1, [pc, #436]	@ (8014abc <etharp_query+0x268>)
 8014908:	4613      	mov	r3, r2
 801490a:	005b      	lsls	r3, r3, #1
 801490c:	4413      	add	r3, r2
 801490e:	00db      	lsls	r3, r3, #3
 8014910:	440b      	add	r3, r1
 8014912:	3308      	adds	r3, #8
 8014914:	68fa      	ldr	r2, [r7, #12]
 8014916:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014918:	7c7a      	ldrb	r2, [r7, #17]
 801491a:	4968      	ldr	r1, [pc, #416]	@ (8014abc <etharp_query+0x268>)
 801491c:	4613      	mov	r3, r2
 801491e:	005b      	lsls	r3, r3, #1
 8014920:	4413      	add	r3, r2
 8014922:	00db      	lsls	r3, r3, #3
 8014924:	440b      	add	r3, r1
 8014926:	3314      	adds	r3, #20
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	2b01      	cmp	r3, #1
 801492c:	d011      	beq.n	8014952 <etharp_query+0xfe>
 801492e:	7c7a      	ldrb	r2, [r7, #17]
 8014930:	4962      	ldr	r1, [pc, #392]	@ (8014abc <etharp_query+0x268>)
 8014932:	4613      	mov	r3, r2
 8014934:	005b      	lsls	r3, r3, #1
 8014936:	4413      	add	r3, r2
 8014938:	00db      	lsls	r3, r3, #3
 801493a:	440b      	add	r3, r1
 801493c:	3314      	adds	r3, #20
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	2b01      	cmp	r3, #1
 8014942:	d806      	bhi.n	8014952 <etharp_query+0xfe>
 8014944:	4b5a      	ldr	r3, [pc, #360]	@ (8014ab0 <etharp_query+0x25c>)
 8014946:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801494a:	495d      	ldr	r1, [pc, #372]	@ (8014ac0 <etharp_query+0x26c>)
 801494c:	485a      	ldr	r0, [pc, #360]	@ (8014ab8 <etharp_query+0x264>)
 801494e:	f7ec fbbf 	bl	80010d0 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d102      	bne.n	801495e <etharp_query+0x10a>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d10c      	bne.n	8014978 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801495e:	68b9      	ldr	r1, [r7, #8]
 8014960:	68f8      	ldr	r0, [r7, #12]
 8014962:	f000 f963 	bl	8014c2c <etharp_request>
 8014966:	4603      	mov	r3, r0
 8014968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d102      	bne.n	8014978 <etharp_query+0x124>
      return result;
 8014972:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014976:	e096      	b.n	8014aa6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d106      	bne.n	801498c <etharp_query+0x138>
 801497e:	4b4c      	ldr	r3, [pc, #304]	@ (8014ab0 <etharp_query+0x25c>)
 8014980:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014984:	494f      	ldr	r1, [pc, #316]	@ (8014ac4 <etharp_query+0x270>)
 8014986:	484c      	ldr	r0, [pc, #304]	@ (8014ab8 <etharp_query+0x264>)
 8014988:	f7ec fba2 	bl	80010d0 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801498c:	7c7a      	ldrb	r2, [r7, #17]
 801498e:	494b      	ldr	r1, [pc, #300]	@ (8014abc <etharp_query+0x268>)
 8014990:	4613      	mov	r3, r2
 8014992:	005b      	lsls	r3, r3, #1
 8014994:	4413      	add	r3, r2
 8014996:	00db      	lsls	r3, r3, #3
 8014998:	440b      	add	r3, r1
 801499a:	3314      	adds	r3, #20
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d917      	bls.n	80149d2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80149a2:	4a49      	ldr	r2, [pc, #292]	@ (8014ac8 <etharp_query+0x274>)
 80149a4:	7c7b      	ldrb	r3, [r7, #17]
 80149a6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80149a8:	7c7a      	ldrb	r2, [r7, #17]
 80149aa:	4613      	mov	r3, r2
 80149ac:	005b      	lsls	r3, r3, #1
 80149ae:	4413      	add	r3, r2
 80149b0:	00db      	lsls	r3, r3, #3
 80149b2:	3308      	adds	r3, #8
 80149b4:	4a41      	ldr	r2, [pc, #260]	@ (8014abc <etharp_query+0x268>)
 80149b6:	4413      	add	r3, r2
 80149b8:	3304      	adds	r3, #4
 80149ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80149be:	9200      	str	r2, [sp, #0]
 80149c0:	697a      	ldr	r2, [r7, #20]
 80149c2:	6879      	ldr	r1, [r7, #4]
 80149c4:	68f8      	ldr	r0, [r7, #12]
 80149c6:	f001 fc75 	bl	80162b4 <ethernet_output>
 80149ca:	4603      	mov	r3, r0
 80149cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80149d0:	e067      	b.n	8014aa2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80149d2:	7c7a      	ldrb	r2, [r7, #17]
 80149d4:	4939      	ldr	r1, [pc, #228]	@ (8014abc <etharp_query+0x268>)
 80149d6:	4613      	mov	r3, r2
 80149d8:	005b      	lsls	r3, r3, #1
 80149da:	4413      	add	r3, r2
 80149dc:	00db      	lsls	r3, r3, #3
 80149de:	440b      	add	r3, r1
 80149e0:	3314      	adds	r3, #20
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	2b01      	cmp	r3, #1
 80149e6:	d15c      	bne.n	8014aa2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80149e8:	2300      	movs	r3, #0
 80149ea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80149f0:	e01c      	b.n	8014a2c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80149f2:	69fb      	ldr	r3, [r7, #28]
 80149f4:	895a      	ldrh	r2, [r3, #10]
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	891b      	ldrh	r3, [r3, #8]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d10a      	bne.n	8014a14 <etharp_query+0x1c0>
 80149fe:	69fb      	ldr	r3, [r7, #28]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d006      	beq.n	8014a14 <etharp_query+0x1c0>
 8014a06:	4b2a      	ldr	r3, [pc, #168]	@ (8014ab0 <etharp_query+0x25c>)
 8014a08:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014a0c:	492f      	ldr	r1, [pc, #188]	@ (8014acc <etharp_query+0x278>)
 8014a0e:	482a      	ldr	r0, [pc, #168]	@ (8014ab8 <etharp_query+0x264>)
 8014a10:	f7ec fb5e 	bl	80010d0 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 8014a14:	69fb      	ldr	r3, [r7, #28]
 8014a16:	7b1b      	ldrb	r3, [r3, #12]
 8014a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d002      	beq.n	8014a26 <etharp_query+0x1d2>
        copy_needed = 1;
 8014a20:	2301      	movs	r3, #1
 8014a22:	61bb      	str	r3, [r7, #24]
        break;
 8014a24:	e005      	b.n	8014a32 <etharp_query+0x1de>
      }
      p = p->next;
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1df      	bne.n	80149f2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014a32:	69bb      	ldr	r3, [r7, #24]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d007      	beq.n	8014a48 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014a38:	687a      	ldr	r2, [r7, #4]
 8014a3a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014a3e:	200e      	movs	r0, #14
 8014a40:	f7f8 fc68 	bl	800d314 <pbuf_clone>
 8014a44:	61f8      	str	r0, [r7, #28]
 8014a46:	e004      	b.n	8014a52 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014a4c:	69f8      	ldr	r0, [r7, #28]
 8014a4e:	f7f8 fa9f 	bl	800cf90 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014a52:	69fb      	ldr	r3, [r7, #28]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d021      	beq.n	8014a9c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014a58:	7c7a      	ldrb	r2, [r7, #17]
 8014a5a:	4918      	ldr	r1, [pc, #96]	@ (8014abc <etharp_query+0x268>)
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	4413      	add	r3, r2
 8014a62:	00db      	lsls	r3, r3, #3
 8014a64:	440b      	add	r3, r1
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d00a      	beq.n	8014a82 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014a6c:	7c7a      	ldrb	r2, [r7, #17]
 8014a6e:	4913      	ldr	r1, [pc, #76]	@ (8014abc <etharp_query+0x268>)
 8014a70:	4613      	mov	r3, r2
 8014a72:	005b      	lsls	r3, r3, #1
 8014a74:	4413      	add	r3, r2
 8014a76:	00db      	lsls	r3, r3, #3
 8014a78:	440b      	add	r3, r1
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7f8 f9e1 	bl	800ce44 <pbuf_free>
      }
      arp_table[i].q = p;
 8014a82:	7c7a      	ldrb	r2, [r7, #17]
 8014a84:	490d      	ldr	r1, [pc, #52]	@ (8014abc <etharp_query+0x268>)
 8014a86:	4613      	mov	r3, r2
 8014a88:	005b      	lsls	r3, r3, #1
 8014a8a:	4413      	add	r3, r2
 8014a8c:	00db      	lsls	r3, r3, #3
 8014a8e:	440b      	add	r3, r1
 8014a90:	69fa      	ldr	r2, [r7, #28]
 8014a92:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014a94:	2300      	movs	r3, #0
 8014a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014a9a:	e002      	b.n	8014aa2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014a9c:	23ff      	movs	r3, #255	@ 0xff
 8014a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014aa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3728      	adds	r7, #40	@ 0x28
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	0801a698 	.word	0x0801a698
 8014ab4:	0801a844 	.word	0x0801a844
 8014ab8:	0801a710 	.word	0x0801a710
 8014abc:	2000c604 	.word	0x2000c604
 8014ac0:	0801a854 	.word	0x0801a854
 8014ac4:	0801a838 	.word	0x0801a838
 8014ac8:	2000c6f4 	.word	0x2000c6f4
 8014acc:	0801a87c 	.word	0x0801a87c

08014ad0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b08a      	sub	sp, #40	@ 0x28
 8014ad4:	af02      	add	r7, sp, #8
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
 8014adc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d106      	bne.n	8014af6 <etharp_raw+0x26>
 8014ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8014bd4 <etharp_raw+0x104>)
 8014aea:	f240 4257 	movw	r2, #1111	@ 0x457
 8014aee:	493a      	ldr	r1, [pc, #232]	@ (8014bd8 <etharp_raw+0x108>)
 8014af0:	483a      	ldr	r0, [pc, #232]	@ (8014bdc <etharp_raw+0x10c>)
 8014af2:	f7ec faed 	bl	80010d0 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014af6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014afa:	211c      	movs	r1, #28
 8014afc:	200e      	movs	r0, #14
 8014afe:	f7f7 febd 	bl	800c87c <pbuf_alloc>
 8014b02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014b04:	69bb      	ldr	r3, [r7, #24]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d102      	bne.n	8014b10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b0e:	e05d      	b.n	8014bcc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014b10:	69bb      	ldr	r3, [r7, #24]
 8014b12:	895b      	ldrh	r3, [r3, #10]
 8014b14:	2b1b      	cmp	r3, #27
 8014b16:	d806      	bhi.n	8014b26 <etharp_raw+0x56>
 8014b18:	4b2e      	ldr	r3, [pc, #184]	@ (8014bd4 <etharp_raw+0x104>)
 8014b1a:	f240 4262 	movw	r2, #1122	@ 0x462
 8014b1e:	4930      	ldr	r1, [pc, #192]	@ (8014be0 <etharp_raw+0x110>)
 8014b20:	482e      	ldr	r0, [pc, #184]	@ (8014bdc <etharp_raw+0x10c>)
 8014b22:	f7ec fad5 	bl	80010d0 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014b26:	69bb      	ldr	r3, [r7, #24]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014b2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7f6 fd96 	bl	800b660 <lwip_htons>
 8014b34:	4603      	mov	r3, r0
 8014b36:	461a      	mov	r2, r3
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014b42:	2b06      	cmp	r3, #6
 8014b44:	d006      	beq.n	8014b54 <etharp_raw+0x84>
 8014b46:	4b23      	ldr	r3, [pc, #140]	@ (8014bd4 <etharp_raw+0x104>)
 8014b48:	f240 4269 	movw	r2, #1129	@ 0x469
 8014b4c:	4925      	ldr	r1, [pc, #148]	@ (8014be4 <etharp_raw+0x114>)
 8014b4e:	4823      	ldr	r0, [pc, #140]	@ (8014bdc <etharp_raw+0x10c>)
 8014b50:	f7ec fabe 	bl	80010d0 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	3308      	adds	r3, #8
 8014b58:	2206      	movs	r2, #6
 8014b5a:	6839      	ldr	r1, [r7, #0]
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f001 fff2 	bl	8016b46 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	3312      	adds	r3, #18
 8014b66:	2206      	movs	r2, #6
 8014b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f001 ffeb 	bl	8016b46 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	330e      	adds	r3, #14
 8014b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b76:	6812      	ldr	r2, [r2, #0]
 8014b78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	3318      	adds	r3, #24
 8014b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b80:	6812      	ldr	r2, [r2, #0]
 8014b82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	2200      	movs	r2, #0
 8014b88:	701a      	strb	r2, [r3, #0]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f042 0201 	orr.w	r2, r2, #1
 8014b90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	2200      	movs	r2, #0
 8014b96:	f042 0208 	orr.w	r2, r2, #8
 8014b9a:	709a      	strb	r2, [r3, #2]
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	2206      	movs	r2, #6
 8014ba4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	2204      	movs	r2, #4
 8014baa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014bac:	f640 0306 	movw	r3, #2054	@ 0x806
 8014bb0:	9300      	str	r3, [sp, #0]
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	68ba      	ldr	r2, [r7, #8]
 8014bb6:	69b9      	ldr	r1, [r7, #24]
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f001 fb7b 	bl	80162b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014bbe:	69b8      	ldr	r0, [r7, #24]
 8014bc0:	f7f8 f940 	bl	800ce44 <pbuf_free>
  p = NULL;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014bc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3720      	adds	r7, #32
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}
 8014bd4:	0801a698 	.word	0x0801a698
 8014bd8:	0801a7e8 	.word	0x0801a7e8
 8014bdc:	0801a710 	.word	0x0801a710
 8014be0:	0801a898 	.word	0x0801a898
 8014be4:	0801a8cc 	.word	0x0801a8cc

08014be8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b088      	sub	sp, #32
 8014bec:	af04      	add	r7, sp, #16
 8014bee:	60f8      	str	r0, [r7, #12]
 8014bf0:	60b9      	str	r1, [r7, #8]
 8014bf2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c04:	2201      	movs	r2, #1
 8014c06:	9203      	str	r2, [sp, #12]
 8014c08:	68ba      	ldr	r2, [r7, #8]
 8014c0a:	9202      	str	r2, [sp, #8]
 8014c0c:	4a06      	ldr	r2, [pc, #24]	@ (8014c28 <etharp_request_dst+0x40>)
 8014c0e:	9201      	str	r2, [sp, #4]
 8014c10:	9300      	str	r3, [sp, #0]
 8014c12:	4603      	mov	r3, r0
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	68f8      	ldr	r0, [r7, #12]
 8014c18:	f7ff ff5a 	bl	8014ad0 <etharp_raw>
 8014c1c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3710      	adds	r7, #16
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	0801aea0 	.word	0x0801aea0

08014c2c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014c36:	4a05      	ldr	r2, [pc, #20]	@ (8014c4c <etharp_request+0x20>)
 8014c38:	6839      	ldr	r1, [r7, #0]
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7ff ffd4 	bl	8014be8 <etharp_request_dst>
 8014c40:	4603      	mov	r3, r0
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	0801ae98 	.word	0x0801ae98

08014c50 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b08e      	sub	sp, #56	@ 0x38
 8014c54:	af04      	add	r7, sp, #16
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014c5a:	4b79      	ldr	r3, [pc, #484]	@ (8014e40 <icmp_input+0x1f0>)
 8014c5c:	689b      	ldr	r3, [r3, #8]
 8014c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	f003 030f 	and.w	r3, r3, #15
 8014c68:	b2db      	uxtb	r3, r3
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	b2db      	uxtb	r3, r3
 8014c6e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014c70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c72:	2b13      	cmp	r3, #19
 8014c74:	f240 80cd 	bls.w	8014e12 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	895b      	ldrh	r3, [r3, #10]
 8014c7c:	2b03      	cmp	r3, #3
 8014c7e:	f240 80ca 	bls.w	8014e16 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014c8c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f000 80b7 	beq.w	8014e04 <icmp_input+0x1b4>
 8014c96:	2b08      	cmp	r3, #8
 8014c98:	f040 80b7 	bne.w	8014e0a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014c9c:	4b69      	ldr	r3, [pc, #420]	@ (8014e44 <icmp_input+0x1f4>)
 8014c9e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014ca0:	4b67      	ldr	r3, [pc, #412]	@ (8014e40 <icmp_input+0x1f0>)
 8014ca2:	695b      	ldr	r3, [r3, #20]
 8014ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014ca8:	2be0      	cmp	r3, #224	@ 0xe0
 8014caa:	f000 80bb 	beq.w	8014e24 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014cae:	4b64      	ldr	r3, [pc, #400]	@ (8014e40 <icmp_input+0x1f0>)
 8014cb0:	695b      	ldr	r3, [r3, #20]
 8014cb2:	4a63      	ldr	r2, [pc, #396]	@ (8014e40 <icmp_input+0x1f0>)
 8014cb4:	6812      	ldr	r2, [r2, #0]
 8014cb6:	4611      	mov	r1, r2
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f000 fbed 	bl	8015498 <ip4_addr_isbroadcast_u32>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f040 80b1 	bne.w	8014e28 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	891b      	ldrh	r3, [r3, #8]
 8014cca:	2b07      	cmp	r3, #7
 8014ccc:	f240 80a5 	bls.w	8014e1a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014cd2:	330e      	adds	r3, #14
 8014cd4:	4619      	mov	r1, r3
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7f8 f81e 	bl	800cd18 <pbuf_add_header>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d04b      	beq.n	8014d7a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	891a      	ldrh	r2, [r3, #8]
 8014ce6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ce8:	4413      	add	r3, r2
 8014cea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	891b      	ldrh	r3, [r3, #8]
 8014cf0:	8b7a      	ldrh	r2, [r7, #26]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	f0c0 809a 	bcc.w	8014e2c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014cf8:	8b7b      	ldrh	r3, [r7, #26]
 8014cfa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014cfe:	4619      	mov	r1, r3
 8014d00:	200e      	movs	r0, #14
 8014d02:	f7f7 fdbb 	bl	800c87c <pbuf_alloc>
 8014d06:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	f000 8090 	beq.w	8014e30 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	895b      	ldrh	r3, [r3, #10]
 8014d14:	461a      	mov	r2, r3
 8014d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d18:	3308      	adds	r3, #8
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d203      	bcs.n	8014d26 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014d1e:	6978      	ldr	r0, [r7, #20]
 8014d20:	f7f8 f890 	bl	800ce44 <pbuf_free>
          goto icmperr;
 8014d24:	e085      	b.n	8014e32 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014d2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f001 ff09 	bl	8016b46 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014d34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d36:	4619      	mov	r1, r3
 8014d38:	6978      	ldr	r0, [r7, #20]
 8014d3a:	f7f7 fffd 	bl	800cd38 <pbuf_remove_header>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d009      	beq.n	8014d58 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014d44:	4b40      	ldr	r3, [pc, #256]	@ (8014e48 <icmp_input+0x1f8>)
 8014d46:	22b6      	movs	r2, #182	@ 0xb6
 8014d48:	4940      	ldr	r1, [pc, #256]	@ (8014e4c <icmp_input+0x1fc>)
 8014d4a:	4841      	ldr	r0, [pc, #260]	@ (8014e50 <icmp_input+0x200>)
 8014d4c:	f7ec f9c0 	bl	80010d0 <printf>
          pbuf_free(r);
 8014d50:	6978      	ldr	r0, [r7, #20]
 8014d52:	f7f8 f877 	bl	800ce44 <pbuf_free>
          goto icmperr;
 8014d56:	e06c      	b.n	8014e32 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014d58:	6879      	ldr	r1, [r7, #4]
 8014d5a:	6978      	ldr	r0, [r7, #20]
 8014d5c:	f7f8 f996 	bl	800d08c <pbuf_copy>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d003      	beq.n	8014d6e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014d66:	6978      	ldr	r0, [r7, #20]
 8014d68:	f7f8 f86c 	bl	800ce44 <pbuf_free>
          goto icmperr;
 8014d6c:	e061      	b.n	8014e32 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f7f8 f868 	bl	800ce44 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	607b      	str	r3, [r7, #4]
 8014d78:	e00f      	b.n	8014d9a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d7c:	330e      	adds	r3, #14
 8014d7e:	4619      	mov	r1, r3
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f7f7 ffd9 	bl	800cd38 <pbuf_remove_header>
 8014d86:	4603      	mov	r3, r0
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d006      	beq.n	8014d9a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8014e48 <icmp_input+0x1f8>)
 8014d8e:	22c7      	movs	r2, #199	@ 0xc7
 8014d90:	4930      	ldr	r1, [pc, #192]	@ (8014e54 <icmp_input+0x204>)
 8014d92:	482f      	ldr	r0, [pc, #188]	@ (8014e50 <icmp_input+0x200>)
 8014d94:	f7ec f99c 	bl	80010d0 <printf>
          goto icmperr;
 8014d98:	e04b      	b.n	8014e32 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014da0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014da2:	4619      	mov	r1, r3
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7f7 ffb7 	bl	800cd18 <pbuf_add_header>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d12b      	bne.n	8014e08 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014dbe:	4b20      	ldr	r3, [pc, #128]	@ (8014e40 <icmp_input+0x1f0>)
 8014dc0:	691a      	ldr	r2, [r3, #16]
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	709a      	strb	r2, [r3, #2]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	22ff      	movs	r2, #255	@ 0xff
 8014dda:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2200      	movs	r2, #0
 8014de0:	729a      	strb	r2, [r3, #10]
 8014de2:	2200      	movs	r2, #0
 8014de4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	9302      	str	r3, [sp, #8]
 8014dea:	2301      	movs	r3, #1
 8014dec:	9301      	str	r3, [sp, #4]
 8014dee:	2300      	movs	r3, #0
 8014df0:	9300      	str	r3, [sp, #0]
 8014df2:	23ff      	movs	r3, #255	@ 0xff
 8014df4:	2200      	movs	r2, #0
 8014df6:	69f9      	ldr	r1, [r7, #28]
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f000 fa75 	bl	80152e8 <ip4_output_if>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014e02:	e001      	b.n	8014e08 <icmp_input+0x1b8>
      break;
 8014e04:	bf00      	nop
 8014e06:	e000      	b.n	8014e0a <icmp_input+0x1ba>
      break;
 8014e08:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7f8 f81a 	bl	800ce44 <pbuf_free>
  return;
 8014e10:	e013      	b.n	8014e3a <icmp_input+0x1ea>
    goto lenerr;
 8014e12:	bf00      	nop
 8014e14:	e002      	b.n	8014e1c <icmp_input+0x1cc>
    goto lenerr;
 8014e16:	bf00      	nop
 8014e18:	e000      	b.n	8014e1c <icmp_input+0x1cc>
        goto lenerr;
 8014e1a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7f8 f811 	bl	800ce44 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014e22:	e00a      	b.n	8014e3a <icmp_input+0x1ea>
        goto icmperr;
 8014e24:	bf00      	nop
 8014e26:	e004      	b.n	8014e32 <icmp_input+0x1e2>
        goto icmperr;
 8014e28:	bf00      	nop
 8014e2a:	e002      	b.n	8014e32 <icmp_input+0x1e2>
          goto icmperr;
 8014e2c:	bf00      	nop
 8014e2e:	e000      	b.n	8014e32 <icmp_input+0x1e2>
          goto icmperr;
 8014e30:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7f8 f806 	bl	800ce44 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014e38:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014e3a:	3728      	adds	r7, #40	@ 0x28
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	20008e50 	.word	0x20008e50
 8014e44:	20008e64 	.word	0x20008e64
 8014e48:	0801a910 	.word	0x0801a910
 8014e4c:	0801a948 	.word	0x0801a948
 8014e50:	0801a980 	.word	0x0801a980
 8014e54:	0801a9a8 	.word	0x0801a9a8

08014e58 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	460b      	mov	r3, r1
 8014e62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014e64:	78fb      	ldrb	r3, [r7, #3]
 8014e66:	461a      	mov	r2, r3
 8014e68:	2103      	movs	r1, #3
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f000 f814 	bl	8014e98 <icmp_send_response>
}
 8014e70:	bf00      	nop
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	460b      	mov	r3, r1
 8014e82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014e84:	78fb      	ldrb	r3, [r7, #3]
 8014e86:	461a      	mov	r2, r3
 8014e88:	210b      	movs	r1, #11
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 f804 	bl	8014e98 <icmp_send_response>
}
 8014e90:	bf00      	nop
 8014e92:	3708      	adds	r7, #8
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}

08014e98 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b08c      	sub	sp, #48	@ 0x30
 8014e9c:	af04      	add	r7, sp, #16
 8014e9e:	6078      	str	r0, [r7, #4]
 8014ea0:	460b      	mov	r3, r1
 8014ea2:	70fb      	strb	r3, [r7, #3]
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014ea8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014eac:	2124      	movs	r1, #36	@ 0x24
 8014eae:	2022      	movs	r0, #34	@ 0x22
 8014eb0:	f7f7 fce4 	bl	800c87c <pbuf_alloc>
 8014eb4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d04c      	beq.n	8014f56 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014ebc:	69fb      	ldr	r3, [r7, #28]
 8014ebe:	895b      	ldrh	r3, [r3, #10]
 8014ec0:	2b23      	cmp	r3, #35	@ 0x23
 8014ec2:	d806      	bhi.n	8014ed2 <icmp_send_response+0x3a>
 8014ec4:	4b26      	ldr	r3, [pc, #152]	@ (8014f60 <icmp_send_response+0xc8>)
 8014ec6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014eca:	4926      	ldr	r1, [pc, #152]	@ (8014f64 <icmp_send_response+0xcc>)
 8014ecc:	4826      	ldr	r0, [pc, #152]	@ (8014f68 <icmp_send_response+0xd0>)
 8014ece:	f7ec f8ff 	bl	80010d0 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	78fa      	ldrb	r2, [r7, #3]
 8014ee2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	78ba      	ldrb	r2, [r7, #2]
 8014ee8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	2200      	movs	r2, #0
 8014eee:	711a      	strb	r2, [r3, #4]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	719a      	strb	r2, [r3, #6]
 8014efa:	2200      	movs	r2, #0
 8014efc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014efe:	69fb      	ldr	r3, [r7, #28]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	f103 0008 	add.w	r0, r3, #8
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	221c      	movs	r2, #28
 8014f0c:	4619      	mov	r1, r3
 8014f0e:	f001 fe1a 	bl	8016b46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014f18:	f107 030c 	add.w	r3, r7, #12
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f000 f825 	bl	8014f6c <ip4_route>
 8014f22:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d011      	beq.n	8014f4e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	709a      	strb	r2, [r3, #2]
 8014f30:	2200      	movs	r2, #0
 8014f32:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014f34:	f107 020c 	add.w	r2, r7, #12
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	9302      	str	r3, [sp, #8]
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	9301      	str	r3, [sp, #4]
 8014f40:	2300      	movs	r3, #0
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	23ff      	movs	r3, #255	@ 0xff
 8014f46:	2100      	movs	r1, #0
 8014f48:	69f8      	ldr	r0, [r7, #28]
 8014f4a:	f000 f9cd 	bl	80152e8 <ip4_output_if>
  }
  pbuf_free(q);
 8014f4e:	69f8      	ldr	r0, [r7, #28]
 8014f50:	f7f7 ff78 	bl	800ce44 <pbuf_free>
 8014f54:	e000      	b.n	8014f58 <icmp_send_response+0xc0>
    return;
 8014f56:	bf00      	nop
}
 8014f58:	3720      	adds	r7, #32
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	0801a910 	.word	0x0801a910
 8014f64:	0801a9dc 	.word	0x0801a9dc
 8014f68:	0801a980 	.word	0x0801a980

08014f6c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	b085      	sub	sp, #20
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014f74:	4b33      	ldr	r3, [pc, #204]	@ (8015044 <ip4_route+0xd8>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	60fb      	str	r3, [r7, #12]
 8014f7a:	e036      	b.n	8014fea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014f82:	f003 0301 	and.w	r3, r3, #1
 8014f86:	b2db      	uxtb	r3, r3
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d02b      	beq.n	8014fe4 <ip4_route+0x78>
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014f92:	089b      	lsrs	r3, r3, #2
 8014f94:	f003 0301 	and.w	r3, r3, #1
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d022      	beq.n	8014fe4 <ip4_route+0x78>
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	3304      	adds	r3, #4
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d01d      	beq.n	8014fe4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	3304      	adds	r3, #4
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	405a      	eors	r2, r3
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	3308      	adds	r3, #8
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	4013      	ands	r3, r2
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d101      	bne.n	8014fc4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	e038      	b.n	8015036 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014fca:	f003 0302 	and.w	r3, r3, #2
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d108      	bne.n	8014fe4 <ip4_route+0x78>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	330c      	adds	r3, #12
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d101      	bne.n	8014fe4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	e028      	b.n	8015036 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	60fb      	str	r3, [r7, #12]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d1c5      	bne.n	8014f7c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014ff0:	4b15      	ldr	r3, [pc, #84]	@ (8015048 <ip4_route+0xdc>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d01a      	beq.n	801502e <ip4_route+0xc2>
 8014ff8:	4b13      	ldr	r3, [pc, #76]	@ (8015048 <ip4_route+0xdc>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015000:	f003 0301 	and.w	r3, r3, #1
 8015004:	2b00      	cmp	r3, #0
 8015006:	d012      	beq.n	801502e <ip4_route+0xc2>
 8015008:	4b0f      	ldr	r3, [pc, #60]	@ (8015048 <ip4_route+0xdc>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015010:	f003 0304 	and.w	r3, r3, #4
 8015014:	2b00      	cmp	r3, #0
 8015016:	d00a      	beq.n	801502e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015018:	4b0b      	ldr	r3, [pc, #44]	@ (8015048 <ip4_route+0xdc>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	3304      	adds	r3, #4
 801501e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015020:	2b00      	cmp	r3, #0
 8015022:	d004      	beq.n	801502e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	b2db      	uxtb	r3, r3
 801502a:	2b7f      	cmp	r3, #127	@ 0x7f
 801502c:	d101      	bne.n	8015032 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801502e:	2300      	movs	r3, #0
 8015030:	e001      	b.n	8015036 <ip4_route+0xca>
  }

  return netif_default;
 8015032:	4b05      	ldr	r3, [pc, #20]	@ (8015048 <ip4_route+0xdc>)
 8015034:	681b      	ldr	r3, [r3, #0]
}
 8015036:	4618      	mov	r0, r3
 8015038:	3714      	adds	r7, #20
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop
 8015044:	2000c598 	.word	0x2000c598
 8015048:	2000c59c 	.word	0x2000c59c

0801504c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801505a:	f003 0301 	and.w	r3, r3, #1
 801505e:	b2db      	uxtb	r3, r3
 8015060:	2b00      	cmp	r3, #0
 8015062:	d016      	beq.n	8015092 <ip4_input_accept+0x46>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	3304      	adds	r3, #4
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d011      	beq.n	8015092 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801506e:	4b0b      	ldr	r3, [pc, #44]	@ (801509c <ip4_input_accept+0x50>)
 8015070:	695a      	ldr	r2, [r3, #20]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	3304      	adds	r3, #4
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	429a      	cmp	r2, r3
 801507a:	d008      	beq.n	801508e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801507c:	4b07      	ldr	r3, [pc, #28]	@ (801509c <ip4_input_accept+0x50>)
 801507e:	695b      	ldr	r3, [r3, #20]
 8015080:	6879      	ldr	r1, [r7, #4]
 8015082:	4618      	mov	r0, r3
 8015084:	f000 fa08 	bl	8015498 <ip4_addr_isbroadcast_u32>
 8015088:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801508a:	2b00      	cmp	r3, #0
 801508c:	d001      	beq.n	8015092 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801508e:	2301      	movs	r3, #1
 8015090:	e000      	b.n	8015094 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015092:	2300      	movs	r3, #0
}
 8015094:	4618      	mov	r0, r3
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	20008e50 	.word	0x20008e50

080150a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b086      	sub	sp, #24
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	091b      	lsrs	r3, r3, #4
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	2b04      	cmp	r3, #4
 80150ba:	d004      	beq.n	80150c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f7f7 fec1 	bl	800ce44 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80150c2:	2300      	movs	r3, #0
 80150c4:	e107      	b.n	80152d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80150c6:	697b      	ldr	r3, [r7, #20]
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	f003 030f 	and.w	r3, r3, #15
 80150ce:	b2db      	uxtb	r3, r3
 80150d0:	009b      	lsls	r3, r3, #2
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	885b      	ldrh	r3, [r3, #2]
 80150da:	b29b      	uxth	r3, r3
 80150dc:	4618      	mov	r0, r3
 80150de:	f7f6 fabf 	bl	800b660 <lwip_htons>
 80150e2:	4603      	mov	r3, r0
 80150e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	891b      	ldrh	r3, [r3, #8]
 80150ea:	89ba      	ldrh	r2, [r7, #12]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d204      	bcs.n	80150fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80150f0:	89bb      	ldrh	r3, [r7, #12]
 80150f2:	4619      	mov	r1, r3
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f7f7 fd1f 	bl	800cb38 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	895b      	ldrh	r3, [r3, #10]
 80150fe:	89fa      	ldrh	r2, [r7, #14]
 8015100:	429a      	cmp	r2, r3
 8015102:	d807      	bhi.n	8015114 <ip4_input+0x74>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	891b      	ldrh	r3, [r3, #8]
 8015108:	89ba      	ldrh	r2, [r7, #12]
 801510a:	429a      	cmp	r2, r3
 801510c:	d802      	bhi.n	8015114 <ip4_input+0x74>
 801510e:	89fb      	ldrh	r3, [r7, #14]
 8015110:	2b13      	cmp	r3, #19
 8015112:	d804      	bhi.n	801511e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f7f7 fe95 	bl	800ce44 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801511a:	2300      	movs	r3, #0
 801511c:	e0db      	b.n	80152d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	691b      	ldr	r3, [r3, #16]
 8015122:	4a6f      	ldr	r2, [pc, #444]	@ (80152e0 <ip4_input+0x240>)
 8015124:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	68db      	ldr	r3, [r3, #12]
 801512a:	4a6d      	ldr	r2, [pc, #436]	@ (80152e0 <ip4_input+0x240>)
 801512c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801512e:	4b6c      	ldr	r3, [pc, #432]	@ (80152e0 <ip4_input+0x240>)
 8015130:	695b      	ldr	r3, [r3, #20]
 8015132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015136:	2be0      	cmp	r3, #224	@ 0xe0
 8015138:	d112      	bne.n	8015160 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015140:	f003 0301 	and.w	r3, r3, #1
 8015144:	b2db      	uxtb	r3, r3
 8015146:	2b00      	cmp	r3, #0
 8015148:	d007      	beq.n	801515a <ip4_input+0xba>
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	3304      	adds	r3, #4
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d002      	beq.n	801515a <ip4_input+0xba>
      netif = inp;
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	613b      	str	r3, [r7, #16]
 8015158:	e02a      	b.n	80151b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801515a:	2300      	movs	r3, #0
 801515c:	613b      	str	r3, [r7, #16]
 801515e:	e027      	b.n	80151b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015160:	6838      	ldr	r0, [r7, #0]
 8015162:	f7ff ff73 	bl	801504c <ip4_input_accept>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d002      	beq.n	8015172 <ip4_input+0xd2>
      netif = inp;
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	613b      	str	r3, [r7, #16]
 8015170:	e01e      	b.n	80151b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015172:	2300      	movs	r3, #0
 8015174:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015176:	4b5a      	ldr	r3, [pc, #360]	@ (80152e0 <ip4_input+0x240>)
 8015178:	695b      	ldr	r3, [r3, #20]
 801517a:	b2db      	uxtb	r3, r3
 801517c:	2b7f      	cmp	r3, #127	@ 0x7f
 801517e:	d017      	beq.n	80151b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015180:	4b58      	ldr	r3, [pc, #352]	@ (80152e4 <ip4_input+0x244>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	613b      	str	r3, [r7, #16]
 8015186:	e00e      	b.n	80151a6 <ip4_input+0x106>
          if (netif == inp) {
 8015188:	693a      	ldr	r2, [r7, #16]
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	429a      	cmp	r2, r3
 801518e:	d006      	beq.n	801519e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015190:	6938      	ldr	r0, [r7, #16]
 8015192:	f7ff ff5b 	bl	801504c <ip4_input_accept>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	d108      	bne.n	80151ae <ip4_input+0x10e>
 801519c:	e000      	b.n	80151a0 <ip4_input+0x100>
            continue;
 801519e:	bf00      	nop
        NETIF_FOREACH(netif) {
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	613b      	str	r3, [r7, #16]
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d1ed      	bne.n	8015188 <ip4_input+0xe8>
 80151ac:	e000      	b.n	80151b0 <ip4_input+0x110>
            break;
 80151ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80151b0:	4b4b      	ldr	r3, [pc, #300]	@ (80152e0 <ip4_input+0x240>)
 80151b2:	691b      	ldr	r3, [r3, #16]
 80151b4:	6839      	ldr	r1, [r7, #0]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f000 f96e 	bl	8015498 <ip4_addr_isbroadcast_u32>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d105      	bne.n	80151ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80151c2:	4b47      	ldr	r3, [pc, #284]	@ (80152e0 <ip4_input+0x240>)
 80151c4:	691b      	ldr	r3, [r3, #16]
 80151c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80151ca:	2be0      	cmp	r3, #224	@ 0xe0
 80151cc:	d104      	bne.n	80151d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f7f7 fe38 	bl	800ce44 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80151d4:	2300      	movs	r3, #0
 80151d6:	e07e      	b.n	80152d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80151d8:	693b      	ldr	r3, [r7, #16]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d104      	bne.n	80151e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f7f7 fe30 	bl	800ce44 <pbuf_free>
    return ERR_OK;
 80151e4:	2300      	movs	r3, #0
 80151e6:	e076      	b.n	80152d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	88db      	ldrh	r3, [r3, #6]
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	461a      	mov	r2, r3
 80151f0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80151f4:	4013      	ands	r3, r2
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d00b      	beq.n	8015212 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f000 fc92 	bl	8015b24 <ip4_reass>
 8015200:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d101      	bne.n	801520c <ip4_input+0x16c>
      return ERR_OK;
 8015208:	2300      	movs	r3, #0
 801520a:	e064      	b.n	80152d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015212:	4a33      	ldr	r2, [pc, #204]	@ (80152e0 <ip4_input+0x240>)
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015218:	4a31      	ldr	r2, [pc, #196]	@ (80152e0 <ip4_input+0x240>)
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801521e:	4a30      	ldr	r2, [pc, #192]	@ (80152e0 <ip4_input+0x240>)
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	f003 030f 	and.w	r3, r3, #15
 801522c:	b2db      	uxtb	r3, r3
 801522e:	009b      	lsls	r3, r3, #2
 8015230:	b2db      	uxtb	r3, r3
 8015232:	461a      	mov	r2, r3
 8015234:	4b2a      	ldr	r3, [pc, #168]	@ (80152e0 <ip4_input+0x240>)
 8015236:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015238:	89fb      	ldrh	r3, [r7, #14]
 801523a:	4619      	mov	r1, r3
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f7f7 fd7b 	bl	800cd38 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015242:	697b      	ldr	r3, [r7, #20]
 8015244:	7a5b      	ldrb	r3, [r3, #9]
 8015246:	2b11      	cmp	r3, #17
 8015248:	d006      	beq.n	8015258 <ip4_input+0x1b8>
 801524a:	2b11      	cmp	r3, #17
 801524c:	dc13      	bgt.n	8015276 <ip4_input+0x1d6>
 801524e:	2b01      	cmp	r3, #1
 8015250:	d00c      	beq.n	801526c <ip4_input+0x1cc>
 8015252:	2b06      	cmp	r3, #6
 8015254:	d005      	beq.n	8015262 <ip4_input+0x1c2>
 8015256:	e00e      	b.n	8015276 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015258:	6839      	ldr	r1, [r7, #0]
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7fe faec 	bl	8013838 <udp_input>
        break;
 8015260:	e026      	b.n	80152b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015262:	6839      	ldr	r1, [r7, #0]
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f7f9 feab 	bl	800efc0 <tcp_input>
        break;
 801526a:	e021      	b.n	80152b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801526c:	6839      	ldr	r1, [r7, #0]
 801526e:	6878      	ldr	r0, [r7, #4]
 8015270:	f7ff fcee 	bl	8014c50 <icmp_input>
        break;
 8015274:	e01c      	b.n	80152b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015276:	4b1a      	ldr	r3, [pc, #104]	@ (80152e0 <ip4_input+0x240>)
 8015278:	695b      	ldr	r3, [r3, #20]
 801527a:	6939      	ldr	r1, [r7, #16]
 801527c:	4618      	mov	r0, r3
 801527e:	f000 f90b 	bl	8015498 <ip4_addr_isbroadcast_u32>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d10f      	bne.n	80152a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015288:	4b15      	ldr	r3, [pc, #84]	@ (80152e0 <ip4_input+0x240>)
 801528a:	695b      	ldr	r3, [r3, #20]
 801528c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015290:	2be0      	cmp	r3, #224	@ 0xe0
 8015292:	d009      	beq.n	80152a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015298:	4619      	mov	r1, r3
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f7f7 fdbf 	bl	800ce1e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80152a0:	2102      	movs	r1, #2
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f7ff fdd8 	bl	8014e58 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80152a8:	6878      	ldr	r0, [r7, #4]
 80152aa:	f7f7 fdcb 	bl	800ce44 <pbuf_free>
        break;
 80152ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80152b0:	4b0b      	ldr	r3, [pc, #44]	@ (80152e0 <ip4_input+0x240>)
 80152b2:	2200      	movs	r2, #0
 80152b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80152b6:	4b0a      	ldr	r3, [pc, #40]	@ (80152e0 <ip4_input+0x240>)
 80152b8:	2200      	movs	r2, #0
 80152ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80152bc:	4b08      	ldr	r3, [pc, #32]	@ (80152e0 <ip4_input+0x240>)
 80152be:	2200      	movs	r2, #0
 80152c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80152c2:	4b07      	ldr	r3, [pc, #28]	@ (80152e0 <ip4_input+0x240>)
 80152c4:	2200      	movs	r2, #0
 80152c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80152c8:	4b05      	ldr	r3, [pc, #20]	@ (80152e0 <ip4_input+0x240>)
 80152ca:	2200      	movs	r2, #0
 80152cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80152ce:	4b04      	ldr	r3, [pc, #16]	@ (80152e0 <ip4_input+0x240>)
 80152d0:	2200      	movs	r2, #0
 80152d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3718      	adds	r7, #24
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	20008e50 	.word	0x20008e50
 80152e4:	2000c598 	.word	0x2000c598

080152e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b08a      	sub	sp, #40	@ 0x28
 80152ec:	af04      	add	r7, sp, #16
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	60b9      	str	r1, [r7, #8]
 80152f2:	607a      	str	r2, [r7, #4]
 80152f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d009      	beq.n	8015314 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d003      	beq.n	801530e <ip4_output_if+0x26>
 8015306:	68bb      	ldr	r3, [r7, #8]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d102      	bne.n	8015314 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015310:	3304      	adds	r3, #4
 8015312:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015314:	78fa      	ldrb	r2, [r7, #3]
 8015316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015318:	9302      	str	r3, [sp, #8]
 801531a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801531e:	9301      	str	r3, [sp, #4]
 8015320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015324:	9300      	str	r3, [sp, #0]
 8015326:	4613      	mov	r3, r2
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	6979      	ldr	r1, [r7, #20]
 801532c:	68f8      	ldr	r0, [r7, #12]
 801532e:	f000 f805 	bl	801533c <ip4_output_if_src>
 8015332:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015334:	4618      	mov	r0, r3
 8015336:	3718      	adds	r7, #24
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}

0801533c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b088      	sub	sp, #32
 8015340:	af00      	add	r7, sp, #0
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
 8015348:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	7b9b      	ldrb	r3, [r3, #14]
 801534e:	2b01      	cmp	r3, #1
 8015350:	d006      	beq.n	8015360 <ip4_output_if_src+0x24>
 8015352:	4b4b      	ldr	r3, [pc, #300]	@ (8015480 <ip4_output_if_src+0x144>)
 8015354:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015358:	494a      	ldr	r1, [pc, #296]	@ (8015484 <ip4_output_if_src+0x148>)
 801535a:	484b      	ldr	r0, [pc, #300]	@ (8015488 <ip4_output_if_src+0x14c>)
 801535c:	f7eb feb8 	bl	80010d0 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d060      	beq.n	8015428 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015366:	2314      	movs	r3, #20
 8015368:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801536a:	2114      	movs	r1, #20
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f7f7 fcd3 	bl	800cd18 <pbuf_add_header>
 8015372:	4603      	mov	r3, r0
 8015374:	2b00      	cmp	r3, #0
 8015376:	d002      	beq.n	801537e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015378:	f06f 0301 	mvn.w	r3, #1
 801537c:	e07c      	b.n	8015478 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	895b      	ldrh	r3, [r3, #10]
 8015388:	2b13      	cmp	r3, #19
 801538a:	d806      	bhi.n	801539a <ip4_output_if_src+0x5e>
 801538c:	4b3c      	ldr	r3, [pc, #240]	@ (8015480 <ip4_output_if_src+0x144>)
 801538e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015392:	493e      	ldr	r1, [pc, #248]	@ (801548c <ip4_output_if_src+0x150>)
 8015394:	483c      	ldr	r0, [pc, #240]	@ (8015488 <ip4_output_if_src+0x14c>)
 8015396:	f7eb fe9b 	bl	80010d0 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801539a:	69fb      	ldr	r3, [r7, #28]
 801539c:	78fa      	ldrb	r2, [r7, #3]
 801539e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80153a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80153b0:	8b7b      	ldrh	r3, [r7, #26]
 80153b2:	089b      	lsrs	r3, r3, #2
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	b2db      	uxtb	r3, r3
 80153b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153bc:	b2da      	uxtb	r2, r3
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80153c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	891b      	ldrh	r3, [r3, #8]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7f6 f946 	bl	800b660 <lwip_htons>
 80153d4:	4603      	mov	r3, r0
 80153d6:	461a      	mov	r2, r3
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	2200      	movs	r2, #0
 80153e0:	719a      	strb	r2, [r3, #6]
 80153e2:	2200      	movs	r2, #0
 80153e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80153e6:	4b2a      	ldr	r3, [pc, #168]	@ (8015490 <ip4_output_if_src+0x154>)
 80153e8:	881b      	ldrh	r3, [r3, #0]
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7f6 f938 	bl	800b660 <lwip_htons>
 80153f0:	4603      	mov	r3, r0
 80153f2:	461a      	mov	r2, r3
 80153f4:	69fb      	ldr	r3, [r7, #28]
 80153f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80153f8:	4b25      	ldr	r3, [pc, #148]	@ (8015490 <ip4_output_if_src+0x154>)
 80153fa:	881b      	ldrh	r3, [r3, #0]
 80153fc:	3301      	adds	r3, #1
 80153fe:	b29a      	uxth	r2, r3
 8015400:	4b23      	ldr	r3, [pc, #140]	@ (8015490 <ip4_output_if_src+0x154>)
 8015402:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d104      	bne.n	8015414 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801540a:	4b22      	ldr	r3, [pc, #136]	@ (8015494 <ip4_output_if_src+0x158>)
 801540c:	681a      	ldr	r2, [r3, #0]
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	60da      	str	r2, [r3, #12]
 8015412:	e003      	b.n	801541c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	2200      	movs	r2, #0
 8015420:	729a      	strb	r2, [r3, #10]
 8015422:	2200      	movs	r2, #0
 8015424:	72da      	strb	r2, [r3, #11]
 8015426:	e00f      	b.n	8015448 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	895b      	ldrh	r3, [r3, #10]
 801542c:	2b13      	cmp	r3, #19
 801542e:	d802      	bhi.n	8015436 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015430:	f06f 0301 	mvn.w	r3, #1
 8015434:	e020      	b.n	8015478 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	691b      	ldr	r3, [r3, #16]
 8015440:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015442:	f107 0314 	add.w	r3, r7, #20
 8015446:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801544a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801544c:	2b00      	cmp	r3, #0
 801544e:	d00c      	beq.n	801546a <ip4_output_if_src+0x12e>
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	891a      	ldrh	r2, [r3, #8]
 8015454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015456:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015458:	429a      	cmp	r2, r3
 801545a:	d906      	bls.n	801546a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801545c:	687a      	ldr	r2, [r7, #4]
 801545e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015460:	68f8      	ldr	r0, [r7, #12]
 8015462:	f000 fd53 	bl	8015f0c <ip4_frag>
 8015466:	4603      	mov	r3, r0
 8015468:	e006      	b.n	8015478 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801546c:	695b      	ldr	r3, [r3, #20]
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	68f9      	ldr	r1, [r7, #12]
 8015472:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015474:	4798      	blx	r3
 8015476:	4603      	mov	r3, r0
}
 8015478:	4618      	mov	r0, r3
 801547a:	3720      	adds	r7, #32
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}
 8015480:	0801aa08 	.word	0x0801aa08
 8015484:	0801aa3c 	.word	0x0801aa3c
 8015488:	0801aa48 	.word	0x0801aa48
 801548c:	0801aa70 	.word	0x0801aa70
 8015490:	2000c6f6 	.word	0x2000c6f6
 8015494:	0801ae94 	.word	0x0801ae94

08015498 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015498:	b480      	push	{r7}
 801549a:	b085      	sub	sp, #20
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154ac:	d002      	beq.n	80154b4 <ip4_addr_isbroadcast_u32+0x1c>
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d101      	bne.n	80154b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80154b4:	2301      	movs	r3, #1
 80154b6:	e02a      	b.n	801550e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80154be:	f003 0302 	and.w	r3, r3, #2
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d101      	bne.n	80154ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80154c6:	2300      	movs	r3, #0
 80154c8:	e021      	b.n	801550e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	3304      	adds	r3, #4
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	687a      	ldr	r2, [r7, #4]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d101      	bne.n	80154da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80154d6:	2300      	movs	r3, #0
 80154d8:	e019      	b.n	801550e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80154da:	68fa      	ldr	r2, [r7, #12]
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	3304      	adds	r3, #4
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	405a      	eors	r2, r3
 80154e4:	683b      	ldr	r3, [r7, #0]
 80154e6:	3308      	adds	r3, #8
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	4013      	ands	r3, r2
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d10d      	bne.n	801550c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	3308      	adds	r3, #8
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	43da      	mvns	r2, r3
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	3308      	adds	r3, #8
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015504:	429a      	cmp	r2, r3
 8015506:	d101      	bne.n	801550c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015508:	2301      	movs	r3, #1
 801550a:	e000      	b.n	801550e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801550c:	2300      	movs	r3, #0
  }
}
 801550e:	4618      	mov	r0, r3
 8015510:	3714      	adds	r7, #20
 8015512:	46bd      	mov	sp, r7
 8015514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015518:	4770      	bx	lr
	...

0801551c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015522:	2300      	movs	r3, #0
 8015524:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015526:	4b12      	ldr	r3, [pc, #72]	@ (8015570 <ip_reass_tmr+0x54>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801552c:	e018      	b.n	8015560 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	7fdb      	ldrb	r3, [r3, #31]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d00b      	beq.n	801554e <ip_reass_tmr+0x32>
      r->timer--;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	7fdb      	ldrb	r3, [r3, #31]
 801553a:	3b01      	subs	r3, #1
 801553c:	b2da      	uxtb	r2, r3
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	60fb      	str	r3, [r7, #12]
 801554c:	e008      	b.n	8015560 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015558:	68b9      	ldr	r1, [r7, #8]
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f000 f80a 	bl	8015574 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d1e3      	bne.n	801552e <ip_reass_tmr+0x12>
    }
  }
}
 8015566:	bf00      	nop
 8015568:	bf00      	nop
 801556a:	3710      	adds	r7, #16
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}
 8015570:	2000c6f8 	.word	0x2000c6f8

08015574 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b088      	sub	sp, #32
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801557e:	2300      	movs	r3, #0
 8015580:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015582:	683a      	ldr	r2, [r7, #0]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	429a      	cmp	r2, r3
 8015588:	d105      	bne.n	8015596 <ip_reass_free_complete_datagram+0x22>
 801558a:	4b45      	ldr	r3, [pc, #276]	@ (80156a0 <ip_reass_free_complete_datagram+0x12c>)
 801558c:	22ab      	movs	r2, #171	@ 0xab
 801558e:	4945      	ldr	r1, [pc, #276]	@ (80156a4 <ip_reass_free_complete_datagram+0x130>)
 8015590:	4845      	ldr	r0, [pc, #276]	@ (80156a8 <ip_reass_free_complete_datagram+0x134>)
 8015592:	f7eb fd9d 	bl	80010d0 <printf>
  if (prev != NULL) {
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d00a      	beq.n	80155b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d005      	beq.n	80155b2 <ip_reass_free_complete_datagram+0x3e>
 80155a6:	4b3e      	ldr	r3, [pc, #248]	@ (80156a0 <ip_reass_free_complete_datagram+0x12c>)
 80155a8:	22ad      	movs	r2, #173	@ 0xad
 80155aa:	4940      	ldr	r1, [pc, #256]	@ (80156ac <ip_reass_free_complete_datagram+0x138>)
 80155ac:	483e      	ldr	r0, [pc, #248]	@ (80156a8 <ip_reass_free_complete_datagram+0x134>)
 80155ae:	f7eb fd8f 	bl	80010d0 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	685b      	ldr	r3, [r3, #4]
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	889b      	ldrh	r3, [r3, #4]
 80155be:	b29b      	uxth	r3, r3
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d12a      	bne.n	801561a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	685b      	ldr	r3, [r3, #4]
 80155c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	681a      	ldr	r2, [r3, #0]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	6858      	ldr	r0, [r3, #4]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	3308      	adds	r3, #8
 80155da:	2214      	movs	r2, #20
 80155dc:	4619      	mov	r1, r3
 80155de:	f001 fab2 	bl	8016b46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80155e2:	2101      	movs	r1, #1
 80155e4:	69b8      	ldr	r0, [r7, #24]
 80155e6:	f7ff fc47 	bl	8014e78 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80155ea:	69b8      	ldr	r0, [r7, #24]
 80155ec:	f7f7 fcb8 	bl	800cf60 <pbuf_clen>
 80155f0:	4603      	mov	r3, r0
 80155f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80155f4:	8bfa      	ldrh	r2, [r7, #30]
 80155f6:	8a7b      	ldrh	r3, [r7, #18]
 80155f8:	4413      	add	r3, r2
 80155fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80155fe:	db05      	blt.n	801560c <ip_reass_free_complete_datagram+0x98>
 8015600:	4b27      	ldr	r3, [pc, #156]	@ (80156a0 <ip_reass_free_complete_datagram+0x12c>)
 8015602:	22bc      	movs	r2, #188	@ 0xbc
 8015604:	492a      	ldr	r1, [pc, #168]	@ (80156b0 <ip_reass_free_complete_datagram+0x13c>)
 8015606:	4828      	ldr	r0, [pc, #160]	@ (80156a8 <ip_reass_free_complete_datagram+0x134>)
 8015608:	f7eb fd62 	bl	80010d0 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801560c:	8bfa      	ldrh	r2, [r7, #30]
 801560e:	8a7b      	ldrh	r3, [r7, #18]
 8015610:	4413      	add	r3, r2
 8015612:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015614:	69b8      	ldr	r0, [r7, #24]
 8015616:	f7f7 fc15 	bl	800ce44 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015620:	e01f      	b.n	8015662 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015632:	68f8      	ldr	r0, [r7, #12]
 8015634:	f7f7 fc94 	bl	800cf60 <pbuf_clen>
 8015638:	4603      	mov	r3, r0
 801563a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801563c:	8bfa      	ldrh	r2, [r7, #30]
 801563e:	8a7b      	ldrh	r3, [r7, #18]
 8015640:	4413      	add	r3, r2
 8015642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015646:	db05      	blt.n	8015654 <ip_reass_free_complete_datagram+0xe0>
 8015648:	4b15      	ldr	r3, [pc, #84]	@ (80156a0 <ip_reass_free_complete_datagram+0x12c>)
 801564a:	22cc      	movs	r2, #204	@ 0xcc
 801564c:	4918      	ldr	r1, [pc, #96]	@ (80156b0 <ip_reass_free_complete_datagram+0x13c>)
 801564e:	4816      	ldr	r0, [pc, #88]	@ (80156a8 <ip_reass_free_complete_datagram+0x134>)
 8015650:	f7eb fd3e 	bl	80010d0 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015654:	8bfa      	ldrh	r2, [r7, #30]
 8015656:	8a7b      	ldrh	r3, [r7, #18]
 8015658:	4413      	add	r3, r2
 801565a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801565c:	68f8      	ldr	r0, [r7, #12]
 801565e:	f7f7 fbf1 	bl	800ce44 <pbuf_free>
  while (p != NULL) {
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d1dc      	bne.n	8015622 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015668:	6839      	ldr	r1, [r7, #0]
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f000 f8c2 	bl	80157f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015670:	4b10      	ldr	r3, [pc, #64]	@ (80156b4 <ip_reass_free_complete_datagram+0x140>)
 8015672:	881b      	ldrh	r3, [r3, #0]
 8015674:	8bfa      	ldrh	r2, [r7, #30]
 8015676:	429a      	cmp	r2, r3
 8015678:	d905      	bls.n	8015686 <ip_reass_free_complete_datagram+0x112>
 801567a:	4b09      	ldr	r3, [pc, #36]	@ (80156a0 <ip_reass_free_complete_datagram+0x12c>)
 801567c:	22d2      	movs	r2, #210	@ 0xd2
 801567e:	490e      	ldr	r1, [pc, #56]	@ (80156b8 <ip_reass_free_complete_datagram+0x144>)
 8015680:	4809      	ldr	r0, [pc, #36]	@ (80156a8 <ip_reass_free_complete_datagram+0x134>)
 8015682:	f7eb fd25 	bl	80010d0 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015686:	4b0b      	ldr	r3, [pc, #44]	@ (80156b4 <ip_reass_free_complete_datagram+0x140>)
 8015688:	881a      	ldrh	r2, [r3, #0]
 801568a:	8bfb      	ldrh	r3, [r7, #30]
 801568c:	1ad3      	subs	r3, r2, r3
 801568e:	b29a      	uxth	r2, r3
 8015690:	4b08      	ldr	r3, [pc, #32]	@ (80156b4 <ip_reass_free_complete_datagram+0x140>)
 8015692:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015694:	8bfb      	ldrh	r3, [r7, #30]
}
 8015696:	4618      	mov	r0, r3
 8015698:	3720      	adds	r7, #32
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	0801aaa0 	.word	0x0801aaa0
 80156a4:	0801aadc 	.word	0x0801aadc
 80156a8:	0801aae8 	.word	0x0801aae8
 80156ac:	0801ab10 	.word	0x0801ab10
 80156b0:	0801ab24 	.word	0x0801ab24
 80156b4:	2000c6fc 	.word	0x2000c6fc
 80156b8:	0801ab44 	.word	0x0801ab44

080156bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b08a      	sub	sp, #40	@ 0x28
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80156c6:	2300      	movs	r3, #0
 80156c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80156ca:	2300      	movs	r3, #0
 80156cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80156ce:	2300      	movs	r3, #0
 80156d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80156d2:	2300      	movs	r3, #0
 80156d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80156d6:	2300      	movs	r3, #0
 80156d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80156da:	4b28      	ldr	r3, [pc, #160]	@ (801577c <ip_reass_remove_oldest_datagram+0xc0>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80156e0:	e030      	b.n	8015744 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80156e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e4:	695a      	ldr	r2, [r3, #20]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d10c      	bne.n	8015708 <ip_reass_remove_oldest_datagram+0x4c>
 80156ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156f0:	699a      	ldr	r2, [r3, #24]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	691b      	ldr	r3, [r3, #16]
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d106      	bne.n	8015708 <ip_reass_remove_oldest_datagram+0x4c>
 80156fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156fc:	899a      	ldrh	r2, [r3, #12]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	889b      	ldrh	r3, [r3, #4]
 8015702:	b29b      	uxth	r3, r3
 8015704:	429a      	cmp	r2, r3
 8015706:	d014      	beq.n	8015732 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	3301      	adds	r3, #1
 801570c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801570e:	6a3b      	ldr	r3, [r7, #32]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d104      	bne.n	801571e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015716:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	61bb      	str	r3, [r7, #24]
 801571c:	e009      	b.n	8015732 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015720:	7fda      	ldrb	r2, [r3, #31]
 8015722:	6a3b      	ldr	r3, [r7, #32]
 8015724:	7fdb      	ldrb	r3, [r3, #31]
 8015726:	429a      	cmp	r2, r3
 8015728:	d803      	bhi.n	8015732 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801572c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d001      	beq.n	801573e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801573c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015746:	2b00      	cmp	r3, #0
 8015748:	d1cb      	bne.n	80156e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801574a:	6a3b      	ldr	r3, [r7, #32]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d008      	beq.n	8015762 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015750:	69b9      	ldr	r1, [r7, #24]
 8015752:	6a38      	ldr	r0, [r7, #32]
 8015754:	f7ff ff0e 	bl	8015574 <ip_reass_free_complete_datagram>
 8015758:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801575a:	697a      	ldr	r2, [r7, #20]
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	4413      	add	r3, r2
 8015760:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015762:	697a      	ldr	r2, [r7, #20]
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	429a      	cmp	r2, r3
 8015768:	da02      	bge.n	8015770 <ip_reass_remove_oldest_datagram+0xb4>
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	2b01      	cmp	r3, #1
 801576e:	dcac      	bgt.n	80156ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015770:	697b      	ldr	r3, [r7, #20]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3728      	adds	r7, #40	@ 0x28
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	2000c6f8 	.word	0x2000c6f8

08015780 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b084      	sub	sp, #16
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801578a:	2004      	movs	r0, #4
 801578c:	f7f6 fc40 	bl	800c010 <memp_malloc>
 8015790:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d110      	bne.n	80157ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015798:	6839      	ldr	r1, [r7, #0]
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f7ff ff8e 	bl	80156bc <ip_reass_remove_oldest_datagram>
 80157a0:	4602      	mov	r2, r0
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	4293      	cmp	r3, r2
 80157a6:	dc03      	bgt.n	80157b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80157a8:	2004      	movs	r0, #4
 80157aa:	f7f6 fc31 	bl	800c010 <memp_malloc>
 80157ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d101      	bne.n	80157ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80157b6:	2300      	movs	r3, #0
 80157b8:	e016      	b.n	80157e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80157ba:	2220      	movs	r2, #32
 80157bc:	2100      	movs	r1, #0
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f001 f8f5 	bl	80169ae <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	220f      	movs	r2, #15
 80157c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80157ca:	4b09      	ldr	r3, [pc, #36]	@ (80157f0 <ip_reass_enqueue_new_datagram+0x70>)
 80157cc:	681a      	ldr	r2, [r3, #0]
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80157d2:	4a07      	ldr	r2, [pc, #28]	@ (80157f0 <ip_reass_enqueue_new_datagram+0x70>)
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	3308      	adds	r3, #8
 80157dc:	2214      	movs	r2, #20
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	4618      	mov	r0, r3
 80157e2:	f001 f9b0 	bl	8016b46 <memcpy>
  return ipr;
 80157e6:	68fb      	ldr	r3, [r7, #12]
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3710      	adds	r7, #16
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	2000c6f8 	.word	0x2000c6f8

080157f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80157fe:	4b10      	ldr	r3, [pc, #64]	@ (8015840 <ip_reass_dequeue_datagram+0x4c>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	429a      	cmp	r2, r3
 8015806:	d104      	bne.n	8015812 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	4a0c      	ldr	r2, [pc, #48]	@ (8015840 <ip_reass_dequeue_datagram+0x4c>)
 801580e:	6013      	str	r3, [r2, #0]
 8015810:	e00d      	b.n	801582e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d106      	bne.n	8015826 <ip_reass_dequeue_datagram+0x32>
 8015818:	4b0a      	ldr	r3, [pc, #40]	@ (8015844 <ip_reass_dequeue_datagram+0x50>)
 801581a:	f240 1245 	movw	r2, #325	@ 0x145
 801581e:	490a      	ldr	r1, [pc, #40]	@ (8015848 <ip_reass_dequeue_datagram+0x54>)
 8015820:	480a      	ldr	r0, [pc, #40]	@ (801584c <ip_reass_dequeue_datagram+0x58>)
 8015822:	f7eb fc55 	bl	80010d0 <printf>
    prev->next = ipr->next;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801582e:	6879      	ldr	r1, [r7, #4]
 8015830:	2004      	movs	r0, #4
 8015832:	f7f6 fc63 	bl	800c0fc <memp_free>
}
 8015836:	bf00      	nop
 8015838:	3708      	adds	r7, #8
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	2000c6f8 	.word	0x2000c6f8
 8015844:	0801aaa0 	.word	0x0801aaa0
 8015848:	0801ab68 	.word	0x0801ab68
 801584c:	0801aae8 	.word	0x0801aae8

08015850 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b08c      	sub	sp, #48	@ 0x30
 8015854:	af00      	add	r7, sp, #0
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	60b9      	str	r1, [r7, #8]
 801585a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801585c:	2300      	movs	r3, #0
 801585e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015860:	2301      	movs	r3, #1
 8015862:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	685b      	ldr	r3, [r3, #4]
 8015868:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801586a:	69fb      	ldr	r3, [r7, #28]
 801586c:	885b      	ldrh	r3, [r3, #2]
 801586e:	b29b      	uxth	r3, r3
 8015870:	4618      	mov	r0, r3
 8015872:	f7f5 fef5 	bl	800b660 <lwip_htons>
 8015876:	4603      	mov	r3, r0
 8015878:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	f003 030f 	and.w	r3, r3, #15
 8015882:	b2db      	uxtb	r3, r3
 8015884:	009b      	lsls	r3, r3, #2
 8015886:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015888:	7e7b      	ldrb	r3, [r7, #25]
 801588a:	b29b      	uxth	r3, r3
 801588c:	8b7a      	ldrh	r2, [r7, #26]
 801588e:	429a      	cmp	r2, r3
 8015890:	d202      	bcs.n	8015898 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015892:	f04f 33ff 	mov.w	r3, #4294967295
 8015896:	e135      	b.n	8015b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015898:	7e7b      	ldrb	r3, [r7, #25]
 801589a:	b29b      	uxth	r3, r3
 801589c:	8b7a      	ldrh	r2, [r7, #26]
 801589e:	1ad3      	subs	r3, r2, r3
 80158a0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	88db      	ldrh	r3, [r3, #6]
 80158a6:	b29b      	uxth	r3, r3
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7f5 fed9 	bl	800b660 <lwip_htons>
 80158ae:	4603      	mov	r3, r0
 80158b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	00db      	lsls	r3, r3, #3
 80158b8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80158c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158c2:	2200      	movs	r2, #0
 80158c4:	701a      	strb	r2, [r3, #0]
 80158c6:	2200      	movs	r2, #0
 80158c8:	705a      	strb	r2, [r3, #1]
 80158ca:	2200      	movs	r2, #0
 80158cc:	709a      	strb	r2, [r3, #2]
 80158ce:	2200      	movs	r2, #0
 80158d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80158d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158d4:	8afa      	ldrh	r2, [r7, #22]
 80158d6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80158d8:	8afa      	ldrh	r2, [r7, #22]
 80158da:	8b7b      	ldrh	r3, [r7, #26]
 80158dc:	4413      	add	r3, r2
 80158de:	b29a      	uxth	r2, r3
 80158e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158e2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80158e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158e6:	88db      	ldrh	r3, [r3, #6]
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	8afa      	ldrh	r2, [r7, #22]
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d902      	bls.n	80158f6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158f0:	f04f 33ff 	mov.w	r3, #4294967295
 80158f4:	e106      	b.n	8015b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80158fc:	e068      	b.n	80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80158fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015900:	685b      	ldr	r3, [r3, #4]
 8015902:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015906:	889b      	ldrh	r3, [r3, #4]
 8015908:	b29a      	uxth	r2, r3
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	889b      	ldrh	r3, [r3, #4]
 801590e:	b29b      	uxth	r3, r3
 8015910:	429a      	cmp	r2, r3
 8015912:	d235      	bcs.n	8015980 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015918:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801591c:	2b00      	cmp	r3, #0
 801591e:	d020      	beq.n	8015962 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015922:	889b      	ldrh	r3, [r3, #4]
 8015924:	b29a      	uxth	r2, r3
 8015926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015928:	88db      	ldrh	r3, [r3, #6]
 801592a:	b29b      	uxth	r3, r3
 801592c:	429a      	cmp	r2, r3
 801592e:	d307      	bcc.n	8015940 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015932:	88db      	ldrh	r3, [r3, #6]
 8015934:	b29a      	uxth	r2, r3
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	889b      	ldrh	r3, [r3, #4]
 801593a:	b29b      	uxth	r3, r3
 801593c:	429a      	cmp	r2, r3
 801593e:	d902      	bls.n	8015946 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015940:	f04f 33ff 	mov.w	r3, #4294967295
 8015944:	e0de      	b.n	8015b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015948:	68ba      	ldr	r2, [r7, #8]
 801594a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801594e:	88db      	ldrh	r3, [r3, #6]
 8015950:	b29a      	uxth	r2, r3
 8015952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015954:	889b      	ldrh	r3, [r3, #4]
 8015956:	b29b      	uxth	r3, r3
 8015958:	429a      	cmp	r2, r3
 801595a:	d03d      	beq.n	80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801595c:	2300      	movs	r3, #0
 801595e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015960:	e03a      	b.n	80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015964:	88db      	ldrh	r3, [r3, #6]
 8015966:	b29a      	uxth	r2, r3
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	889b      	ldrh	r3, [r3, #4]
 801596c:	b29b      	uxth	r3, r3
 801596e:	429a      	cmp	r2, r3
 8015970:	d902      	bls.n	8015978 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015972:	f04f 33ff 	mov.w	r3, #4294967295
 8015976:	e0c5      	b.n	8015b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	68ba      	ldr	r2, [r7, #8]
 801597c:	605a      	str	r2, [r3, #4]
      break;
 801597e:	e02b      	b.n	80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015982:	889b      	ldrh	r3, [r3, #4]
 8015984:	b29a      	uxth	r2, r3
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	889b      	ldrh	r3, [r3, #4]
 801598a:	b29b      	uxth	r3, r3
 801598c:	429a      	cmp	r2, r3
 801598e:	d102      	bne.n	8015996 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015990:	f04f 33ff 	mov.w	r3, #4294967295
 8015994:	e0b6      	b.n	8015b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015998:	889b      	ldrh	r3, [r3, #4]
 801599a:	b29a      	uxth	r2, r3
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	88db      	ldrh	r3, [r3, #6]
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d202      	bcs.n	80159ac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159a6:	f04f 33ff 	mov.w	r3, #4294967295
 80159aa:	e0ab      	b.n	8015b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80159ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d009      	beq.n	80159c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80159b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159b4:	88db      	ldrh	r3, [r3, #6]
 80159b6:	b29a      	uxth	r2, r3
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	889b      	ldrh	r3, [r3, #4]
 80159bc:	b29b      	uxth	r3, r3
 80159be:	429a      	cmp	r2, r3
 80159c0:	d001      	beq.n	80159c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80159c2:	2300      	movs	r3, #0
 80159c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80159d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d193      	bne.n	80158fe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80159d6:	e000      	b.n	80159da <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80159d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80159da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d12d      	bne.n	8015a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80159e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d01c      	beq.n	8015a20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80159e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e8:	88db      	ldrh	r3, [r3, #6]
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ee:	889b      	ldrh	r3, [r3, #4]
 80159f0:	b29b      	uxth	r3, r3
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d906      	bls.n	8015a04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80159f6:	4b45      	ldr	r3, [pc, #276]	@ (8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159f8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80159fc:	4944      	ldr	r1, [pc, #272]	@ (8015b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80159fe:	4845      	ldr	r0, [pc, #276]	@ (8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a00:	f7eb fb66 	bl	80010d0 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a06:	68ba      	ldr	r2, [r7, #8]
 8015a08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a0c:	88db      	ldrh	r3, [r3, #6]
 8015a0e:	b29a      	uxth	r2, r3
 8015a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a12:	889b      	ldrh	r3, [r3, #4]
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d010      	beq.n	8015a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	623b      	str	r3, [r7, #32]
 8015a1e:	e00d      	b.n	8015a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d006      	beq.n	8015a36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015a28:	4b38      	ldr	r3, [pc, #224]	@ (8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a2a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015a2e:	493a      	ldr	r1, [pc, #232]	@ (8015b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015a30:	4838      	ldr	r0, [pc, #224]	@ (8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a32:	f7eb fb4d 	bl	80010d0 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	68ba      	ldr	r2, [r7, #8]
 8015a3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d105      	bne.n	8015a4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	7f9b      	ldrb	r3, [r3, #30]
 8015a46:	f003 0301 	and.w	r3, r3, #1
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d059      	beq.n	8015b02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015a4e:	6a3b      	ldr	r3, [r7, #32]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d04f      	beq.n	8015af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d006      	beq.n	8015a6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	889b      	ldrh	r3, [r3, #4]
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d002      	beq.n	8015a70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	623b      	str	r3, [r7, #32]
 8015a6e:	e041      	b.n	8015af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a72:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015a7a:	e012      	b.n	8015aa2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a84:	88db      	ldrh	r3, [r3, #6]
 8015a86:	b29a      	uxth	r2, r3
 8015a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a8a:	889b      	ldrh	r3, [r3, #4]
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d002      	beq.n	8015a98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015a92:	2300      	movs	r3, #0
 8015a94:	623b      	str	r3, [r7, #32]
            break;
 8015a96:	e007      	b.n	8015aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d1e9      	bne.n	8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015aa8:	6a3b      	ldr	r3, [r7, #32]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d022      	beq.n	8015af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d106      	bne.n	8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015ab6:	4b15      	ldr	r3, [pc, #84]	@ (8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ab8:	f240 12df 	movw	r2, #479	@ 0x1df
 8015abc:	4917      	ldr	r1, [pc, #92]	@ (8015b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015abe:	4815      	ldr	r0, [pc, #84]	@ (8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ac0:	f7eb fb06 	bl	80010d0 <printf>
          LWIP_ASSERT("sanity check",
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	685b      	ldr	r3, [r3, #4]
 8015aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d106      	bne.n	8015ade <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ad2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015ad6:	4911      	ldr	r1, [pc, #68]	@ (8015b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ad8:	480e      	ldr	r0, [pc, #56]	@ (8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ada:	f7eb faf9 	bl	80010d0 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d006      	beq.n	8015af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015ae6:	4b09      	ldr	r3, [pc, #36]	@ (8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ae8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015aec:	490c      	ldr	r1, [pc, #48]	@ (8015b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015aee:	4809      	ldr	r0, [pc, #36]	@ (8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015af0:	f7eb faee 	bl	80010d0 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015af4:	6a3b      	ldr	r3, [r7, #32]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	bf14      	ite	ne
 8015afa:	2301      	movne	r3, #1
 8015afc:	2300      	moveq	r3, #0
 8015afe:	b2db      	uxtb	r3, r3
 8015b00:	e000      	b.n	8015b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015b02:	2300      	movs	r3, #0
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3730      	adds	r7, #48	@ 0x30
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}
 8015b0c:	0801aaa0 	.word	0x0801aaa0
 8015b10:	0801ab84 	.word	0x0801ab84
 8015b14:	0801aae8 	.word	0x0801aae8
 8015b18:	0801aba4 	.word	0x0801aba4
 8015b1c:	0801abdc 	.word	0x0801abdc
 8015b20:	0801abec 	.word	0x0801abec

08015b24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b08e      	sub	sp, #56	@ 0x38
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	f003 030f 	and.w	r3, r3, #15
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	009b      	lsls	r3, r3, #2
 8015b3e:	b2db      	uxtb	r3, r3
 8015b40:	2b14      	cmp	r3, #20
 8015b42:	f040 8171 	bne.w	8015e28 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b48:	88db      	ldrh	r3, [r3, #6]
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7f5 fd87 	bl	800b660 <lwip_htons>
 8015b52:	4603      	mov	r3, r0
 8015b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	00db      	lsls	r3, r3, #3
 8015b5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b60:	885b      	ldrh	r3, [r3, #2]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7f5 fd7b 	bl	800b660 <lwip_htons>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	f003 030f 	and.w	r3, r3, #15
 8015b76:	b2db      	uxtb	r3, r3
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015b86:	429a      	cmp	r2, r3
 8015b88:	f0c0 8150 	bcc.w	8015e2c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015b90:	b29b      	uxth	r3, r3
 8015b92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015b94:	1ad3      	subs	r3, r2, r3
 8015b96:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f7f7 f9e1 	bl	800cf60 <pbuf_clen>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015ba2:	4b8c      	ldr	r3, [pc, #560]	@ (8015dd4 <ip4_reass+0x2b0>)
 8015ba4:	881b      	ldrh	r3, [r3, #0]
 8015ba6:	461a      	mov	r2, r3
 8015ba8:	8c3b      	ldrh	r3, [r7, #32]
 8015baa:	4413      	add	r3, r2
 8015bac:	2b0a      	cmp	r3, #10
 8015bae:	dd10      	ble.n	8015bd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015bb0:	8c3b      	ldrh	r3, [r7, #32]
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015bb6:	f7ff fd81 	bl	80156bc <ip_reass_remove_oldest_datagram>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	f000 8137 	beq.w	8015e30 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015bc2:	4b84      	ldr	r3, [pc, #528]	@ (8015dd4 <ip4_reass+0x2b0>)
 8015bc4:	881b      	ldrh	r3, [r3, #0]
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	8c3b      	ldrh	r3, [r7, #32]
 8015bca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015bcc:	2b0a      	cmp	r3, #10
 8015bce:	f300 812f 	bgt.w	8015e30 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015bd2:	4b81      	ldr	r3, [pc, #516]	@ (8015dd8 <ip4_reass+0x2b4>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8015bd8:	e015      	b.n	8015c06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bdc:	695a      	ldr	r2, [r3, #20]
 8015bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015be0:	68db      	ldr	r3, [r3, #12]
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d10c      	bne.n	8015c00 <ip4_reass+0xdc>
 8015be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015be8:	699a      	ldr	r2, [r3, #24]
 8015bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bec:	691b      	ldr	r3, [r3, #16]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d106      	bne.n	8015c00 <ip4_reass+0xdc>
 8015bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bf4:	899a      	ldrh	r2, [r3, #12]
 8015bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf8:	889b      	ldrh	r3, [r3, #4]
 8015bfa:	b29b      	uxth	r3, r3
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d006      	beq.n	8015c0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d1e6      	bne.n	8015bda <ip4_reass+0xb6>
 8015c0c:	e000      	b.n	8015c10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015c0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d109      	bne.n	8015c2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015c16:	8c3b      	ldrh	r3, [r7, #32]
 8015c18:	4619      	mov	r1, r3
 8015c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015c1c:	f7ff fdb0 	bl	8015780 <ip_reass_enqueue_new_datagram>
 8015c20:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d11c      	bne.n	8015c62 <ip4_reass+0x13e>
      goto nullreturn;
 8015c28:	e105      	b.n	8015e36 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c2c:	88db      	ldrh	r3, [r3, #6]
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7f5 fd15 	bl	800b660 <lwip_htons>
 8015c36:	4603      	mov	r3, r0
 8015c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d110      	bne.n	8015c62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c42:	89db      	ldrh	r3, [r3, #14]
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7f5 fd0b 	bl	800b660 <lwip_htons>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d006      	beq.n	8015c62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c56:	3308      	adds	r3, #8
 8015c58:	2214      	movs	r2, #20
 8015c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f000 ff72 	bl	8016b46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c64:	88db      	ldrh	r3, [r3, #6]
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	f003 0320 	and.w	r3, r3, #32
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	bf0c      	ite	eq
 8015c70:	2301      	moveq	r3, #1
 8015c72:	2300      	movne	r3, #0
 8015c74:	b2db      	uxtb	r3, r3
 8015c76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015c78:	69fb      	ldr	r3, [r7, #28]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d00e      	beq.n	8015c9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c7e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015c80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015c82:	4413      	add	r3, r2
 8015c84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015c86:	8b7a      	ldrh	r2, [r7, #26]
 8015c88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	f0c0 80a0 	bcc.w	8015dd0 <ip4_reass+0x2ac>
 8015c90:	8b7b      	ldrh	r3, [r7, #26]
 8015c92:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015c96:	4293      	cmp	r3, r2
 8015c98:	f200 809a 	bhi.w	8015dd0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015c9c:	69fa      	ldr	r2, [r7, #28]
 8015c9e:	6879      	ldr	r1, [r7, #4]
 8015ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015ca2:	f7ff fdd5 	bl	8015850 <ip_reass_chain_frag_into_datagram_and_validate>
 8015ca6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cae:	f000 809b 	beq.w	8015de8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015cb2:	4b48      	ldr	r3, [pc, #288]	@ (8015dd4 <ip4_reass+0x2b0>)
 8015cb4:	881a      	ldrh	r2, [r3, #0]
 8015cb6:	8c3b      	ldrh	r3, [r7, #32]
 8015cb8:	4413      	add	r3, r2
 8015cba:	b29a      	uxth	r2, r3
 8015cbc:	4b45      	ldr	r3, [pc, #276]	@ (8015dd4 <ip4_reass+0x2b0>)
 8015cbe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015cc0:	69fb      	ldr	r3, [r7, #28]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d00d      	beq.n	8015ce2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015cc6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015cc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015cca:	4413      	add	r3, r2
 8015ccc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cd0:	8a7a      	ldrh	r2, [r7, #18]
 8015cd2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cd6:	7f9b      	ldrb	r3, [r3, #30]
 8015cd8:	f043 0301 	orr.w	r3, r3, #1
 8015cdc:	b2da      	uxtb	r2, r3
 8015cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ce0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	2b01      	cmp	r3, #1
 8015ce6:	d171      	bne.n	8015dcc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cea:	8b9b      	ldrh	r3, [r3, #28]
 8015cec:	3314      	adds	r3, #20
 8015cee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d04:	3308      	adds	r3, #8
 8015d06:	2214      	movs	r2, #20
 8015d08:	4619      	mov	r1, r3
 8015d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d0c:	f000 ff1b 	bl	8016b46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015d10:	8a3b      	ldrh	r3, [r7, #16]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f5 fca4 	bl	800b660 <lwip_htons>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d22:	2200      	movs	r2, #0
 8015d24:	719a      	strb	r2, [r3, #6]
 8015d26:	2200      	movs	r2, #0
 8015d28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	729a      	strb	r2, [r3, #10]
 8015d30:	2200      	movs	r2, #0
 8015d32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015d3a:	e00d      	b.n	8015d58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015d42:	2114      	movs	r1, #20
 8015d44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015d46:	f7f6 fff7 	bl	800cd38 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015d4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f7f7 f947 	bl	800cfe0 <pbuf_cat>
      r = iprh->next_pbuf;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d1ee      	bne.n	8015d3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8015dd8 <ip4_reass+0x2b4>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d102      	bne.n	8015d6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015d6c:	e010      	b.n	8015d90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8015dd8 <ip4_reass+0x2b4>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015d74:	e007      	b.n	8015d86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d006      	beq.n	8015d8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d1f4      	bne.n	8015d76 <ip4_reass+0x252>
 8015d8c:	e000      	b.n	8015d90 <ip4_reass+0x26c>
          break;
 8015d8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015d90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015d92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015d94:	f7ff fd2e 	bl	80157f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f7f7 f8e1 	bl	800cf60 <pbuf_clen>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015da2:	4b0c      	ldr	r3, [pc, #48]	@ (8015dd4 <ip4_reass+0x2b0>)
 8015da4:	881b      	ldrh	r3, [r3, #0]
 8015da6:	8c3a      	ldrh	r2, [r7, #32]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d906      	bls.n	8015dba <ip4_reass+0x296>
 8015dac:	4b0b      	ldr	r3, [pc, #44]	@ (8015ddc <ip4_reass+0x2b8>)
 8015dae:	f240 229b 	movw	r2, #667	@ 0x29b
 8015db2:	490b      	ldr	r1, [pc, #44]	@ (8015de0 <ip4_reass+0x2bc>)
 8015db4:	480b      	ldr	r0, [pc, #44]	@ (8015de4 <ip4_reass+0x2c0>)
 8015db6:	f7eb f98b 	bl	80010d0 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015dba:	4b06      	ldr	r3, [pc, #24]	@ (8015dd4 <ip4_reass+0x2b0>)
 8015dbc:	881a      	ldrh	r2, [r3, #0]
 8015dbe:	8c3b      	ldrh	r3, [r7, #32]
 8015dc0:	1ad3      	subs	r3, r2, r3
 8015dc2:	b29a      	uxth	r2, r3
 8015dc4:	4b03      	ldr	r3, [pc, #12]	@ (8015dd4 <ip4_reass+0x2b0>)
 8015dc6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	e038      	b.n	8015e3e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	e036      	b.n	8015e3e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015dd0:	bf00      	nop
 8015dd2:	e00a      	b.n	8015dea <ip4_reass+0x2c6>
 8015dd4:	2000c6fc 	.word	0x2000c6fc
 8015dd8:	2000c6f8 	.word	0x2000c6f8
 8015ddc:	0801aaa0 	.word	0x0801aaa0
 8015de0:	0801ac10 	.word	0x0801ac10
 8015de4:	0801aae8 	.word	0x0801aae8
    goto nullreturn_ipr;
 8015de8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d106      	bne.n	8015dfe <ip4_reass+0x2da>
 8015df0:	4b15      	ldr	r3, [pc, #84]	@ (8015e48 <ip4_reass+0x324>)
 8015df2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015df6:	4915      	ldr	r1, [pc, #84]	@ (8015e4c <ip4_reass+0x328>)
 8015df8:	4815      	ldr	r0, [pc, #84]	@ (8015e50 <ip4_reass+0x32c>)
 8015dfa:	f7eb f969 	bl	80010d0 <printf>
  if (ipr->p == NULL) {
 8015dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d116      	bne.n	8015e34 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015e06:	4b13      	ldr	r3, [pc, #76]	@ (8015e54 <ip4_reass+0x330>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d006      	beq.n	8015e1e <ip4_reass+0x2fa>
 8015e10:	4b0d      	ldr	r3, [pc, #52]	@ (8015e48 <ip4_reass+0x324>)
 8015e12:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015e16:	4910      	ldr	r1, [pc, #64]	@ (8015e58 <ip4_reass+0x334>)
 8015e18:	480d      	ldr	r0, [pc, #52]	@ (8015e50 <ip4_reass+0x32c>)
 8015e1a:	f7eb f959 	bl	80010d0 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015e1e:	2100      	movs	r1, #0
 8015e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e22:	f7ff fce7 	bl	80157f4 <ip_reass_dequeue_datagram>
 8015e26:	e006      	b.n	8015e36 <ip4_reass+0x312>
    goto nullreturn;
 8015e28:	bf00      	nop
 8015e2a:	e004      	b.n	8015e36 <ip4_reass+0x312>
    goto nullreturn;
 8015e2c:	bf00      	nop
 8015e2e:	e002      	b.n	8015e36 <ip4_reass+0x312>
      goto nullreturn;
 8015e30:	bf00      	nop
 8015e32:	e000      	b.n	8015e36 <ip4_reass+0x312>
  }

nullreturn:
 8015e34:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f7f7 f804 	bl	800ce44 <pbuf_free>
  return NULL;
 8015e3c:	2300      	movs	r3, #0
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3738      	adds	r7, #56	@ 0x38
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	0801aaa0 	.word	0x0801aaa0
 8015e4c:	0801ac2c 	.word	0x0801ac2c
 8015e50:	0801aae8 	.word	0x0801aae8
 8015e54:	2000c6f8 	.word	0x2000c6f8
 8015e58:	0801ac38 	.word	0x0801ac38

08015e5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015e60:	2005      	movs	r0, #5
 8015e62:	f7f6 f8d5 	bl	800c010 <memp_malloc>
 8015e66:	4603      	mov	r3, r0
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d106      	bne.n	8015e88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015e7a:	4b07      	ldr	r3, [pc, #28]	@ (8015e98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015e7c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015e80:	4906      	ldr	r1, [pc, #24]	@ (8015e9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015e82:	4807      	ldr	r0, [pc, #28]	@ (8015ea0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015e84:	f7eb f924 	bl	80010d0 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015e88:	6879      	ldr	r1, [r7, #4]
 8015e8a:	2005      	movs	r0, #5
 8015e8c:	f7f6 f936 	bl	800c0fc <memp_free>
}
 8015e90:	bf00      	nop
 8015e92:	3708      	adds	r7, #8
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}
 8015e98:	0801aaa0 	.word	0x0801aaa0
 8015e9c:	0801ac58 	.word	0x0801ac58
 8015ea0:	0801aae8 	.word	0x0801aae8

08015ea4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d106      	bne.n	8015ec4 <ipfrag_free_pbuf_custom+0x20>
 8015eb6:	4b11      	ldr	r3, [pc, #68]	@ (8015efc <ipfrag_free_pbuf_custom+0x58>)
 8015eb8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015ebc:	4910      	ldr	r1, [pc, #64]	@ (8015f00 <ipfrag_free_pbuf_custom+0x5c>)
 8015ebe:	4811      	ldr	r0, [pc, #68]	@ (8015f04 <ipfrag_free_pbuf_custom+0x60>)
 8015ec0:	f7eb f906 	bl	80010d0 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015ec4:	68fa      	ldr	r2, [r7, #12]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	d006      	beq.n	8015eda <ipfrag_free_pbuf_custom+0x36>
 8015ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8015efc <ipfrag_free_pbuf_custom+0x58>)
 8015ece:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015ed2:	490d      	ldr	r1, [pc, #52]	@ (8015f08 <ipfrag_free_pbuf_custom+0x64>)
 8015ed4:	480b      	ldr	r0, [pc, #44]	@ (8015f04 <ipfrag_free_pbuf_custom+0x60>)
 8015ed6:	f7eb f8fb 	bl	80010d0 <printf>
  if (pcr->original != NULL) {
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	695b      	ldr	r3, [r3, #20]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d004      	beq.n	8015eec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	695b      	ldr	r3, [r3, #20]
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7f6 ffac 	bl	800ce44 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015eec:	68f8      	ldr	r0, [r7, #12]
 8015eee:	f7ff ffbd 	bl	8015e6c <ip_frag_free_pbuf_custom_ref>
}
 8015ef2:	bf00      	nop
 8015ef4:	3710      	adds	r7, #16
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	0801aaa0 	.word	0x0801aaa0
 8015f00:	0801ac64 	.word	0x0801ac64
 8015f04:	0801aae8 	.word	0x0801aae8
 8015f08:	0801ac70 	.word	0x0801ac70

08015f0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b094      	sub	sp, #80	@ 0x50
 8015f10:	af02      	add	r7, sp, #8
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015f22:	3b14      	subs	r3, #20
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	da00      	bge.n	8015f2a <ip4_frag+0x1e>
 8015f28:	3307      	adds	r3, #7
 8015f2a:	10db      	asrs	r3, r3, #3
 8015f2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015f2e:	2314      	movs	r3, #20
 8015f30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	f003 030f 	and.w	r3, r3, #15
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	009b      	lsls	r3, r3, #2
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	2b14      	cmp	r3, #20
 8015f4c:	d002      	beq.n	8015f54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015f4e:	f06f 0305 	mvn.w	r3, #5
 8015f52:	e110      	b.n	8016176 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	895b      	ldrh	r3, [r3, #10]
 8015f58:	2b13      	cmp	r3, #19
 8015f5a:	d809      	bhi.n	8015f70 <ip4_frag+0x64>
 8015f5c:	4b88      	ldr	r3, [pc, #544]	@ (8016180 <ip4_frag+0x274>)
 8015f5e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015f62:	4988      	ldr	r1, [pc, #544]	@ (8016184 <ip4_frag+0x278>)
 8015f64:	4888      	ldr	r0, [pc, #544]	@ (8016188 <ip4_frag+0x27c>)
 8015f66:	f7eb f8b3 	bl	80010d0 <printf>
 8015f6a:	f06f 0305 	mvn.w	r3, #5
 8015f6e:	e102      	b.n	8016176 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f72:	88db      	ldrh	r3, [r3, #6]
 8015f74:	b29b      	uxth	r3, r3
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7f5 fb72 	bl	800b660 <lwip_htons>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015f80:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015f82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015f8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	891b      	ldrh	r3, [r3, #8]
 8015f96:	3b14      	subs	r3, #20
 8015f98:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015f9c:	e0e1      	b.n	8016162 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015f9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015fa0:	00db      	lsls	r3, r3, #3
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015fa8:	4293      	cmp	r3, r2
 8015faa:	bf28      	it	cs
 8015fac:	4613      	movcs	r3, r2
 8015fae:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015fb0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015fb4:	2114      	movs	r1, #20
 8015fb6:	200e      	movs	r0, #14
 8015fb8:	f7f6 fc60 	bl	800c87c <pbuf_alloc>
 8015fbc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	f000 80d5 	beq.w	8016170 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc8:	895b      	ldrh	r3, [r3, #10]
 8015fca:	2b13      	cmp	r3, #19
 8015fcc:	d806      	bhi.n	8015fdc <ip4_frag+0xd0>
 8015fce:	4b6c      	ldr	r3, [pc, #432]	@ (8016180 <ip4_frag+0x274>)
 8015fd0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015fd4:	496d      	ldr	r1, [pc, #436]	@ (801618c <ip4_frag+0x280>)
 8015fd6:	486c      	ldr	r0, [pc, #432]	@ (8016188 <ip4_frag+0x27c>)
 8015fd8:	f7eb f87a 	bl	80010d0 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	2214      	movs	r2, #20
 8015fe2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f000 fdae 	bl	8016b46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015ff0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015ff2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8015ff6:	e064      	b.n	80160c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	895a      	ldrh	r2, [r3, #10]
 8015ffc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015ffe:	1ad3      	subs	r3, r2, r3
 8016000:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	895b      	ldrh	r3, [r3, #10]
 8016006:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016008:	429a      	cmp	r2, r3
 801600a:	d906      	bls.n	801601a <ip4_frag+0x10e>
 801600c:	4b5c      	ldr	r3, [pc, #368]	@ (8016180 <ip4_frag+0x274>)
 801600e:	f240 322d 	movw	r2, #813	@ 0x32d
 8016012:	495f      	ldr	r1, [pc, #380]	@ (8016190 <ip4_frag+0x284>)
 8016014:	485c      	ldr	r0, [pc, #368]	@ (8016188 <ip4_frag+0x27c>)
 8016016:	f7eb f85b 	bl	80010d0 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801601a:	8bfa      	ldrh	r2, [r7, #30]
 801601c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016020:	4293      	cmp	r3, r2
 8016022:	bf28      	it	cs
 8016024:	4613      	movcs	r3, r2
 8016026:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801602a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801602e:	2b00      	cmp	r3, #0
 8016030:	d105      	bne.n	801603e <ip4_frag+0x132>
        poff = 0;
 8016032:	2300      	movs	r3, #0
 8016034:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	60fb      	str	r3, [r7, #12]
        continue;
 801603c:	e041      	b.n	80160c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801603e:	f7ff ff0d 	bl	8015e5c <ip_frag_alloc_pbuf_custom_ref>
 8016042:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016044:	69bb      	ldr	r3, [r7, #24]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d103      	bne.n	8016052 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801604a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801604c:	f7f6 fefa 	bl	800ce44 <pbuf_free>
        goto memerr;
 8016050:	e08f      	b.n	8016172 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016052:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016058:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801605a:	4413      	add	r3, r2
 801605c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016060:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016064:	9201      	str	r2, [sp, #4]
 8016066:	9300      	str	r3, [sp, #0]
 8016068:	4603      	mov	r3, r0
 801606a:	2241      	movs	r2, #65	@ 0x41
 801606c:	2000      	movs	r0, #0
 801606e:	f7f6 fd2f 	bl	800cad0 <pbuf_alloced_custom>
 8016072:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d106      	bne.n	8016088 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801607a:	69b8      	ldr	r0, [r7, #24]
 801607c:	f7ff fef6 	bl	8015e6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016080:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016082:	f7f6 fedf 	bl	800ce44 <pbuf_free>
        goto memerr;
 8016086:	e074      	b.n	8016172 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f7f6 ff81 	bl	800cf90 <pbuf_ref>
      pcr->original = p;
 801608e:	69bb      	ldr	r3, [r7, #24]
 8016090:	68fa      	ldr	r2, [r7, #12]
 8016092:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016094:	69bb      	ldr	r3, [r7, #24]
 8016096:	4a3f      	ldr	r2, [pc, #252]	@ (8016194 <ip4_frag+0x288>)
 8016098:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801609a:	6979      	ldr	r1, [r7, #20]
 801609c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801609e:	f7f6 ff9f 	bl	800cfe0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80160a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80160a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80160aa:	1ad3      	subs	r3, r2, r3
 80160ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80160b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d004      	beq.n	80160c2 <ip4_frag+0x1b6>
        poff = 0;
 80160b8:	2300      	movs	r3, #0
 80160ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80160c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d196      	bne.n	8015ff8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80160ca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80160cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80160d0:	4413      	add	r3, r2
 80160d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80160d8:	f1a3 0213 	sub.w	r2, r3, #19
 80160dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80160e0:	429a      	cmp	r2, r3
 80160e2:	bfcc      	ite	gt
 80160e4:	2301      	movgt	r3, #1
 80160e6:	2300      	movle	r3, #0
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80160ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80160f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80160f6:	6a3b      	ldr	r3, [r7, #32]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <ip4_frag+0x1f6>
 80160fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d003      	beq.n	801610a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016102:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016104:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016108:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801610a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801610c:	4618      	mov	r0, r3
 801610e:	f7f5 faa7 	bl	800b660 <lwip_htons>
 8016112:	4603      	mov	r3, r0
 8016114:	461a      	mov	r2, r3
 8016116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016118:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801611a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801611c:	3314      	adds	r3, #20
 801611e:	b29b      	uxth	r3, r3
 8016120:	4618      	mov	r0, r3
 8016122:	f7f5 fa9d 	bl	800b660 <lwip_htons>
 8016126:	4603      	mov	r3, r0
 8016128:	461a      	mov	r2, r3
 801612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801612c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016130:	2200      	movs	r2, #0
 8016132:	729a      	strb	r2, [r3, #10]
 8016134:	2200      	movs	r2, #0
 8016136:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	695b      	ldr	r3, [r3, #20]
 801613c:	687a      	ldr	r2, [r7, #4]
 801613e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016140:	68b8      	ldr	r0, [r7, #8]
 8016142:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016146:	f7f6 fe7d 	bl	800ce44 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801614a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801614e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016150:	1ad3      	subs	r3, r2, r3
 8016152:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016156:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801615a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801615c:	4413      	add	r3, r2
 801615e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016162:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016166:	2b00      	cmp	r3, #0
 8016168:	f47f af19 	bne.w	8015f9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801616c:	2300      	movs	r3, #0
 801616e:	e002      	b.n	8016176 <ip4_frag+0x26a>
      goto memerr;
 8016170:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016176:	4618      	mov	r0, r3
 8016178:	3748      	adds	r7, #72	@ 0x48
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}
 801617e:	bf00      	nop
 8016180:	0801aaa0 	.word	0x0801aaa0
 8016184:	0801ac7c 	.word	0x0801ac7c
 8016188:	0801aae8 	.word	0x0801aae8
 801618c:	0801ac98 	.word	0x0801ac98
 8016190:	0801acb8 	.word	0x0801acb8
 8016194:	08015ea5 	.word	0x08015ea5

08016198 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b086      	sub	sp, #24
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80161a2:	230e      	movs	r3, #14
 80161a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	895b      	ldrh	r3, [r3, #10]
 80161aa:	2b0e      	cmp	r3, #14
 80161ac:	d96e      	bls.n	801628c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	7bdb      	ldrb	r3, [r3, #15]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d106      	bne.n	80161c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80161bc:	3301      	adds	r3, #1
 80161be:	b2da      	uxtb	r2, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	685b      	ldr	r3, [r3, #4]
 80161c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	7b1a      	ldrb	r2, [r3, #12]
 80161ce:	7b5b      	ldrb	r3, [r3, #13]
 80161d0:	021b      	lsls	r3, r3, #8
 80161d2:	4313      	orrs	r3, r2
 80161d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	f003 0301 	and.w	r3, r3, #1
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d023      	beq.n	801622a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	d10f      	bne.n	801620a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	785b      	ldrb	r3, [r3, #1]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d11b      	bne.n	801622a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80161f2:	693b      	ldr	r3, [r7, #16]
 80161f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80161f6:	2b5e      	cmp	r3, #94	@ 0x5e
 80161f8:	d117      	bne.n	801622a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	7b5b      	ldrb	r3, [r3, #13]
 80161fe:	f043 0310 	orr.w	r3, r3, #16
 8016202:	b2da      	uxtb	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	735a      	strb	r2, [r3, #13]
 8016208:	e00f      	b.n	801622a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801620a:	693b      	ldr	r3, [r7, #16]
 801620c:	2206      	movs	r2, #6
 801620e:	4928      	ldr	r1, [pc, #160]	@ (80162b0 <ethernet_input+0x118>)
 8016210:	4618      	mov	r0, r3
 8016212:	f000 fbbc 	bl	801698e <memcmp>
 8016216:	4603      	mov	r3, r0
 8016218:	2b00      	cmp	r3, #0
 801621a:	d106      	bne.n	801622a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	7b5b      	ldrb	r3, [r3, #13]
 8016220:	f043 0308 	orr.w	r3, r3, #8
 8016224:	b2da      	uxtb	r2, r3
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801622a:	89fb      	ldrh	r3, [r7, #14]
 801622c:	2b08      	cmp	r3, #8
 801622e:	d003      	beq.n	8016238 <ethernet_input+0xa0>
 8016230:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016234:	d014      	beq.n	8016260 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016236:	e032      	b.n	801629e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801623e:	f003 0308 	and.w	r3, r3, #8
 8016242:	2b00      	cmp	r3, #0
 8016244:	d024      	beq.n	8016290 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016246:	8afb      	ldrh	r3, [r7, #22]
 8016248:	4619      	mov	r1, r3
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f7f6 fd74 	bl	800cd38 <pbuf_remove_header>
 8016250:	4603      	mov	r3, r0
 8016252:	2b00      	cmp	r3, #0
 8016254:	d11e      	bne.n	8016294 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016256:	6839      	ldr	r1, [r7, #0]
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f7fe ff21 	bl	80150a0 <ip4_input>
      break;
 801625e:	e013      	b.n	8016288 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016266:	f003 0308 	and.w	r3, r3, #8
 801626a:	2b00      	cmp	r3, #0
 801626c:	d014      	beq.n	8016298 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801626e:	8afb      	ldrh	r3, [r7, #22]
 8016270:	4619      	mov	r1, r3
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f7f6 fd60 	bl	800cd38 <pbuf_remove_header>
 8016278:	4603      	mov	r3, r0
 801627a:	2b00      	cmp	r3, #0
 801627c:	d10e      	bne.n	801629c <ethernet_input+0x104>
        etharp_input(p, netif);
 801627e:	6839      	ldr	r1, [r7, #0]
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f7fe f8c1 	bl	8014408 <etharp_input>
      break;
 8016286:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016288:	2300      	movs	r3, #0
 801628a:	e00c      	b.n	80162a6 <ethernet_input+0x10e>
    goto free_and_return;
 801628c:	bf00      	nop
 801628e:	e006      	b.n	801629e <ethernet_input+0x106>
        goto free_and_return;
 8016290:	bf00      	nop
 8016292:	e004      	b.n	801629e <ethernet_input+0x106>
        goto free_and_return;
 8016294:	bf00      	nop
 8016296:	e002      	b.n	801629e <ethernet_input+0x106>
        goto free_and_return;
 8016298:	bf00      	nop
 801629a:	e000      	b.n	801629e <ethernet_input+0x106>
        goto free_and_return;
 801629c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f7f6 fdd0 	bl	800ce44 <pbuf_free>
  return ERR_OK;
 80162a4:	2300      	movs	r3, #0
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3718      	adds	r7, #24
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	0801ae98 	.word	0x0801ae98

080162b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	607a      	str	r2, [r7, #4]
 80162c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80162c2:	8c3b      	ldrh	r3, [r7, #32]
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7f5 f9cb 	bl	800b660 <lwip_htons>
 80162ca:	4603      	mov	r3, r0
 80162cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80162ce:	210e      	movs	r1, #14
 80162d0:	68b8      	ldr	r0, [r7, #8]
 80162d2:	f7f6 fd21 	bl	800cd18 <pbuf_add_header>
 80162d6:	4603      	mov	r3, r0
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d125      	bne.n	8016328 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	8afa      	ldrh	r2, [r7, #22]
 80162e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	2206      	movs	r2, #6
 80162ec:	6839      	ldr	r1, [r7, #0]
 80162ee:	4618      	mov	r0, r3
 80162f0:	f000 fc29 	bl	8016b46 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80162f4:	693b      	ldr	r3, [r7, #16]
 80162f6:	3306      	adds	r3, #6
 80162f8:	2206      	movs	r2, #6
 80162fa:	6879      	ldr	r1, [r7, #4]
 80162fc:	4618      	mov	r0, r3
 80162fe:	f000 fc22 	bl	8016b46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016308:	2b06      	cmp	r3, #6
 801630a:	d006      	beq.n	801631a <ethernet_output+0x66>
 801630c:	4b0a      	ldr	r3, [pc, #40]	@ (8016338 <ethernet_output+0x84>)
 801630e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016312:	490a      	ldr	r1, [pc, #40]	@ (801633c <ethernet_output+0x88>)
 8016314:	480a      	ldr	r0, [pc, #40]	@ (8016340 <ethernet_output+0x8c>)
 8016316:	f7ea fedb 	bl	80010d0 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	699b      	ldr	r3, [r3, #24]
 801631e:	68b9      	ldr	r1, [r7, #8]
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	4798      	blx	r3
 8016324:	4603      	mov	r3, r0
 8016326:	e002      	b.n	801632e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016328:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801632a:	f06f 0301 	mvn.w	r3, #1
}
 801632e:	4618      	mov	r0, r3
 8016330:	3718      	adds	r7, #24
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop
 8016338:	0801acc8 	.word	0x0801acc8
 801633c:	0801ad00 	.word	0x0801ad00
 8016340:	0801ad34 	.word	0x0801ad34

08016344 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b086      	sub	sp, #24
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	60bb      	str	r3, [r7, #8]
 8016352:	2304      	movs	r3, #4
 8016354:	60fb      	str	r3, [r7, #12]
 8016356:	2300      	movs	r3, #0
 8016358:	613b      	str	r3, [r7, #16]
 801635a:	2300      	movs	r3, #0
 801635c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801635e:	f107 0308 	add.w	r3, r7, #8
 8016362:	2100      	movs	r1, #0
 8016364:	4618      	mov	r0, r3
 8016366:	f7f0 fabc 	bl	80068e2 <osMessageCreate>
 801636a:	4602      	mov	r2, r0
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d102      	bne.n	801637e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016378:	f04f 33ff 	mov.w	r3, #4294967295
 801637c:	e000      	b.n	8016380 <sys_mbox_new+0x3c>

  return ERR_OK;
 801637e:	2300      	movs	r3, #0
}
 8016380:	4618      	mov	r0, r3
 8016382:	3718      	adds	r7, #24
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b082      	sub	sp, #8
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	4618      	mov	r0, r3
 8016396:	f7f0 fb81 	bl	8006a9c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	4618      	mov	r0, r3
 80163a0:	f7f0 fb92 	bl	8006ac8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80163a4:	bf00      	nop
 80163a6:	3708      	adds	r7, #8
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
 80163b4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	6839      	ldr	r1, [r7, #0]
 80163bc:	2200      	movs	r2, #0
 80163be:	4618      	mov	r0, r3
 80163c0:	f7f0 fab8 	bl	8006934 <osMessagePut>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d102      	bne.n	80163d0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	73fb      	strb	r3, [r7, #15]
 80163ce:	e001      	b.n	80163d4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80163d0:	23ff      	movs	r3, #255	@ 0xff
 80163d2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80163d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3710      	adds	r7, #16
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}

080163e0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b08c      	sub	sp, #48	@ 0x30
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	61f8      	str	r0, [r7, #28]
 80163e8:	61b9      	str	r1, [r7, #24]
 80163ea:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80163ec:	f7f0 f897 	bl	800651e <osKernelSysTick>
 80163f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d017      	beq.n	8016428 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	6819      	ldr	r1, [r3, #0]
 80163fc:	f107 0320 	add.w	r3, r7, #32
 8016400:	697a      	ldr	r2, [r7, #20]
 8016402:	4618      	mov	r0, r3
 8016404:	f7f0 fad6 	bl	80069b4 <osMessageGet>

    if(event.status == osEventMessage)
 8016408:	6a3b      	ldr	r3, [r7, #32]
 801640a:	2b10      	cmp	r3, #16
 801640c:	d109      	bne.n	8016422 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016410:	461a      	mov	r2, r3
 8016412:	69bb      	ldr	r3, [r7, #24]
 8016414:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016416:	f7f0 f882 	bl	800651e <osKernelSysTick>
 801641a:	4602      	mov	r2, r0
 801641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801641e:	1ad3      	subs	r3, r2, r3
 8016420:	e019      	b.n	8016456 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016422:	f04f 33ff 	mov.w	r3, #4294967295
 8016426:	e016      	b.n	8016456 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016428:	69fb      	ldr	r3, [r7, #28]
 801642a:	6819      	ldr	r1, [r3, #0]
 801642c:	463b      	mov	r3, r7
 801642e:	f04f 32ff 	mov.w	r2, #4294967295
 8016432:	4618      	mov	r0, r3
 8016434:	f7f0 fabe 	bl	80069b4 <osMessageGet>
 8016438:	f107 0320 	add.w	r3, r7, #32
 801643c:	463a      	mov	r2, r7
 801643e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016440:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016446:	461a      	mov	r2, r3
 8016448:	69bb      	ldr	r3, [r7, #24]
 801644a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801644c:	f7f0 f867 	bl	800651e <osKernelSysTick>
 8016450:	4602      	mov	r2, r0
 8016452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016454:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016456:	4618      	mov	r0, r3
 8016458:	3730      	adds	r7, #48	@ 0x30
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}

0801645e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801645e:	b580      	push	{r7, lr}
 8016460:	b086      	sub	sp, #24
 8016462:	af00      	add	r7, sp, #0
 8016464:	6078      	str	r0, [r7, #4]
 8016466:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6819      	ldr	r1, [r3, #0]
 801646c:	f107 030c 	add.w	r3, r7, #12
 8016470:	2200      	movs	r2, #0
 8016472:	4618      	mov	r0, r3
 8016474:	f7f0 fa9e 	bl	80069b4 <osMessageGet>

  if(event.status == osEventMessage)
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	2b10      	cmp	r3, #16
 801647c:	d105      	bne.n	801648a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	461a      	mov	r2, r3
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016486:	2300      	movs	r3, #0
 8016488:	e001      	b.n	801648e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801648a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801648e:	4618      	mov	r0, r3
 8016490:	3718      	adds	r7, #24
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}

08016496 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016496:	b480      	push	{r7}
 8016498:	b083      	sub	sp, #12
 801649a:	af00      	add	r7, sp, #0
 801649c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d101      	bne.n	80164aa <sys_mbox_valid+0x14>
    return 0;
 80164a6:	2300      	movs	r3, #0
 80164a8:	e000      	b.n	80164ac <sys_mbox_valid+0x16>
  else
    return 1;
 80164aa:	2301      	movs	r3, #1
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	370c      	adds	r7, #12
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr

080164b8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80164b8:	b480      	push	{r7}
 80164ba:	b083      	sub	sp, #12
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	601a      	str	r2, [r3, #0]
}
 80164c6:	bf00      	nop
 80164c8:	370c      	adds	r7, #12
 80164ca:	46bd      	mov	sp, r7
 80164cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d0:	4770      	bx	lr

080164d2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80164d2:	b580      	push	{r7, lr}
 80164d4:	b084      	sub	sp, #16
 80164d6:	af00      	add	r7, sp, #0
 80164d8:	6078      	str	r0, [r7, #4]
 80164da:	460b      	mov	r3, r1
 80164dc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80164de:	2300      	movs	r3, #0
 80164e0:	60bb      	str	r3, [r7, #8]
 80164e2:	2300      	movs	r3, #0
 80164e4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80164e6:	f107 0308 	add.w	r3, r7, #8
 80164ea:	2101      	movs	r1, #1
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7f0 f92f 	bl	8006750 <osSemaphoreCreate>
 80164f2:	4602      	mov	r2, r0
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d102      	bne.n	8016506 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016500:	f04f 33ff 	mov.w	r3, #4294967295
 8016504:	e009      	b.n	801651a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016506:	78fb      	ldrb	r3, [r7, #3]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d105      	bne.n	8016518 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	2100      	movs	r1, #0
 8016512:	4618      	mov	r0, r3
 8016514:	f7f0 f94e 	bl	80067b4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016518:	2300      	movs	r3, #0
}
 801651a:	4618      	mov	r0, r3
 801651c:	3710      	adds	r7, #16
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016522:	b580      	push	{r7, lr}
 8016524:	b084      	sub	sp, #16
 8016526:	af00      	add	r7, sp, #0
 8016528:	6078      	str	r0, [r7, #4]
 801652a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801652c:	f7ef fff7 	bl	800651e <osKernelSysTick>
 8016530:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d011      	beq.n	801655c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	6839      	ldr	r1, [r7, #0]
 801653e:	4618      	mov	r0, r3
 8016540:	f7f0 f938 	bl	80067b4 <osSemaphoreWait>
 8016544:	4603      	mov	r3, r0
 8016546:	2b00      	cmp	r3, #0
 8016548:	d105      	bne.n	8016556 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801654a:	f7ef ffe8 	bl	800651e <osKernelSysTick>
 801654e:	4602      	mov	r2, r0
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	1ad3      	subs	r3, r2, r3
 8016554:	e012      	b.n	801657c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016556:	f04f 33ff 	mov.w	r3, #4294967295
 801655a:	e00f      	b.n	801657c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801655c:	bf00      	nop
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	f04f 31ff 	mov.w	r1, #4294967295
 8016566:	4618      	mov	r0, r3
 8016568:	f7f0 f924 	bl	80067b4 <osSemaphoreWait>
 801656c:	4603      	mov	r3, r0
 801656e:	2b00      	cmp	r3, #0
 8016570:	d1f5      	bne.n	801655e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016572:	f7ef ffd4 	bl	800651e <osKernelSysTick>
 8016576:	4602      	mov	r2, r0
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801657c:	4618      	mov	r0, r3
 801657e:	3710      	adds	r7, #16
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}

08016584 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b082      	sub	sp, #8
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	4618      	mov	r0, r3
 8016592:	f7f0 f95d 	bl	8006850 <osSemaphoreRelease>
}
 8016596:	bf00      	nop
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}

0801659e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801659e:	b580      	push	{r7, lr}
 80165a0:	b082      	sub	sp, #8
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7f0 f986 	bl	80068bc <osSemaphoreDelete>
}
 80165b0:	bf00      	nop
 80165b2:	3708      	adds	r7, #8
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80165b8:	b480      	push	{r7}
 80165ba:	b083      	sub	sp, #12
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d101      	bne.n	80165cc <sys_sem_valid+0x14>
    return 0;
 80165c8:	2300      	movs	r3, #0
 80165ca:	e000      	b.n	80165ce <sys_sem_valid+0x16>
  else
    return 1;
 80165cc:	2301      	movs	r3, #1
}
 80165ce:	4618      	mov	r0, r3
 80165d0:	370c      	adds	r7, #12
 80165d2:	46bd      	mov	sp, r7
 80165d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d8:	4770      	bx	lr

080165da <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80165da:	b480      	push	{r7}
 80165dc:	b083      	sub	sp, #12
 80165de:	af00      	add	r7, sp, #0
 80165e0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2200      	movs	r2, #0
 80165e6:	601a      	str	r2, [r3, #0]
}
 80165e8:	bf00      	nop
 80165ea:	370c      	adds	r7, #12
 80165ec:	46bd      	mov	sp, r7
 80165ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f2:	4770      	bx	lr

080165f4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80165f8:	4803      	ldr	r0, [pc, #12]	@ (8016608 <sys_init+0x14>)
 80165fa:	f7f0 f80c 	bl	8006616 <osMutexCreate>
 80165fe:	4603      	mov	r3, r0
 8016600:	4a02      	ldr	r2, [pc, #8]	@ (801660c <sys_init+0x18>)
 8016602:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016604:	bf00      	nop
 8016606:	bd80      	pop	{r7, pc}
 8016608:	0801aea8 	.word	0x0801aea8
 801660c:	2000c700 	.word	0x2000c700

08016610 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016618:	2300      	movs	r3, #0
 801661a:	60bb      	str	r3, [r7, #8]
 801661c:	2300      	movs	r3, #0
 801661e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016620:	f107 0308 	add.w	r3, r7, #8
 8016624:	4618      	mov	r0, r3
 8016626:	f7ef fff6 	bl	8006616 <osMutexCreate>
 801662a:	4602      	mov	r2, r0
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d102      	bne.n	801663e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016638:	f04f 33ff 	mov.w	r3, #4294967295
 801663c:	e000      	b.n	8016640 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801663e:	2300      	movs	r3, #0
}
 8016640:	4618      	mov	r0, r3
 8016642:	3710      	adds	r7, #16
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}

08016648 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	f04f 31ff 	mov.w	r1, #4294967295
 8016658:	4618      	mov	r0, r3
 801665a:	f7ef fff5 	bl	8006648 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801665e:	bf00      	nop
 8016660:	3708      	adds	r7, #8
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}

08016666 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016666:	b580      	push	{r7, lr}
 8016668:	b082      	sub	sp, #8
 801666a:	af00      	add	r7, sp, #0
 801666c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	4618      	mov	r0, r3
 8016674:	f7f0 f836 	bl	80066e4 <osMutexRelease>
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b08c      	sub	sp, #48	@ 0x30
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	607a      	str	r2, [r7, #4]
 801668c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801668e:	f107 0314 	add.w	r3, r7, #20
 8016692:	2200      	movs	r2, #0
 8016694:	601a      	str	r2, [r3, #0]
 8016696:	605a      	str	r2, [r3, #4]
 8016698:	609a      	str	r2, [r3, #8]
 801669a:	60da      	str	r2, [r3, #12]
 801669c:	611a      	str	r2, [r3, #16]
 801669e:	615a      	str	r2, [r3, #20]
 80166a0:	619a      	str	r2, [r3, #24]
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	617b      	str	r3, [r7, #20]
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	61bb      	str	r3, [r7, #24]
 80166aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ac:	b21b      	sxth	r3, r3
 80166ae:	83bb      	strh	r3, [r7, #28]
 80166b0:	683b      	ldr	r3, [r7, #0]
 80166b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80166b4:	f107 0314 	add.w	r3, r7, #20
 80166b8:	6879      	ldr	r1, [r7, #4]
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7ef ff3f 	bl	800653e <osThreadCreate>
 80166c0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3730      	adds	r7, #48	@ 0x30
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
	...

080166cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80166d0:	4b04      	ldr	r3, [pc, #16]	@ (80166e4 <sys_arch_protect+0x18>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	f04f 31ff 	mov.w	r1, #4294967295
 80166d8:	4618      	mov	r0, r3
 80166da:	f7ef ffb5 	bl	8006648 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80166de:	2301      	movs	r3, #1
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	bd80      	pop	{r7, pc}
 80166e4:	2000c700 	.word	0x2000c700

080166e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80166f0:	4b04      	ldr	r3, [pc, #16]	@ (8016704 <sys_arch_unprotect+0x1c>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4618      	mov	r0, r3
 80166f6:	f7ef fff5 	bl	80066e4 <osMutexRelease>
}
 80166fa:	bf00      	nop
 80166fc:	3708      	adds	r7, #8
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	2000c700 	.word	0x2000c700

08016708 <rand>:
 8016708:	4b16      	ldr	r3, [pc, #88]	@ (8016764 <rand+0x5c>)
 801670a:	b510      	push	{r4, lr}
 801670c:	681c      	ldr	r4, [r3, #0]
 801670e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016710:	b9b3      	cbnz	r3, 8016740 <rand+0x38>
 8016712:	2018      	movs	r0, #24
 8016714:	f000 fa8e 	bl	8016c34 <malloc>
 8016718:	4602      	mov	r2, r0
 801671a:	6320      	str	r0, [r4, #48]	@ 0x30
 801671c:	b920      	cbnz	r0, 8016728 <rand+0x20>
 801671e:	4b12      	ldr	r3, [pc, #72]	@ (8016768 <rand+0x60>)
 8016720:	4812      	ldr	r0, [pc, #72]	@ (801676c <rand+0x64>)
 8016722:	2152      	movs	r1, #82	@ 0x52
 8016724:	f000 fa1e 	bl	8016b64 <__assert_func>
 8016728:	4911      	ldr	r1, [pc, #68]	@ (8016770 <rand+0x68>)
 801672a:	4b12      	ldr	r3, [pc, #72]	@ (8016774 <rand+0x6c>)
 801672c:	e9c0 1300 	strd	r1, r3, [r0]
 8016730:	4b11      	ldr	r3, [pc, #68]	@ (8016778 <rand+0x70>)
 8016732:	6083      	str	r3, [r0, #8]
 8016734:	230b      	movs	r3, #11
 8016736:	8183      	strh	r3, [r0, #12]
 8016738:	2100      	movs	r1, #0
 801673a:	2001      	movs	r0, #1
 801673c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016740:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016742:	480e      	ldr	r0, [pc, #56]	@ (801677c <rand+0x74>)
 8016744:	690b      	ldr	r3, [r1, #16]
 8016746:	694c      	ldr	r4, [r1, #20]
 8016748:	4a0d      	ldr	r2, [pc, #52]	@ (8016780 <rand+0x78>)
 801674a:	4358      	muls	r0, r3
 801674c:	fb02 0004 	mla	r0, r2, r4, r0
 8016750:	fba3 3202 	umull	r3, r2, r3, r2
 8016754:	3301      	adds	r3, #1
 8016756:	eb40 0002 	adc.w	r0, r0, r2
 801675a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801675e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016762:	bd10      	pop	{r4, pc}
 8016764:	2000003c 	.word	0x2000003c
 8016768:	0801aeb0 	.word	0x0801aeb0
 801676c:	0801aec7 	.word	0x0801aec7
 8016770:	abcd330e 	.word	0xabcd330e
 8016774:	e66d1234 	.word	0xe66d1234
 8016778:	0005deec 	.word	0x0005deec
 801677c:	5851f42d 	.word	0x5851f42d
 8016780:	4c957f2d 	.word	0x4c957f2d

08016784 <std>:
 8016784:	2300      	movs	r3, #0
 8016786:	b510      	push	{r4, lr}
 8016788:	4604      	mov	r4, r0
 801678a:	e9c0 3300 	strd	r3, r3, [r0]
 801678e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016792:	6083      	str	r3, [r0, #8]
 8016794:	8181      	strh	r1, [r0, #12]
 8016796:	6643      	str	r3, [r0, #100]	@ 0x64
 8016798:	81c2      	strh	r2, [r0, #14]
 801679a:	6183      	str	r3, [r0, #24]
 801679c:	4619      	mov	r1, r3
 801679e:	2208      	movs	r2, #8
 80167a0:	305c      	adds	r0, #92	@ 0x5c
 80167a2:	f000 f904 	bl	80169ae <memset>
 80167a6:	4b0d      	ldr	r3, [pc, #52]	@ (80167dc <std+0x58>)
 80167a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80167aa:	4b0d      	ldr	r3, [pc, #52]	@ (80167e0 <std+0x5c>)
 80167ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80167ae:	4b0d      	ldr	r3, [pc, #52]	@ (80167e4 <std+0x60>)
 80167b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80167b2:	4b0d      	ldr	r3, [pc, #52]	@ (80167e8 <std+0x64>)
 80167b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80167b6:	4b0d      	ldr	r3, [pc, #52]	@ (80167ec <std+0x68>)
 80167b8:	6224      	str	r4, [r4, #32]
 80167ba:	429c      	cmp	r4, r3
 80167bc:	d006      	beq.n	80167cc <std+0x48>
 80167be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80167c2:	4294      	cmp	r4, r2
 80167c4:	d002      	beq.n	80167cc <std+0x48>
 80167c6:	33d0      	adds	r3, #208	@ 0xd0
 80167c8:	429c      	cmp	r4, r3
 80167ca:	d105      	bne.n	80167d8 <std+0x54>
 80167cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80167d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167d4:	f000 b9b4 	b.w	8016b40 <__retarget_lock_init_recursive>
 80167d8:	bd10      	pop	{r4, pc}
 80167da:	bf00      	nop
 80167dc:	08016909 	.word	0x08016909
 80167e0:	0801692b 	.word	0x0801692b
 80167e4:	08016963 	.word	0x08016963
 80167e8:	08016987 	.word	0x08016987
 80167ec:	2000c704 	.word	0x2000c704

080167f0 <stdio_exit_handler>:
 80167f0:	4a02      	ldr	r2, [pc, #8]	@ (80167fc <stdio_exit_handler+0xc>)
 80167f2:	4903      	ldr	r1, [pc, #12]	@ (8016800 <stdio_exit_handler+0x10>)
 80167f4:	4803      	ldr	r0, [pc, #12]	@ (8016804 <stdio_exit_handler+0x14>)
 80167f6:	f000 b869 	b.w	80168cc <_fwalk_sglue>
 80167fa:	bf00      	nop
 80167fc:	20000030 	.word	0x20000030
 8016800:	08016ea9 	.word	0x08016ea9
 8016804:	20000040 	.word	0x20000040

08016808 <cleanup_stdio>:
 8016808:	6841      	ldr	r1, [r0, #4]
 801680a:	4b0c      	ldr	r3, [pc, #48]	@ (801683c <cleanup_stdio+0x34>)
 801680c:	4299      	cmp	r1, r3
 801680e:	b510      	push	{r4, lr}
 8016810:	4604      	mov	r4, r0
 8016812:	d001      	beq.n	8016818 <cleanup_stdio+0x10>
 8016814:	f000 fb48 	bl	8016ea8 <_fflush_r>
 8016818:	68a1      	ldr	r1, [r4, #8]
 801681a:	4b09      	ldr	r3, [pc, #36]	@ (8016840 <cleanup_stdio+0x38>)
 801681c:	4299      	cmp	r1, r3
 801681e:	d002      	beq.n	8016826 <cleanup_stdio+0x1e>
 8016820:	4620      	mov	r0, r4
 8016822:	f000 fb41 	bl	8016ea8 <_fflush_r>
 8016826:	68e1      	ldr	r1, [r4, #12]
 8016828:	4b06      	ldr	r3, [pc, #24]	@ (8016844 <cleanup_stdio+0x3c>)
 801682a:	4299      	cmp	r1, r3
 801682c:	d004      	beq.n	8016838 <cleanup_stdio+0x30>
 801682e:	4620      	mov	r0, r4
 8016830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016834:	f000 bb38 	b.w	8016ea8 <_fflush_r>
 8016838:	bd10      	pop	{r4, pc}
 801683a:	bf00      	nop
 801683c:	2000c704 	.word	0x2000c704
 8016840:	2000c76c 	.word	0x2000c76c
 8016844:	2000c7d4 	.word	0x2000c7d4

08016848 <global_stdio_init.part.0>:
 8016848:	b510      	push	{r4, lr}
 801684a:	4b0b      	ldr	r3, [pc, #44]	@ (8016878 <global_stdio_init.part.0+0x30>)
 801684c:	4c0b      	ldr	r4, [pc, #44]	@ (801687c <global_stdio_init.part.0+0x34>)
 801684e:	4a0c      	ldr	r2, [pc, #48]	@ (8016880 <global_stdio_init.part.0+0x38>)
 8016850:	601a      	str	r2, [r3, #0]
 8016852:	4620      	mov	r0, r4
 8016854:	2200      	movs	r2, #0
 8016856:	2104      	movs	r1, #4
 8016858:	f7ff ff94 	bl	8016784 <std>
 801685c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016860:	2201      	movs	r2, #1
 8016862:	2109      	movs	r1, #9
 8016864:	f7ff ff8e 	bl	8016784 <std>
 8016868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801686c:	2202      	movs	r2, #2
 801686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016872:	2112      	movs	r1, #18
 8016874:	f7ff bf86 	b.w	8016784 <std>
 8016878:	2000c83c 	.word	0x2000c83c
 801687c:	2000c704 	.word	0x2000c704
 8016880:	080167f1 	.word	0x080167f1

08016884 <__sfp_lock_acquire>:
 8016884:	4801      	ldr	r0, [pc, #4]	@ (801688c <__sfp_lock_acquire+0x8>)
 8016886:	f000 b95c 	b.w	8016b42 <__retarget_lock_acquire_recursive>
 801688a:	bf00      	nop
 801688c:	2000c845 	.word	0x2000c845

08016890 <__sfp_lock_release>:
 8016890:	4801      	ldr	r0, [pc, #4]	@ (8016898 <__sfp_lock_release+0x8>)
 8016892:	f000 b957 	b.w	8016b44 <__retarget_lock_release_recursive>
 8016896:	bf00      	nop
 8016898:	2000c845 	.word	0x2000c845

0801689c <__sinit>:
 801689c:	b510      	push	{r4, lr}
 801689e:	4604      	mov	r4, r0
 80168a0:	f7ff fff0 	bl	8016884 <__sfp_lock_acquire>
 80168a4:	6a23      	ldr	r3, [r4, #32]
 80168a6:	b11b      	cbz	r3, 80168b0 <__sinit+0x14>
 80168a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168ac:	f7ff bff0 	b.w	8016890 <__sfp_lock_release>
 80168b0:	4b04      	ldr	r3, [pc, #16]	@ (80168c4 <__sinit+0x28>)
 80168b2:	6223      	str	r3, [r4, #32]
 80168b4:	4b04      	ldr	r3, [pc, #16]	@ (80168c8 <__sinit+0x2c>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d1f5      	bne.n	80168a8 <__sinit+0xc>
 80168bc:	f7ff ffc4 	bl	8016848 <global_stdio_init.part.0>
 80168c0:	e7f2      	b.n	80168a8 <__sinit+0xc>
 80168c2:	bf00      	nop
 80168c4:	08016809 	.word	0x08016809
 80168c8:	2000c83c 	.word	0x2000c83c

080168cc <_fwalk_sglue>:
 80168cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168d0:	4607      	mov	r7, r0
 80168d2:	4688      	mov	r8, r1
 80168d4:	4614      	mov	r4, r2
 80168d6:	2600      	movs	r6, #0
 80168d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80168dc:	f1b9 0901 	subs.w	r9, r9, #1
 80168e0:	d505      	bpl.n	80168ee <_fwalk_sglue+0x22>
 80168e2:	6824      	ldr	r4, [r4, #0]
 80168e4:	2c00      	cmp	r4, #0
 80168e6:	d1f7      	bne.n	80168d8 <_fwalk_sglue+0xc>
 80168e8:	4630      	mov	r0, r6
 80168ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168ee:	89ab      	ldrh	r3, [r5, #12]
 80168f0:	2b01      	cmp	r3, #1
 80168f2:	d907      	bls.n	8016904 <_fwalk_sglue+0x38>
 80168f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80168f8:	3301      	adds	r3, #1
 80168fa:	d003      	beq.n	8016904 <_fwalk_sglue+0x38>
 80168fc:	4629      	mov	r1, r5
 80168fe:	4638      	mov	r0, r7
 8016900:	47c0      	blx	r8
 8016902:	4306      	orrs	r6, r0
 8016904:	3568      	adds	r5, #104	@ 0x68
 8016906:	e7e9      	b.n	80168dc <_fwalk_sglue+0x10>

08016908 <__sread>:
 8016908:	b510      	push	{r4, lr}
 801690a:	460c      	mov	r4, r1
 801690c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016910:	f000 f8ce 	bl	8016ab0 <_read_r>
 8016914:	2800      	cmp	r0, #0
 8016916:	bfab      	itete	ge
 8016918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801691a:	89a3      	ldrhlt	r3, [r4, #12]
 801691c:	181b      	addge	r3, r3, r0
 801691e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016922:	bfac      	ite	ge
 8016924:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016926:	81a3      	strhlt	r3, [r4, #12]
 8016928:	bd10      	pop	{r4, pc}

0801692a <__swrite>:
 801692a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801692e:	461f      	mov	r7, r3
 8016930:	898b      	ldrh	r3, [r1, #12]
 8016932:	05db      	lsls	r3, r3, #23
 8016934:	4605      	mov	r5, r0
 8016936:	460c      	mov	r4, r1
 8016938:	4616      	mov	r6, r2
 801693a:	d505      	bpl.n	8016948 <__swrite+0x1e>
 801693c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016940:	2302      	movs	r3, #2
 8016942:	2200      	movs	r2, #0
 8016944:	f000 f8a2 	bl	8016a8c <_lseek_r>
 8016948:	89a3      	ldrh	r3, [r4, #12]
 801694a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801694e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016952:	81a3      	strh	r3, [r4, #12]
 8016954:	4632      	mov	r2, r6
 8016956:	463b      	mov	r3, r7
 8016958:	4628      	mov	r0, r5
 801695a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801695e:	f000 b8b9 	b.w	8016ad4 <_write_r>

08016962 <__sseek>:
 8016962:	b510      	push	{r4, lr}
 8016964:	460c      	mov	r4, r1
 8016966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801696a:	f000 f88f 	bl	8016a8c <_lseek_r>
 801696e:	1c43      	adds	r3, r0, #1
 8016970:	89a3      	ldrh	r3, [r4, #12]
 8016972:	bf15      	itete	ne
 8016974:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801697a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801697e:	81a3      	strheq	r3, [r4, #12]
 8016980:	bf18      	it	ne
 8016982:	81a3      	strhne	r3, [r4, #12]
 8016984:	bd10      	pop	{r4, pc}

08016986 <__sclose>:
 8016986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801698a:	f000 b819 	b.w	80169c0 <_close_r>

0801698e <memcmp>:
 801698e:	b510      	push	{r4, lr}
 8016990:	3901      	subs	r1, #1
 8016992:	4402      	add	r2, r0
 8016994:	4290      	cmp	r0, r2
 8016996:	d101      	bne.n	801699c <memcmp+0xe>
 8016998:	2000      	movs	r0, #0
 801699a:	e005      	b.n	80169a8 <memcmp+0x1a>
 801699c:	7803      	ldrb	r3, [r0, #0]
 801699e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80169a2:	42a3      	cmp	r3, r4
 80169a4:	d001      	beq.n	80169aa <memcmp+0x1c>
 80169a6:	1b18      	subs	r0, r3, r4
 80169a8:	bd10      	pop	{r4, pc}
 80169aa:	3001      	adds	r0, #1
 80169ac:	e7f2      	b.n	8016994 <memcmp+0x6>

080169ae <memset>:
 80169ae:	4402      	add	r2, r0
 80169b0:	4603      	mov	r3, r0
 80169b2:	4293      	cmp	r3, r2
 80169b4:	d100      	bne.n	80169b8 <memset+0xa>
 80169b6:	4770      	bx	lr
 80169b8:	f803 1b01 	strb.w	r1, [r3], #1
 80169bc:	e7f9      	b.n	80169b2 <memset+0x4>
	...

080169c0 <_close_r>:
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4d06      	ldr	r5, [pc, #24]	@ (80169dc <_close_r+0x1c>)
 80169c4:	2300      	movs	r3, #0
 80169c6:	4604      	mov	r4, r0
 80169c8:	4608      	mov	r0, r1
 80169ca:	602b      	str	r3, [r5, #0]
 80169cc:	f7ea fd9c 	bl	8001508 <_close>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_close_r+0x1a>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_close_r+0x1a>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	2000c840 	.word	0x2000c840

080169e0 <_reclaim_reent>:
 80169e0:	4b29      	ldr	r3, [pc, #164]	@ (8016a88 <_reclaim_reent+0xa8>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	4283      	cmp	r3, r0
 80169e6:	b570      	push	{r4, r5, r6, lr}
 80169e8:	4604      	mov	r4, r0
 80169ea:	d04b      	beq.n	8016a84 <_reclaim_reent+0xa4>
 80169ec:	69c3      	ldr	r3, [r0, #28]
 80169ee:	b1ab      	cbz	r3, 8016a1c <_reclaim_reent+0x3c>
 80169f0:	68db      	ldr	r3, [r3, #12]
 80169f2:	b16b      	cbz	r3, 8016a10 <_reclaim_reent+0x30>
 80169f4:	2500      	movs	r5, #0
 80169f6:	69e3      	ldr	r3, [r4, #28]
 80169f8:	68db      	ldr	r3, [r3, #12]
 80169fa:	5959      	ldr	r1, [r3, r5]
 80169fc:	2900      	cmp	r1, #0
 80169fe:	d13b      	bne.n	8016a78 <_reclaim_reent+0x98>
 8016a00:	3504      	adds	r5, #4
 8016a02:	2d80      	cmp	r5, #128	@ 0x80
 8016a04:	d1f7      	bne.n	80169f6 <_reclaim_reent+0x16>
 8016a06:	69e3      	ldr	r3, [r4, #28]
 8016a08:	4620      	mov	r0, r4
 8016a0a:	68d9      	ldr	r1, [r3, #12]
 8016a0c:	f000 f8c8 	bl	8016ba0 <_free_r>
 8016a10:	69e3      	ldr	r3, [r4, #28]
 8016a12:	6819      	ldr	r1, [r3, #0]
 8016a14:	b111      	cbz	r1, 8016a1c <_reclaim_reent+0x3c>
 8016a16:	4620      	mov	r0, r4
 8016a18:	f000 f8c2 	bl	8016ba0 <_free_r>
 8016a1c:	6961      	ldr	r1, [r4, #20]
 8016a1e:	b111      	cbz	r1, 8016a26 <_reclaim_reent+0x46>
 8016a20:	4620      	mov	r0, r4
 8016a22:	f000 f8bd 	bl	8016ba0 <_free_r>
 8016a26:	69e1      	ldr	r1, [r4, #28]
 8016a28:	b111      	cbz	r1, 8016a30 <_reclaim_reent+0x50>
 8016a2a:	4620      	mov	r0, r4
 8016a2c:	f000 f8b8 	bl	8016ba0 <_free_r>
 8016a30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016a32:	b111      	cbz	r1, 8016a3a <_reclaim_reent+0x5a>
 8016a34:	4620      	mov	r0, r4
 8016a36:	f000 f8b3 	bl	8016ba0 <_free_r>
 8016a3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a3c:	b111      	cbz	r1, 8016a44 <_reclaim_reent+0x64>
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f000 f8ae 	bl	8016ba0 <_free_r>
 8016a44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016a46:	b111      	cbz	r1, 8016a4e <_reclaim_reent+0x6e>
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f000 f8a9 	bl	8016ba0 <_free_r>
 8016a4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016a50:	b111      	cbz	r1, 8016a58 <_reclaim_reent+0x78>
 8016a52:	4620      	mov	r0, r4
 8016a54:	f000 f8a4 	bl	8016ba0 <_free_r>
 8016a58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016a5a:	b111      	cbz	r1, 8016a62 <_reclaim_reent+0x82>
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	f000 f89f 	bl	8016ba0 <_free_r>
 8016a62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016a64:	b111      	cbz	r1, 8016a6c <_reclaim_reent+0x8c>
 8016a66:	4620      	mov	r0, r4
 8016a68:	f000 f89a 	bl	8016ba0 <_free_r>
 8016a6c:	6a23      	ldr	r3, [r4, #32]
 8016a6e:	b14b      	cbz	r3, 8016a84 <_reclaim_reent+0xa4>
 8016a70:	4620      	mov	r0, r4
 8016a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a76:	4718      	bx	r3
 8016a78:	680e      	ldr	r6, [r1, #0]
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	f000 f890 	bl	8016ba0 <_free_r>
 8016a80:	4631      	mov	r1, r6
 8016a82:	e7bb      	b.n	80169fc <_reclaim_reent+0x1c>
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	bf00      	nop
 8016a88:	2000003c 	.word	0x2000003c

08016a8c <_lseek_r>:
 8016a8c:	b538      	push	{r3, r4, r5, lr}
 8016a8e:	4d07      	ldr	r5, [pc, #28]	@ (8016aac <_lseek_r+0x20>)
 8016a90:	4604      	mov	r4, r0
 8016a92:	4608      	mov	r0, r1
 8016a94:	4611      	mov	r1, r2
 8016a96:	2200      	movs	r2, #0
 8016a98:	602a      	str	r2, [r5, #0]
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	f7ea fd5b 	bl	8001556 <_lseek>
 8016aa0:	1c43      	adds	r3, r0, #1
 8016aa2:	d102      	bne.n	8016aaa <_lseek_r+0x1e>
 8016aa4:	682b      	ldr	r3, [r5, #0]
 8016aa6:	b103      	cbz	r3, 8016aaa <_lseek_r+0x1e>
 8016aa8:	6023      	str	r3, [r4, #0]
 8016aaa:	bd38      	pop	{r3, r4, r5, pc}
 8016aac:	2000c840 	.word	0x2000c840

08016ab0 <_read_r>:
 8016ab0:	b538      	push	{r3, r4, r5, lr}
 8016ab2:	4d07      	ldr	r5, [pc, #28]	@ (8016ad0 <_read_r+0x20>)
 8016ab4:	4604      	mov	r4, r0
 8016ab6:	4608      	mov	r0, r1
 8016ab8:	4611      	mov	r1, r2
 8016aba:	2200      	movs	r2, #0
 8016abc:	602a      	str	r2, [r5, #0]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	f7ea fce9 	bl	8001496 <_read>
 8016ac4:	1c43      	adds	r3, r0, #1
 8016ac6:	d102      	bne.n	8016ace <_read_r+0x1e>
 8016ac8:	682b      	ldr	r3, [r5, #0]
 8016aca:	b103      	cbz	r3, 8016ace <_read_r+0x1e>
 8016acc:	6023      	str	r3, [r4, #0]
 8016ace:	bd38      	pop	{r3, r4, r5, pc}
 8016ad0:	2000c840 	.word	0x2000c840

08016ad4 <_write_r>:
 8016ad4:	b538      	push	{r3, r4, r5, lr}
 8016ad6:	4d07      	ldr	r5, [pc, #28]	@ (8016af4 <_write_r+0x20>)
 8016ad8:	4604      	mov	r4, r0
 8016ada:	4608      	mov	r0, r1
 8016adc:	4611      	mov	r1, r2
 8016ade:	2200      	movs	r2, #0
 8016ae0:	602a      	str	r2, [r5, #0]
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	f7ea fcf4 	bl	80014d0 <_write>
 8016ae8:	1c43      	adds	r3, r0, #1
 8016aea:	d102      	bne.n	8016af2 <_write_r+0x1e>
 8016aec:	682b      	ldr	r3, [r5, #0]
 8016aee:	b103      	cbz	r3, 8016af2 <_write_r+0x1e>
 8016af0:	6023      	str	r3, [r4, #0]
 8016af2:	bd38      	pop	{r3, r4, r5, pc}
 8016af4:	2000c840 	.word	0x2000c840

08016af8 <__libc_init_array>:
 8016af8:	b570      	push	{r4, r5, r6, lr}
 8016afa:	4d0d      	ldr	r5, [pc, #52]	@ (8016b30 <__libc_init_array+0x38>)
 8016afc:	4c0d      	ldr	r4, [pc, #52]	@ (8016b34 <__libc_init_array+0x3c>)
 8016afe:	1b64      	subs	r4, r4, r5
 8016b00:	10a4      	asrs	r4, r4, #2
 8016b02:	2600      	movs	r6, #0
 8016b04:	42a6      	cmp	r6, r4
 8016b06:	d109      	bne.n	8016b1c <__libc_init_array+0x24>
 8016b08:	4d0b      	ldr	r5, [pc, #44]	@ (8016b38 <__libc_init_array+0x40>)
 8016b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8016b3c <__libc_init_array+0x44>)
 8016b0c:	f000 fe48 	bl	80177a0 <_init>
 8016b10:	1b64      	subs	r4, r4, r5
 8016b12:	10a4      	asrs	r4, r4, #2
 8016b14:	2600      	movs	r6, #0
 8016b16:	42a6      	cmp	r6, r4
 8016b18:	d105      	bne.n	8016b26 <__libc_init_array+0x2e>
 8016b1a:	bd70      	pop	{r4, r5, r6, pc}
 8016b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b20:	4798      	blx	r3
 8016b22:	3601      	adds	r6, #1
 8016b24:	e7ee      	b.n	8016b04 <__libc_init_array+0xc>
 8016b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b2a:	4798      	blx	r3
 8016b2c:	3601      	adds	r6, #1
 8016b2e:	e7f2      	b.n	8016b16 <__libc_init_array+0x1e>
 8016b30:	0801af98 	.word	0x0801af98
 8016b34:	0801af98 	.word	0x0801af98
 8016b38:	0801af98 	.word	0x0801af98
 8016b3c:	0801af9c 	.word	0x0801af9c

08016b40 <__retarget_lock_init_recursive>:
 8016b40:	4770      	bx	lr

08016b42 <__retarget_lock_acquire_recursive>:
 8016b42:	4770      	bx	lr

08016b44 <__retarget_lock_release_recursive>:
 8016b44:	4770      	bx	lr

08016b46 <memcpy>:
 8016b46:	440a      	add	r2, r1
 8016b48:	4291      	cmp	r1, r2
 8016b4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b4e:	d100      	bne.n	8016b52 <memcpy+0xc>
 8016b50:	4770      	bx	lr
 8016b52:	b510      	push	{r4, lr}
 8016b54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b5c:	4291      	cmp	r1, r2
 8016b5e:	d1f9      	bne.n	8016b54 <memcpy+0xe>
 8016b60:	bd10      	pop	{r4, pc}
	...

08016b64 <__assert_func>:
 8016b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016b66:	4614      	mov	r4, r2
 8016b68:	461a      	mov	r2, r3
 8016b6a:	4b09      	ldr	r3, [pc, #36]	@ (8016b90 <__assert_func+0x2c>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	4605      	mov	r5, r0
 8016b70:	68d8      	ldr	r0, [r3, #12]
 8016b72:	b954      	cbnz	r4, 8016b8a <__assert_func+0x26>
 8016b74:	4b07      	ldr	r3, [pc, #28]	@ (8016b94 <__assert_func+0x30>)
 8016b76:	461c      	mov	r4, r3
 8016b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016b7c:	9100      	str	r1, [sp, #0]
 8016b7e:	462b      	mov	r3, r5
 8016b80:	4905      	ldr	r1, [pc, #20]	@ (8016b98 <__assert_func+0x34>)
 8016b82:	f000 f9b9 	bl	8016ef8 <fiprintf>
 8016b86:	f000 f9d9 	bl	8016f3c <abort>
 8016b8a:	4b04      	ldr	r3, [pc, #16]	@ (8016b9c <__assert_func+0x38>)
 8016b8c:	e7f4      	b.n	8016b78 <__assert_func+0x14>
 8016b8e:	bf00      	nop
 8016b90:	2000003c 	.word	0x2000003c
 8016b94:	0801af5a 	.word	0x0801af5a
 8016b98:	0801af2c 	.word	0x0801af2c
 8016b9c:	0801af1f 	.word	0x0801af1f

08016ba0 <_free_r>:
 8016ba0:	b538      	push	{r3, r4, r5, lr}
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	2900      	cmp	r1, #0
 8016ba6:	d041      	beq.n	8016c2c <_free_r+0x8c>
 8016ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bac:	1f0c      	subs	r4, r1, #4
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	bfb8      	it	lt
 8016bb2:	18e4      	addlt	r4, r4, r3
 8016bb4:	f000 f8e8 	bl	8016d88 <__malloc_lock>
 8016bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8016c30 <_free_r+0x90>)
 8016bba:	6813      	ldr	r3, [r2, #0]
 8016bbc:	b933      	cbnz	r3, 8016bcc <_free_r+0x2c>
 8016bbe:	6063      	str	r3, [r4, #4]
 8016bc0:	6014      	str	r4, [r2, #0]
 8016bc2:	4628      	mov	r0, r5
 8016bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bc8:	f000 b8e4 	b.w	8016d94 <__malloc_unlock>
 8016bcc:	42a3      	cmp	r3, r4
 8016bce:	d908      	bls.n	8016be2 <_free_r+0x42>
 8016bd0:	6820      	ldr	r0, [r4, #0]
 8016bd2:	1821      	adds	r1, r4, r0
 8016bd4:	428b      	cmp	r3, r1
 8016bd6:	bf01      	itttt	eq
 8016bd8:	6819      	ldreq	r1, [r3, #0]
 8016bda:	685b      	ldreq	r3, [r3, #4]
 8016bdc:	1809      	addeq	r1, r1, r0
 8016bde:	6021      	streq	r1, [r4, #0]
 8016be0:	e7ed      	b.n	8016bbe <_free_r+0x1e>
 8016be2:	461a      	mov	r2, r3
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	b10b      	cbz	r3, 8016bec <_free_r+0x4c>
 8016be8:	42a3      	cmp	r3, r4
 8016bea:	d9fa      	bls.n	8016be2 <_free_r+0x42>
 8016bec:	6811      	ldr	r1, [r2, #0]
 8016bee:	1850      	adds	r0, r2, r1
 8016bf0:	42a0      	cmp	r0, r4
 8016bf2:	d10b      	bne.n	8016c0c <_free_r+0x6c>
 8016bf4:	6820      	ldr	r0, [r4, #0]
 8016bf6:	4401      	add	r1, r0
 8016bf8:	1850      	adds	r0, r2, r1
 8016bfa:	4283      	cmp	r3, r0
 8016bfc:	6011      	str	r1, [r2, #0]
 8016bfe:	d1e0      	bne.n	8016bc2 <_free_r+0x22>
 8016c00:	6818      	ldr	r0, [r3, #0]
 8016c02:	685b      	ldr	r3, [r3, #4]
 8016c04:	6053      	str	r3, [r2, #4]
 8016c06:	4408      	add	r0, r1
 8016c08:	6010      	str	r0, [r2, #0]
 8016c0a:	e7da      	b.n	8016bc2 <_free_r+0x22>
 8016c0c:	d902      	bls.n	8016c14 <_free_r+0x74>
 8016c0e:	230c      	movs	r3, #12
 8016c10:	602b      	str	r3, [r5, #0]
 8016c12:	e7d6      	b.n	8016bc2 <_free_r+0x22>
 8016c14:	6820      	ldr	r0, [r4, #0]
 8016c16:	1821      	adds	r1, r4, r0
 8016c18:	428b      	cmp	r3, r1
 8016c1a:	bf04      	itt	eq
 8016c1c:	6819      	ldreq	r1, [r3, #0]
 8016c1e:	685b      	ldreq	r3, [r3, #4]
 8016c20:	6063      	str	r3, [r4, #4]
 8016c22:	bf04      	itt	eq
 8016c24:	1809      	addeq	r1, r1, r0
 8016c26:	6021      	streq	r1, [r4, #0]
 8016c28:	6054      	str	r4, [r2, #4]
 8016c2a:	e7ca      	b.n	8016bc2 <_free_r+0x22>
 8016c2c:	bd38      	pop	{r3, r4, r5, pc}
 8016c2e:	bf00      	nop
 8016c30:	2000c84c 	.word	0x2000c84c

08016c34 <malloc>:
 8016c34:	4b02      	ldr	r3, [pc, #8]	@ (8016c40 <malloc+0xc>)
 8016c36:	4601      	mov	r1, r0
 8016c38:	6818      	ldr	r0, [r3, #0]
 8016c3a:	f000 b825 	b.w	8016c88 <_malloc_r>
 8016c3e:	bf00      	nop
 8016c40:	2000003c 	.word	0x2000003c

08016c44 <sbrk_aligned>:
 8016c44:	b570      	push	{r4, r5, r6, lr}
 8016c46:	4e0f      	ldr	r6, [pc, #60]	@ (8016c84 <sbrk_aligned+0x40>)
 8016c48:	460c      	mov	r4, r1
 8016c4a:	6831      	ldr	r1, [r6, #0]
 8016c4c:	4605      	mov	r5, r0
 8016c4e:	b911      	cbnz	r1, 8016c56 <sbrk_aligned+0x12>
 8016c50:	f000 f964 	bl	8016f1c <_sbrk_r>
 8016c54:	6030      	str	r0, [r6, #0]
 8016c56:	4621      	mov	r1, r4
 8016c58:	4628      	mov	r0, r5
 8016c5a:	f000 f95f 	bl	8016f1c <_sbrk_r>
 8016c5e:	1c43      	adds	r3, r0, #1
 8016c60:	d103      	bne.n	8016c6a <sbrk_aligned+0x26>
 8016c62:	f04f 34ff 	mov.w	r4, #4294967295
 8016c66:	4620      	mov	r0, r4
 8016c68:	bd70      	pop	{r4, r5, r6, pc}
 8016c6a:	1cc4      	adds	r4, r0, #3
 8016c6c:	f024 0403 	bic.w	r4, r4, #3
 8016c70:	42a0      	cmp	r0, r4
 8016c72:	d0f8      	beq.n	8016c66 <sbrk_aligned+0x22>
 8016c74:	1a21      	subs	r1, r4, r0
 8016c76:	4628      	mov	r0, r5
 8016c78:	f000 f950 	bl	8016f1c <_sbrk_r>
 8016c7c:	3001      	adds	r0, #1
 8016c7e:	d1f2      	bne.n	8016c66 <sbrk_aligned+0x22>
 8016c80:	e7ef      	b.n	8016c62 <sbrk_aligned+0x1e>
 8016c82:	bf00      	nop
 8016c84:	2000c848 	.word	0x2000c848

08016c88 <_malloc_r>:
 8016c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c8c:	1ccd      	adds	r5, r1, #3
 8016c8e:	f025 0503 	bic.w	r5, r5, #3
 8016c92:	3508      	adds	r5, #8
 8016c94:	2d0c      	cmp	r5, #12
 8016c96:	bf38      	it	cc
 8016c98:	250c      	movcc	r5, #12
 8016c9a:	2d00      	cmp	r5, #0
 8016c9c:	4606      	mov	r6, r0
 8016c9e:	db01      	blt.n	8016ca4 <_malloc_r+0x1c>
 8016ca0:	42a9      	cmp	r1, r5
 8016ca2:	d904      	bls.n	8016cae <_malloc_r+0x26>
 8016ca4:	230c      	movs	r3, #12
 8016ca6:	6033      	str	r3, [r6, #0]
 8016ca8:	2000      	movs	r0, #0
 8016caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016d84 <_malloc_r+0xfc>
 8016cb2:	f000 f869 	bl	8016d88 <__malloc_lock>
 8016cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8016cba:	461c      	mov	r4, r3
 8016cbc:	bb44      	cbnz	r4, 8016d10 <_malloc_r+0x88>
 8016cbe:	4629      	mov	r1, r5
 8016cc0:	4630      	mov	r0, r6
 8016cc2:	f7ff ffbf 	bl	8016c44 <sbrk_aligned>
 8016cc6:	1c43      	adds	r3, r0, #1
 8016cc8:	4604      	mov	r4, r0
 8016cca:	d158      	bne.n	8016d7e <_malloc_r+0xf6>
 8016ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8016cd0:	4627      	mov	r7, r4
 8016cd2:	2f00      	cmp	r7, #0
 8016cd4:	d143      	bne.n	8016d5e <_malloc_r+0xd6>
 8016cd6:	2c00      	cmp	r4, #0
 8016cd8:	d04b      	beq.n	8016d72 <_malloc_r+0xea>
 8016cda:	6823      	ldr	r3, [r4, #0]
 8016cdc:	4639      	mov	r1, r7
 8016cde:	4630      	mov	r0, r6
 8016ce0:	eb04 0903 	add.w	r9, r4, r3
 8016ce4:	f000 f91a 	bl	8016f1c <_sbrk_r>
 8016ce8:	4581      	cmp	r9, r0
 8016cea:	d142      	bne.n	8016d72 <_malloc_r+0xea>
 8016cec:	6821      	ldr	r1, [r4, #0]
 8016cee:	1a6d      	subs	r5, r5, r1
 8016cf0:	4629      	mov	r1, r5
 8016cf2:	4630      	mov	r0, r6
 8016cf4:	f7ff ffa6 	bl	8016c44 <sbrk_aligned>
 8016cf8:	3001      	adds	r0, #1
 8016cfa:	d03a      	beq.n	8016d72 <_malloc_r+0xea>
 8016cfc:	6823      	ldr	r3, [r4, #0]
 8016cfe:	442b      	add	r3, r5
 8016d00:	6023      	str	r3, [r4, #0]
 8016d02:	f8d8 3000 	ldr.w	r3, [r8]
 8016d06:	685a      	ldr	r2, [r3, #4]
 8016d08:	bb62      	cbnz	r2, 8016d64 <_malloc_r+0xdc>
 8016d0a:	f8c8 7000 	str.w	r7, [r8]
 8016d0e:	e00f      	b.n	8016d30 <_malloc_r+0xa8>
 8016d10:	6822      	ldr	r2, [r4, #0]
 8016d12:	1b52      	subs	r2, r2, r5
 8016d14:	d420      	bmi.n	8016d58 <_malloc_r+0xd0>
 8016d16:	2a0b      	cmp	r2, #11
 8016d18:	d917      	bls.n	8016d4a <_malloc_r+0xc2>
 8016d1a:	1961      	adds	r1, r4, r5
 8016d1c:	42a3      	cmp	r3, r4
 8016d1e:	6025      	str	r5, [r4, #0]
 8016d20:	bf18      	it	ne
 8016d22:	6059      	strne	r1, [r3, #4]
 8016d24:	6863      	ldr	r3, [r4, #4]
 8016d26:	bf08      	it	eq
 8016d28:	f8c8 1000 	streq.w	r1, [r8]
 8016d2c:	5162      	str	r2, [r4, r5]
 8016d2e:	604b      	str	r3, [r1, #4]
 8016d30:	4630      	mov	r0, r6
 8016d32:	f000 f82f 	bl	8016d94 <__malloc_unlock>
 8016d36:	f104 000b 	add.w	r0, r4, #11
 8016d3a:	1d23      	adds	r3, r4, #4
 8016d3c:	f020 0007 	bic.w	r0, r0, #7
 8016d40:	1ac2      	subs	r2, r0, r3
 8016d42:	bf1c      	itt	ne
 8016d44:	1a1b      	subne	r3, r3, r0
 8016d46:	50a3      	strne	r3, [r4, r2]
 8016d48:	e7af      	b.n	8016caa <_malloc_r+0x22>
 8016d4a:	6862      	ldr	r2, [r4, #4]
 8016d4c:	42a3      	cmp	r3, r4
 8016d4e:	bf0c      	ite	eq
 8016d50:	f8c8 2000 	streq.w	r2, [r8]
 8016d54:	605a      	strne	r2, [r3, #4]
 8016d56:	e7eb      	b.n	8016d30 <_malloc_r+0xa8>
 8016d58:	4623      	mov	r3, r4
 8016d5a:	6864      	ldr	r4, [r4, #4]
 8016d5c:	e7ae      	b.n	8016cbc <_malloc_r+0x34>
 8016d5e:	463c      	mov	r4, r7
 8016d60:	687f      	ldr	r7, [r7, #4]
 8016d62:	e7b6      	b.n	8016cd2 <_malloc_r+0x4a>
 8016d64:	461a      	mov	r2, r3
 8016d66:	685b      	ldr	r3, [r3, #4]
 8016d68:	42a3      	cmp	r3, r4
 8016d6a:	d1fb      	bne.n	8016d64 <_malloc_r+0xdc>
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	6053      	str	r3, [r2, #4]
 8016d70:	e7de      	b.n	8016d30 <_malloc_r+0xa8>
 8016d72:	230c      	movs	r3, #12
 8016d74:	6033      	str	r3, [r6, #0]
 8016d76:	4630      	mov	r0, r6
 8016d78:	f000 f80c 	bl	8016d94 <__malloc_unlock>
 8016d7c:	e794      	b.n	8016ca8 <_malloc_r+0x20>
 8016d7e:	6005      	str	r5, [r0, #0]
 8016d80:	e7d6      	b.n	8016d30 <_malloc_r+0xa8>
 8016d82:	bf00      	nop
 8016d84:	2000c84c 	.word	0x2000c84c

08016d88 <__malloc_lock>:
 8016d88:	4801      	ldr	r0, [pc, #4]	@ (8016d90 <__malloc_lock+0x8>)
 8016d8a:	f7ff beda 	b.w	8016b42 <__retarget_lock_acquire_recursive>
 8016d8e:	bf00      	nop
 8016d90:	2000c844 	.word	0x2000c844

08016d94 <__malloc_unlock>:
 8016d94:	4801      	ldr	r0, [pc, #4]	@ (8016d9c <__malloc_unlock+0x8>)
 8016d96:	f7ff bed5 	b.w	8016b44 <__retarget_lock_release_recursive>
 8016d9a:	bf00      	nop
 8016d9c:	2000c844 	.word	0x2000c844

08016da0 <__sflush_r>:
 8016da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016da8:	0716      	lsls	r6, r2, #28
 8016daa:	4605      	mov	r5, r0
 8016dac:	460c      	mov	r4, r1
 8016dae:	d454      	bmi.n	8016e5a <__sflush_r+0xba>
 8016db0:	684b      	ldr	r3, [r1, #4]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	dc02      	bgt.n	8016dbc <__sflush_r+0x1c>
 8016db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	dd48      	ble.n	8016e4e <__sflush_r+0xae>
 8016dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016dbe:	2e00      	cmp	r6, #0
 8016dc0:	d045      	beq.n	8016e4e <__sflush_r+0xae>
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016dc8:	682f      	ldr	r7, [r5, #0]
 8016dca:	6a21      	ldr	r1, [r4, #32]
 8016dcc:	602b      	str	r3, [r5, #0]
 8016dce:	d030      	beq.n	8016e32 <__sflush_r+0x92>
 8016dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016dd2:	89a3      	ldrh	r3, [r4, #12]
 8016dd4:	0759      	lsls	r1, r3, #29
 8016dd6:	d505      	bpl.n	8016de4 <__sflush_r+0x44>
 8016dd8:	6863      	ldr	r3, [r4, #4]
 8016dda:	1ad2      	subs	r2, r2, r3
 8016ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016dde:	b10b      	cbz	r3, 8016de4 <__sflush_r+0x44>
 8016de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016de2:	1ad2      	subs	r2, r2, r3
 8016de4:	2300      	movs	r3, #0
 8016de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016de8:	6a21      	ldr	r1, [r4, #32]
 8016dea:	4628      	mov	r0, r5
 8016dec:	47b0      	blx	r6
 8016dee:	1c43      	adds	r3, r0, #1
 8016df0:	89a3      	ldrh	r3, [r4, #12]
 8016df2:	d106      	bne.n	8016e02 <__sflush_r+0x62>
 8016df4:	6829      	ldr	r1, [r5, #0]
 8016df6:	291d      	cmp	r1, #29
 8016df8:	d82b      	bhi.n	8016e52 <__sflush_r+0xb2>
 8016dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8016ea4 <__sflush_r+0x104>)
 8016dfc:	410a      	asrs	r2, r1
 8016dfe:	07d6      	lsls	r6, r2, #31
 8016e00:	d427      	bmi.n	8016e52 <__sflush_r+0xb2>
 8016e02:	2200      	movs	r2, #0
 8016e04:	6062      	str	r2, [r4, #4]
 8016e06:	04d9      	lsls	r1, r3, #19
 8016e08:	6922      	ldr	r2, [r4, #16]
 8016e0a:	6022      	str	r2, [r4, #0]
 8016e0c:	d504      	bpl.n	8016e18 <__sflush_r+0x78>
 8016e0e:	1c42      	adds	r2, r0, #1
 8016e10:	d101      	bne.n	8016e16 <__sflush_r+0x76>
 8016e12:	682b      	ldr	r3, [r5, #0]
 8016e14:	b903      	cbnz	r3, 8016e18 <__sflush_r+0x78>
 8016e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8016e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e1a:	602f      	str	r7, [r5, #0]
 8016e1c:	b1b9      	cbz	r1, 8016e4e <__sflush_r+0xae>
 8016e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e22:	4299      	cmp	r1, r3
 8016e24:	d002      	beq.n	8016e2c <__sflush_r+0x8c>
 8016e26:	4628      	mov	r0, r5
 8016e28:	f7ff feba 	bl	8016ba0 <_free_r>
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e30:	e00d      	b.n	8016e4e <__sflush_r+0xae>
 8016e32:	2301      	movs	r3, #1
 8016e34:	4628      	mov	r0, r5
 8016e36:	47b0      	blx	r6
 8016e38:	4602      	mov	r2, r0
 8016e3a:	1c50      	adds	r0, r2, #1
 8016e3c:	d1c9      	bne.n	8016dd2 <__sflush_r+0x32>
 8016e3e:	682b      	ldr	r3, [r5, #0]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d0c6      	beq.n	8016dd2 <__sflush_r+0x32>
 8016e44:	2b1d      	cmp	r3, #29
 8016e46:	d001      	beq.n	8016e4c <__sflush_r+0xac>
 8016e48:	2b16      	cmp	r3, #22
 8016e4a:	d11e      	bne.n	8016e8a <__sflush_r+0xea>
 8016e4c:	602f      	str	r7, [r5, #0]
 8016e4e:	2000      	movs	r0, #0
 8016e50:	e022      	b.n	8016e98 <__sflush_r+0xf8>
 8016e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e56:	b21b      	sxth	r3, r3
 8016e58:	e01b      	b.n	8016e92 <__sflush_r+0xf2>
 8016e5a:	690f      	ldr	r7, [r1, #16]
 8016e5c:	2f00      	cmp	r7, #0
 8016e5e:	d0f6      	beq.n	8016e4e <__sflush_r+0xae>
 8016e60:	0793      	lsls	r3, r2, #30
 8016e62:	680e      	ldr	r6, [r1, #0]
 8016e64:	bf08      	it	eq
 8016e66:	694b      	ldreq	r3, [r1, #20]
 8016e68:	600f      	str	r7, [r1, #0]
 8016e6a:	bf18      	it	ne
 8016e6c:	2300      	movne	r3, #0
 8016e6e:	eba6 0807 	sub.w	r8, r6, r7
 8016e72:	608b      	str	r3, [r1, #8]
 8016e74:	f1b8 0f00 	cmp.w	r8, #0
 8016e78:	dde9      	ble.n	8016e4e <__sflush_r+0xae>
 8016e7a:	6a21      	ldr	r1, [r4, #32]
 8016e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016e7e:	4643      	mov	r3, r8
 8016e80:	463a      	mov	r2, r7
 8016e82:	4628      	mov	r0, r5
 8016e84:	47b0      	blx	r6
 8016e86:	2800      	cmp	r0, #0
 8016e88:	dc08      	bgt.n	8016e9c <__sflush_r+0xfc>
 8016e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e92:	81a3      	strh	r3, [r4, #12]
 8016e94:	f04f 30ff 	mov.w	r0, #4294967295
 8016e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e9c:	4407      	add	r7, r0
 8016e9e:	eba8 0800 	sub.w	r8, r8, r0
 8016ea2:	e7e7      	b.n	8016e74 <__sflush_r+0xd4>
 8016ea4:	dfbffffe 	.word	0xdfbffffe

08016ea8 <_fflush_r>:
 8016ea8:	b538      	push	{r3, r4, r5, lr}
 8016eaa:	690b      	ldr	r3, [r1, #16]
 8016eac:	4605      	mov	r5, r0
 8016eae:	460c      	mov	r4, r1
 8016eb0:	b913      	cbnz	r3, 8016eb8 <_fflush_r+0x10>
 8016eb2:	2500      	movs	r5, #0
 8016eb4:	4628      	mov	r0, r5
 8016eb6:	bd38      	pop	{r3, r4, r5, pc}
 8016eb8:	b118      	cbz	r0, 8016ec2 <_fflush_r+0x1a>
 8016eba:	6a03      	ldr	r3, [r0, #32]
 8016ebc:	b90b      	cbnz	r3, 8016ec2 <_fflush_r+0x1a>
 8016ebe:	f7ff fced 	bl	801689c <__sinit>
 8016ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d0f3      	beq.n	8016eb2 <_fflush_r+0xa>
 8016eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016ecc:	07d0      	lsls	r0, r2, #31
 8016ece:	d404      	bmi.n	8016eda <_fflush_r+0x32>
 8016ed0:	0599      	lsls	r1, r3, #22
 8016ed2:	d402      	bmi.n	8016eda <_fflush_r+0x32>
 8016ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ed6:	f7ff fe34 	bl	8016b42 <__retarget_lock_acquire_recursive>
 8016eda:	4628      	mov	r0, r5
 8016edc:	4621      	mov	r1, r4
 8016ede:	f7ff ff5f 	bl	8016da0 <__sflush_r>
 8016ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ee4:	07da      	lsls	r2, r3, #31
 8016ee6:	4605      	mov	r5, r0
 8016ee8:	d4e4      	bmi.n	8016eb4 <_fflush_r+0xc>
 8016eea:	89a3      	ldrh	r3, [r4, #12]
 8016eec:	059b      	lsls	r3, r3, #22
 8016eee:	d4e1      	bmi.n	8016eb4 <_fflush_r+0xc>
 8016ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ef2:	f7ff fe27 	bl	8016b44 <__retarget_lock_release_recursive>
 8016ef6:	e7dd      	b.n	8016eb4 <_fflush_r+0xc>

08016ef8 <fiprintf>:
 8016ef8:	b40e      	push	{r1, r2, r3}
 8016efa:	b503      	push	{r0, r1, lr}
 8016efc:	4601      	mov	r1, r0
 8016efe:	ab03      	add	r3, sp, #12
 8016f00:	4805      	ldr	r0, [pc, #20]	@ (8016f18 <fiprintf+0x20>)
 8016f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f06:	6800      	ldr	r0, [r0, #0]
 8016f08:	9301      	str	r3, [sp, #4]
 8016f0a:	f000 f847 	bl	8016f9c <_vfiprintf_r>
 8016f0e:	b002      	add	sp, #8
 8016f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f14:	b003      	add	sp, #12
 8016f16:	4770      	bx	lr
 8016f18:	2000003c 	.word	0x2000003c

08016f1c <_sbrk_r>:
 8016f1c:	b538      	push	{r3, r4, r5, lr}
 8016f1e:	4d06      	ldr	r5, [pc, #24]	@ (8016f38 <_sbrk_r+0x1c>)
 8016f20:	2300      	movs	r3, #0
 8016f22:	4604      	mov	r4, r0
 8016f24:	4608      	mov	r0, r1
 8016f26:	602b      	str	r3, [r5, #0]
 8016f28:	f7ea fb22 	bl	8001570 <_sbrk>
 8016f2c:	1c43      	adds	r3, r0, #1
 8016f2e:	d102      	bne.n	8016f36 <_sbrk_r+0x1a>
 8016f30:	682b      	ldr	r3, [r5, #0]
 8016f32:	b103      	cbz	r3, 8016f36 <_sbrk_r+0x1a>
 8016f34:	6023      	str	r3, [r4, #0]
 8016f36:	bd38      	pop	{r3, r4, r5, pc}
 8016f38:	2000c840 	.word	0x2000c840

08016f3c <abort>:
 8016f3c:	b508      	push	{r3, lr}
 8016f3e:	2006      	movs	r0, #6
 8016f40:	f000 fb8e 	bl	8017660 <raise>
 8016f44:	2001      	movs	r0, #1
 8016f46:	f7ea fa9b 	bl	8001480 <_exit>

08016f4a <__sfputc_r>:
 8016f4a:	6893      	ldr	r3, [r2, #8]
 8016f4c:	3b01      	subs	r3, #1
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	b410      	push	{r4}
 8016f52:	6093      	str	r3, [r2, #8]
 8016f54:	da08      	bge.n	8016f68 <__sfputc_r+0x1e>
 8016f56:	6994      	ldr	r4, [r2, #24]
 8016f58:	42a3      	cmp	r3, r4
 8016f5a:	db01      	blt.n	8016f60 <__sfputc_r+0x16>
 8016f5c:	290a      	cmp	r1, #10
 8016f5e:	d103      	bne.n	8016f68 <__sfputc_r+0x1e>
 8016f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f64:	f000 bac0 	b.w	80174e8 <__swbuf_r>
 8016f68:	6813      	ldr	r3, [r2, #0]
 8016f6a:	1c58      	adds	r0, r3, #1
 8016f6c:	6010      	str	r0, [r2, #0]
 8016f6e:	7019      	strb	r1, [r3, #0]
 8016f70:	4608      	mov	r0, r1
 8016f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <__sfputs_r>:
 8016f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7a:	4606      	mov	r6, r0
 8016f7c:	460f      	mov	r7, r1
 8016f7e:	4614      	mov	r4, r2
 8016f80:	18d5      	adds	r5, r2, r3
 8016f82:	42ac      	cmp	r4, r5
 8016f84:	d101      	bne.n	8016f8a <__sfputs_r+0x12>
 8016f86:	2000      	movs	r0, #0
 8016f88:	e007      	b.n	8016f9a <__sfputs_r+0x22>
 8016f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f8e:	463a      	mov	r2, r7
 8016f90:	4630      	mov	r0, r6
 8016f92:	f7ff ffda 	bl	8016f4a <__sfputc_r>
 8016f96:	1c43      	adds	r3, r0, #1
 8016f98:	d1f3      	bne.n	8016f82 <__sfputs_r+0xa>
 8016f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016f9c <_vfiprintf_r>:
 8016f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa0:	460d      	mov	r5, r1
 8016fa2:	b09d      	sub	sp, #116	@ 0x74
 8016fa4:	4614      	mov	r4, r2
 8016fa6:	4698      	mov	r8, r3
 8016fa8:	4606      	mov	r6, r0
 8016faa:	b118      	cbz	r0, 8016fb4 <_vfiprintf_r+0x18>
 8016fac:	6a03      	ldr	r3, [r0, #32]
 8016fae:	b90b      	cbnz	r3, 8016fb4 <_vfiprintf_r+0x18>
 8016fb0:	f7ff fc74 	bl	801689c <__sinit>
 8016fb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016fb6:	07d9      	lsls	r1, r3, #31
 8016fb8:	d405      	bmi.n	8016fc6 <_vfiprintf_r+0x2a>
 8016fba:	89ab      	ldrh	r3, [r5, #12]
 8016fbc:	059a      	lsls	r2, r3, #22
 8016fbe:	d402      	bmi.n	8016fc6 <_vfiprintf_r+0x2a>
 8016fc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016fc2:	f7ff fdbe 	bl	8016b42 <__retarget_lock_acquire_recursive>
 8016fc6:	89ab      	ldrh	r3, [r5, #12]
 8016fc8:	071b      	lsls	r3, r3, #28
 8016fca:	d501      	bpl.n	8016fd0 <_vfiprintf_r+0x34>
 8016fcc:	692b      	ldr	r3, [r5, #16]
 8016fce:	b99b      	cbnz	r3, 8016ff8 <_vfiprintf_r+0x5c>
 8016fd0:	4629      	mov	r1, r5
 8016fd2:	4630      	mov	r0, r6
 8016fd4:	f000 fac6 	bl	8017564 <__swsetup_r>
 8016fd8:	b170      	cbz	r0, 8016ff8 <_vfiprintf_r+0x5c>
 8016fda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016fdc:	07dc      	lsls	r4, r3, #31
 8016fde:	d504      	bpl.n	8016fea <_vfiprintf_r+0x4e>
 8016fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8016fe4:	b01d      	add	sp, #116	@ 0x74
 8016fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fea:	89ab      	ldrh	r3, [r5, #12]
 8016fec:	0598      	lsls	r0, r3, #22
 8016fee:	d4f7      	bmi.n	8016fe0 <_vfiprintf_r+0x44>
 8016ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016ff2:	f7ff fda7 	bl	8016b44 <__retarget_lock_release_recursive>
 8016ff6:	e7f3      	b.n	8016fe0 <_vfiprintf_r+0x44>
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ffc:	2320      	movs	r3, #32
 8016ffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017002:	f8cd 800c 	str.w	r8, [sp, #12]
 8017006:	2330      	movs	r3, #48	@ 0x30
 8017008:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80171b8 <_vfiprintf_r+0x21c>
 801700c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017010:	f04f 0901 	mov.w	r9, #1
 8017014:	4623      	mov	r3, r4
 8017016:	469a      	mov	sl, r3
 8017018:	f813 2b01 	ldrb.w	r2, [r3], #1
 801701c:	b10a      	cbz	r2, 8017022 <_vfiprintf_r+0x86>
 801701e:	2a25      	cmp	r2, #37	@ 0x25
 8017020:	d1f9      	bne.n	8017016 <_vfiprintf_r+0x7a>
 8017022:	ebba 0b04 	subs.w	fp, sl, r4
 8017026:	d00b      	beq.n	8017040 <_vfiprintf_r+0xa4>
 8017028:	465b      	mov	r3, fp
 801702a:	4622      	mov	r2, r4
 801702c:	4629      	mov	r1, r5
 801702e:	4630      	mov	r0, r6
 8017030:	f7ff ffa2 	bl	8016f78 <__sfputs_r>
 8017034:	3001      	adds	r0, #1
 8017036:	f000 80a7 	beq.w	8017188 <_vfiprintf_r+0x1ec>
 801703a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801703c:	445a      	add	r2, fp
 801703e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017040:	f89a 3000 	ldrb.w	r3, [sl]
 8017044:	2b00      	cmp	r3, #0
 8017046:	f000 809f 	beq.w	8017188 <_vfiprintf_r+0x1ec>
 801704a:	2300      	movs	r3, #0
 801704c:	f04f 32ff 	mov.w	r2, #4294967295
 8017050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017054:	f10a 0a01 	add.w	sl, sl, #1
 8017058:	9304      	str	r3, [sp, #16]
 801705a:	9307      	str	r3, [sp, #28]
 801705c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017060:	931a      	str	r3, [sp, #104]	@ 0x68
 8017062:	4654      	mov	r4, sl
 8017064:	2205      	movs	r2, #5
 8017066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801706a:	4853      	ldr	r0, [pc, #332]	@ (80171b8 <_vfiprintf_r+0x21c>)
 801706c:	f7e9 f8d8 	bl	8000220 <memchr>
 8017070:	9a04      	ldr	r2, [sp, #16]
 8017072:	b9d8      	cbnz	r0, 80170ac <_vfiprintf_r+0x110>
 8017074:	06d1      	lsls	r1, r2, #27
 8017076:	bf44      	itt	mi
 8017078:	2320      	movmi	r3, #32
 801707a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801707e:	0713      	lsls	r3, r2, #28
 8017080:	bf44      	itt	mi
 8017082:	232b      	movmi	r3, #43	@ 0x2b
 8017084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017088:	f89a 3000 	ldrb.w	r3, [sl]
 801708c:	2b2a      	cmp	r3, #42	@ 0x2a
 801708e:	d015      	beq.n	80170bc <_vfiprintf_r+0x120>
 8017090:	9a07      	ldr	r2, [sp, #28]
 8017092:	4654      	mov	r4, sl
 8017094:	2000      	movs	r0, #0
 8017096:	f04f 0c0a 	mov.w	ip, #10
 801709a:	4621      	mov	r1, r4
 801709c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170a0:	3b30      	subs	r3, #48	@ 0x30
 80170a2:	2b09      	cmp	r3, #9
 80170a4:	d94b      	bls.n	801713e <_vfiprintf_r+0x1a2>
 80170a6:	b1b0      	cbz	r0, 80170d6 <_vfiprintf_r+0x13a>
 80170a8:	9207      	str	r2, [sp, #28]
 80170aa:	e014      	b.n	80170d6 <_vfiprintf_r+0x13a>
 80170ac:	eba0 0308 	sub.w	r3, r0, r8
 80170b0:	fa09 f303 	lsl.w	r3, r9, r3
 80170b4:	4313      	orrs	r3, r2
 80170b6:	9304      	str	r3, [sp, #16]
 80170b8:	46a2      	mov	sl, r4
 80170ba:	e7d2      	b.n	8017062 <_vfiprintf_r+0xc6>
 80170bc:	9b03      	ldr	r3, [sp, #12]
 80170be:	1d19      	adds	r1, r3, #4
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	9103      	str	r1, [sp, #12]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	bfbb      	ittet	lt
 80170c8:	425b      	neglt	r3, r3
 80170ca:	f042 0202 	orrlt.w	r2, r2, #2
 80170ce:	9307      	strge	r3, [sp, #28]
 80170d0:	9307      	strlt	r3, [sp, #28]
 80170d2:	bfb8      	it	lt
 80170d4:	9204      	strlt	r2, [sp, #16]
 80170d6:	7823      	ldrb	r3, [r4, #0]
 80170d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80170da:	d10a      	bne.n	80170f2 <_vfiprintf_r+0x156>
 80170dc:	7863      	ldrb	r3, [r4, #1]
 80170de:	2b2a      	cmp	r3, #42	@ 0x2a
 80170e0:	d132      	bne.n	8017148 <_vfiprintf_r+0x1ac>
 80170e2:	9b03      	ldr	r3, [sp, #12]
 80170e4:	1d1a      	adds	r2, r3, #4
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	9203      	str	r2, [sp, #12]
 80170ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80170ee:	3402      	adds	r4, #2
 80170f0:	9305      	str	r3, [sp, #20]
 80170f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80171c8 <_vfiprintf_r+0x22c>
 80170f6:	7821      	ldrb	r1, [r4, #0]
 80170f8:	2203      	movs	r2, #3
 80170fa:	4650      	mov	r0, sl
 80170fc:	f7e9 f890 	bl	8000220 <memchr>
 8017100:	b138      	cbz	r0, 8017112 <_vfiprintf_r+0x176>
 8017102:	9b04      	ldr	r3, [sp, #16]
 8017104:	eba0 000a 	sub.w	r0, r0, sl
 8017108:	2240      	movs	r2, #64	@ 0x40
 801710a:	4082      	lsls	r2, r0
 801710c:	4313      	orrs	r3, r2
 801710e:	3401      	adds	r4, #1
 8017110:	9304      	str	r3, [sp, #16]
 8017112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017116:	4829      	ldr	r0, [pc, #164]	@ (80171bc <_vfiprintf_r+0x220>)
 8017118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801711c:	2206      	movs	r2, #6
 801711e:	f7e9 f87f 	bl	8000220 <memchr>
 8017122:	2800      	cmp	r0, #0
 8017124:	d03f      	beq.n	80171a6 <_vfiprintf_r+0x20a>
 8017126:	4b26      	ldr	r3, [pc, #152]	@ (80171c0 <_vfiprintf_r+0x224>)
 8017128:	bb1b      	cbnz	r3, 8017172 <_vfiprintf_r+0x1d6>
 801712a:	9b03      	ldr	r3, [sp, #12]
 801712c:	3307      	adds	r3, #7
 801712e:	f023 0307 	bic.w	r3, r3, #7
 8017132:	3308      	adds	r3, #8
 8017134:	9303      	str	r3, [sp, #12]
 8017136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017138:	443b      	add	r3, r7
 801713a:	9309      	str	r3, [sp, #36]	@ 0x24
 801713c:	e76a      	b.n	8017014 <_vfiprintf_r+0x78>
 801713e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017142:	460c      	mov	r4, r1
 8017144:	2001      	movs	r0, #1
 8017146:	e7a8      	b.n	801709a <_vfiprintf_r+0xfe>
 8017148:	2300      	movs	r3, #0
 801714a:	3401      	adds	r4, #1
 801714c:	9305      	str	r3, [sp, #20]
 801714e:	4619      	mov	r1, r3
 8017150:	f04f 0c0a 	mov.w	ip, #10
 8017154:	4620      	mov	r0, r4
 8017156:	f810 2b01 	ldrb.w	r2, [r0], #1
 801715a:	3a30      	subs	r2, #48	@ 0x30
 801715c:	2a09      	cmp	r2, #9
 801715e:	d903      	bls.n	8017168 <_vfiprintf_r+0x1cc>
 8017160:	2b00      	cmp	r3, #0
 8017162:	d0c6      	beq.n	80170f2 <_vfiprintf_r+0x156>
 8017164:	9105      	str	r1, [sp, #20]
 8017166:	e7c4      	b.n	80170f2 <_vfiprintf_r+0x156>
 8017168:	fb0c 2101 	mla	r1, ip, r1, r2
 801716c:	4604      	mov	r4, r0
 801716e:	2301      	movs	r3, #1
 8017170:	e7f0      	b.n	8017154 <_vfiprintf_r+0x1b8>
 8017172:	ab03      	add	r3, sp, #12
 8017174:	9300      	str	r3, [sp, #0]
 8017176:	462a      	mov	r2, r5
 8017178:	4b12      	ldr	r3, [pc, #72]	@ (80171c4 <_vfiprintf_r+0x228>)
 801717a:	a904      	add	r1, sp, #16
 801717c:	4630      	mov	r0, r6
 801717e:	f3af 8000 	nop.w
 8017182:	4607      	mov	r7, r0
 8017184:	1c78      	adds	r0, r7, #1
 8017186:	d1d6      	bne.n	8017136 <_vfiprintf_r+0x19a>
 8017188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801718a:	07d9      	lsls	r1, r3, #31
 801718c:	d405      	bmi.n	801719a <_vfiprintf_r+0x1fe>
 801718e:	89ab      	ldrh	r3, [r5, #12]
 8017190:	059a      	lsls	r2, r3, #22
 8017192:	d402      	bmi.n	801719a <_vfiprintf_r+0x1fe>
 8017194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017196:	f7ff fcd5 	bl	8016b44 <__retarget_lock_release_recursive>
 801719a:	89ab      	ldrh	r3, [r5, #12]
 801719c:	065b      	lsls	r3, r3, #25
 801719e:	f53f af1f 	bmi.w	8016fe0 <_vfiprintf_r+0x44>
 80171a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171a4:	e71e      	b.n	8016fe4 <_vfiprintf_r+0x48>
 80171a6:	ab03      	add	r3, sp, #12
 80171a8:	9300      	str	r3, [sp, #0]
 80171aa:	462a      	mov	r2, r5
 80171ac:	4b05      	ldr	r3, [pc, #20]	@ (80171c4 <_vfiprintf_r+0x228>)
 80171ae:	a904      	add	r1, sp, #16
 80171b0:	4630      	mov	r0, r6
 80171b2:	f000 f879 	bl	80172a8 <_printf_i>
 80171b6:	e7e4      	b.n	8017182 <_vfiprintf_r+0x1e6>
 80171b8:	0801af5b 	.word	0x0801af5b
 80171bc:	0801af65 	.word	0x0801af65
 80171c0:	00000000 	.word	0x00000000
 80171c4:	08016f79 	.word	0x08016f79
 80171c8:	0801af61 	.word	0x0801af61

080171cc <_printf_common>:
 80171cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171d0:	4616      	mov	r6, r2
 80171d2:	4698      	mov	r8, r3
 80171d4:	688a      	ldr	r2, [r1, #8]
 80171d6:	690b      	ldr	r3, [r1, #16]
 80171d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80171dc:	4293      	cmp	r3, r2
 80171de:	bfb8      	it	lt
 80171e0:	4613      	movlt	r3, r2
 80171e2:	6033      	str	r3, [r6, #0]
 80171e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80171e8:	4607      	mov	r7, r0
 80171ea:	460c      	mov	r4, r1
 80171ec:	b10a      	cbz	r2, 80171f2 <_printf_common+0x26>
 80171ee:	3301      	adds	r3, #1
 80171f0:	6033      	str	r3, [r6, #0]
 80171f2:	6823      	ldr	r3, [r4, #0]
 80171f4:	0699      	lsls	r1, r3, #26
 80171f6:	bf42      	ittt	mi
 80171f8:	6833      	ldrmi	r3, [r6, #0]
 80171fa:	3302      	addmi	r3, #2
 80171fc:	6033      	strmi	r3, [r6, #0]
 80171fe:	6825      	ldr	r5, [r4, #0]
 8017200:	f015 0506 	ands.w	r5, r5, #6
 8017204:	d106      	bne.n	8017214 <_printf_common+0x48>
 8017206:	f104 0a19 	add.w	sl, r4, #25
 801720a:	68e3      	ldr	r3, [r4, #12]
 801720c:	6832      	ldr	r2, [r6, #0]
 801720e:	1a9b      	subs	r3, r3, r2
 8017210:	42ab      	cmp	r3, r5
 8017212:	dc26      	bgt.n	8017262 <_printf_common+0x96>
 8017214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017218:	6822      	ldr	r2, [r4, #0]
 801721a:	3b00      	subs	r3, #0
 801721c:	bf18      	it	ne
 801721e:	2301      	movne	r3, #1
 8017220:	0692      	lsls	r2, r2, #26
 8017222:	d42b      	bmi.n	801727c <_printf_common+0xb0>
 8017224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017228:	4641      	mov	r1, r8
 801722a:	4638      	mov	r0, r7
 801722c:	47c8      	blx	r9
 801722e:	3001      	adds	r0, #1
 8017230:	d01e      	beq.n	8017270 <_printf_common+0xa4>
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	6922      	ldr	r2, [r4, #16]
 8017236:	f003 0306 	and.w	r3, r3, #6
 801723a:	2b04      	cmp	r3, #4
 801723c:	bf02      	ittt	eq
 801723e:	68e5      	ldreq	r5, [r4, #12]
 8017240:	6833      	ldreq	r3, [r6, #0]
 8017242:	1aed      	subeq	r5, r5, r3
 8017244:	68a3      	ldr	r3, [r4, #8]
 8017246:	bf0c      	ite	eq
 8017248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801724c:	2500      	movne	r5, #0
 801724e:	4293      	cmp	r3, r2
 8017250:	bfc4      	itt	gt
 8017252:	1a9b      	subgt	r3, r3, r2
 8017254:	18ed      	addgt	r5, r5, r3
 8017256:	2600      	movs	r6, #0
 8017258:	341a      	adds	r4, #26
 801725a:	42b5      	cmp	r5, r6
 801725c:	d11a      	bne.n	8017294 <_printf_common+0xc8>
 801725e:	2000      	movs	r0, #0
 8017260:	e008      	b.n	8017274 <_printf_common+0xa8>
 8017262:	2301      	movs	r3, #1
 8017264:	4652      	mov	r2, sl
 8017266:	4641      	mov	r1, r8
 8017268:	4638      	mov	r0, r7
 801726a:	47c8      	blx	r9
 801726c:	3001      	adds	r0, #1
 801726e:	d103      	bne.n	8017278 <_printf_common+0xac>
 8017270:	f04f 30ff 	mov.w	r0, #4294967295
 8017274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017278:	3501      	adds	r5, #1
 801727a:	e7c6      	b.n	801720a <_printf_common+0x3e>
 801727c:	18e1      	adds	r1, r4, r3
 801727e:	1c5a      	adds	r2, r3, #1
 8017280:	2030      	movs	r0, #48	@ 0x30
 8017282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017286:	4422      	add	r2, r4
 8017288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801728c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017290:	3302      	adds	r3, #2
 8017292:	e7c7      	b.n	8017224 <_printf_common+0x58>
 8017294:	2301      	movs	r3, #1
 8017296:	4622      	mov	r2, r4
 8017298:	4641      	mov	r1, r8
 801729a:	4638      	mov	r0, r7
 801729c:	47c8      	blx	r9
 801729e:	3001      	adds	r0, #1
 80172a0:	d0e6      	beq.n	8017270 <_printf_common+0xa4>
 80172a2:	3601      	adds	r6, #1
 80172a4:	e7d9      	b.n	801725a <_printf_common+0x8e>
	...

080172a8 <_printf_i>:
 80172a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80172ac:	7e0f      	ldrb	r7, [r1, #24]
 80172ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80172b0:	2f78      	cmp	r7, #120	@ 0x78
 80172b2:	4691      	mov	r9, r2
 80172b4:	4680      	mov	r8, r0
 80172b6:	460c      	mov	r4, r1
 80172b8:	469a      	mov	sl, r3
 80172ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80172be:	d807      	bhi.n	80172d0 <_printf_i+0x28>
 80172c0:	2f62      	cmp	r7, #98	@ 0x62
 80172c2:	d80a      	bhi.n	80172da <_printf_i+0x32>
 80172c4:	2f00      	cmp	r7, #0
 80172c6:	f000 80d2 	beq.w	801746e <_printf_i+0x1c6>
 80172ca:	2f58      	cmp	r7, #88	@ 0x58
 80172cc:	f000 80b9 	beq.w	8017442 <_printf_i+0x19a>
 80172d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80172d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80172d8:	e03a      	b.n	8017350 <_printf_i+0xa8>
 80172da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80172de:	2b15      	cmp	r3, #21
 80172e0:	d8f6      	bhi.n	80172d0 <_printf_i+0x28>
 80172e2:	a101      	add	r1, pc, #4	@ (adr r1, 80172e8 <_printf_i+0x40>)
 80172e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80172e8:	08017341 	.word	0x08017341
 80172ec:	08017355 	.word	0x08017355
 80172f0:	080172d1 	.word	0x080172d1
 80172f4:	080172d1 	.word	0x080172d1
 80172f8:	080172d1 	.word	0x080172d1
 80172fc:	080172d1 	.word	0x080172d1
 8017300:	08017355 	.word	0x08017355
 8017304:	080172d1 	.word	0x080172d1
 8017308:	080172d1 	.word	0x080172d1
 801730c:	080172d1 	.word	0x080172d1
 8017310:	080172d1 	.word	0x080172d1
 8017314:	08017455 	.word	0x08017455
 8017318:	0801737f 	.word	0x0801737f
 801731c:	0801740f 	.word	0x0801740f
 8017320:	080172d1 	.word	0x080172d1
 8017324:	080172d1 	.word	0x080172d1
 8017328:	08017477 	.word	0x08017477
 801732c:	080172d1 	.word	0x080172d1
 8017330:	0801737f 	.word	0x0801737f
 8017334:	080172d1 	.word	0x080172d1
 8017338:	080172d1 	.word	0x080172d1
 801733c:	08017417 	.word	0x08017417
 8017340:	6833      	ldr	r3, [r6, #0]
 8017342:	1d1a      	adds	r2, r3, #4
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	6032      	str	r2, [r6, #0]
 8017348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801734c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017350:	2301      	movs	r3, #1
 8017352:	e09d      	b.n	8017490 <_printf_i+0x1e8>
 8017354:	6833      	ldr	r3, [r6, #0]
 8017356:	6820      	ldr	r0, [r4, #0]
 8017358:	1d19      	adds	r1, r3, #4
 801735a:	6031      	str	r1, [r6, #0]
 801735c:	0606      	lsls	r6, r0, #24
 801735e:	d501      	bpl.n	8017364 <_printf_i+0xbc>
 8017360:	681d      	ldr	r5, [r3, #0]
 8017362:	e003      	b.n	801736c <_printf_i+0xc4>
 8017364:	0645      	lsls	r5, r0, #25
 8017366:	d5fb      	bpl.n	8017360 <_printf_i+0xb8>
 8017368:	f9b3 5000 	ldrsh.w	r5, [r3]
 801736c:	2d00      	cmp	r5, #0
 801736e:	da03      	bge.n	8017378 <_printf_i+0xd0>
 8017370:	232d      	movs	r3, #45	@ 0x2d
 8017372:	426d      	negs	r5, r5
 8017374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017378:	4859      	ldr	r0, [pc, #356]	@ (80174e0 <_printf_i+0x238>)
 801737a:	230a      	movs	r3, #10
 801737c:	e011      	b.n	80173a2 <_printf_i+0xfa>
 801737e:	6821      	ldr	r1, [r4, #0]
 8017380:	6833      	ldr	r3, [r6, #0]
 8017382:	0608      	lsls	r0, r1, #24
 8017384:	f853 5b04 	ldr.w	r5, [r3], #4
 8017388:	d402      	bmi.n	8017390 <_printf_i+0xe8>
 801738a:	0649      	lsls	r1, r1, #25
 801738c:	bf48      	it	mi
 801738e:	b2ad      	uxthmi	r5, r5
 8017390:	2f6f      	cmp	r7, #111	@ 0x6f
 8017392:	4853      	ldr	r0, [pc, #332]	@ (80174e0 <_printf_i+0x238>)
 8017394:	6033      	str	r3, [r6, #0]
 8017396:	bf14      	ite	ne
 8017398:	230a      	movne	r3, #10
 801739a:	2308      	moveq	r3, #8
 801739c:	2100      	movs	r1, #0
 801739e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80173a2:	6866      	ldr	r6, [r4, #4]
 80173a4:	60a6      	str	r6, [r4, #8]
 80173a6:	2e00      	cmp	r6, #0
 80173a8:	bfa2      	ittt	ge
 80173aa:	6821      	ldrge	r1, [r4, #0]
 80173ac:	f021 0104 	bicge.w	r1, r1, #4
 80173b0:	6021      	strge	r1, [r4, #0]
 80173b2:	b90d      	cbnz	r5, 80173b8 <_printf_i+0x110>
 80173b4:	2e00      	cmp	r6, #0
 80173b6:	d04b      	beq.n	8017450 <_printf_i+0x1a8>
 80173b8:	4616      	mov	r6, r2
 80173ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80173be:	fb03 5711 	mls	r7, r3, r1, r5
 80173c2:	5dc7      	ldrb	r7, [r0, r7]
 80173c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80173c8:	462f      	mov	r7, r5
 80173ca:	42bb      	cmp	r3, r7
 80173cc:	460d      	mov	r5, r1
 80173ce:	d9f4      	bls.n	80173ba <_printf_i+0x112>
 80173d0:	2b08      	cmp	r3, #8
 80173d2:	d10b      	bne.n	80173ec <_printf_i+0x144>
 80173d4:	6823      	ldr	r3, [r4, #0]
 80173d6:	07df      	lsls	r7, r3, #31
 80173d8:	d508      	bpl.n	80173ec <_printf_i+0x144>
 80173da:	6923      	ldr	r3, [r4, #16]
 80173dc:	6861      	ldr	r1, [r4, #4]
 80173de:	4299      	cmp	r1, r3
 80173e0:	bfde      	ittt	le
 80173e2:	2330      	movle	r3, #48	@ 0x30
 80173e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80173e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80173ec:	1b92      	subs	r2, r2, r6
 80173ee:	6122      	str	r2, [r4, #16]
 80173f0:	f8cd a000 	str.w	sl, [sp]
 80173f4:	464b      	mov	r3, r9
 80173f6:	aa03      	add	r2, sp, #12
 80173f8:	4621      	mov	r1, r4
 80173fa:	4640      	mov	r0, r8
 80173fc:	f7ff fee6 	bl	80171cc <_printf_common>
 8017400:	3001      	adds	r0, #1
 8017402:	d14a      	bne.n	801749a <_printf_i+0x1f2>
 8017404:	f04f 30ff 	mov.w	r0, #4294967295
 8017408:	b004      	add	sp, #16
 801740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801740e:	6823      	ldr	r3, [r4, #0]
 8017410:	f043 0320 	orr.w	r3, r3, #32
 8017414:	6023      	str	r3, [r4, #0]
 8017416:	4833      	ldr	r0, [pc, #204]	@ (80174e4 <_printf_i+0x23c>)
 8017418:	2778      	movs	r7, #120	@ 0x78
 801741a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801741e:	6823      	ldr	r3, [r4, #0]
 8017420:	6831      	ldr	r1, [r6, #0]
 8017422:	061f      	lsls	r7, r3, #24
 8017424:	f851 5b04 	ldr.w	r5, [r1], #4
 8017428:	d402      	bmi.n	8017430 <_printf_i+0x188>
 801742a:	065f      	lsls	r7, r3, #25
 801742c:	bf48      	it	mi
 801742e:	b2ad      	uxthmi	r5, r5
 8017430:	6031      	str	r1, [r6, #0]
 8017432:	07d9      	lsls	r1, r3, #31
 8017434:	bf44      	itt	mi
 8017436:	f043 0320 	orrmi.w	r3, r3, #32
 801743a:	6023      	strmi	r3, [r4, #0]
 801743c:	b11d      	cbz	r5, 8017446 <_printf_i+0x19e>
 801743e:	2310      	movs	r3, #16
 8017440:	e7ac      	b.n	801739c <_printf_i+0xf4>
 8017442:	4827      	ldr	r0, [pc, #156]	@ (80174e0 <_printf_i+0x238>)
 8017444:	e7e9      	b.n	801741a <_printf_i+0x172>
 8017446:	6823      	ldr	r3, [r4, #0]
 8017448:	f023 0320 	bic.w	r3, r3, #32
 801744c:	6023      	str	r3, [r4, #0]
 801744e:	e7f6      	b.n	801743e <_printf_i+0x196>
 8017450:	4616      	mov	r6, r2
 8017452:	e7bd      	b.n	80173d0 <_printf_i+0x128>
 8017454:	6833      	ldr	r3, [r6, #0]
 8017456:	6825      	ldr	r5, [r4, #0]
 8017458:	6961      	ldr	r1, [r4, #20]
 801745a:	1d18      	adds	r0, r3, #4
 801745c:	6030      	str	r0, [r6, #0]
 801745e:	062e      	lsls	r6, r5, #24
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	d501      	bpl.n	8017468 <_printf_i+0x1c0>
 8017464:	6019      	str	r1, [r3, #0]
 8017466:	e002      	b.n	801746e <_printf_i+0x1c6>
 8017468:	0668      	lsls	r0, r5, #25
 801746a:	d5fb      	bpl.n	8017464 <_printf_i+0x1bc>
 801746c:	8019      	strh	r1, [r3, #0]
 801746e:	2300      	movs	r3, #0
 8017470:	6123      	str	r3, [r4, #16]
 8017472:	4616      	mov	r6, r2
 8017474:	e7bc      	b.n	80173f0 <_printf_i+0x148>
 8017476:	6833      	ldr	r3, [r6, #0]
 8017478:	1d1a      	adds	r2, r3, #4
 801747a:	6032      	str	r2, [r6, #0]
 801747c:	681e      	ldr	r6, [r3, #0]
 801747e:	6862      	ldr	r2, [r4, #4]
 8017480:	2100      	movs	r1, #0
 8017482:	4630      	mov	r0, r6
 8017484:	f7e8 fecc 	bl	8000220 <memchr>
 8017488:	b108      	cbz	r0, 801748e <_printf_i+0x1e6>
 801748a:	1b80      	subs	r0, r0, r6
 801748c:	6060      	str	r0, [r4, #4]
 801748e:	6863      	ldr	r3, [r4, #4]
 8017490:	6123      	str	r3, [r4, #16]
 8017492:	2300      	movs	r3, #0
 8017494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017498:	e7aa      	b.n	80173f0 <_printf_i+0x148>
 801749a:	6923      	ldr	r3, [r4, #16]
 801749c:	4632      	mov	r2, r6
 801749e:	4649      	mov	r1, r9
 80174a0:	4640      	mov	r0, r8
 80174a2:	47d0      	blx	sl
 80174a4:	3001      	adds	r0, #1
 80174a6:	d0ad      	beq.n	8017404 <_printf_i+0x15c>
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	079b      	lsls	r3, r3, #30
 80174ac:	d413      	bmi.n	80174d6 <_printf_i+0x22e>
 80174ae:	68e0      	ldr	r0, [r4, #12]
 80174b0:	9b03      	ldr	r3, [sp, #12]
 80174b2:	4298      	cmp	r0, r3
 80174b4:	bfb8      	it	lt
 80174b6:	4618      	movlt	r0, r3
 80174b8:	e7a6      	b.n	8017408 <_printf_i+0x160>
 80174ba:	2301      	movs	r3, #1
 80174bc:	4632      	mov	r2, r6
 80174be:	4649      	mov	r1, r9
 80174c0:	4640      	mov	r0, r8
 80174c2:	47d0      	blx	sl
 80174c4:	3001      	adds	r0, #1
 80174c6:	d09d      	beq.n	8017404 <_printf_i+0x15c>
 80174c8:	3501      	adds	r5, #1
 80174ca:	68e3      	ldr	r3, [r4, #12]
 80174cc:	9903      	ldr	r1, [sp, #12]
 80174ce:	1a5b      	subs	r3, r3, r1
 80174d0:	42ab      	cmp	r3, r5
 80174d2:	dcf2      	bgt.n	80174ba <_printf_i+0x212>
 80174d4:	e7eb      	b.n	80174ae <_printf_i+0x206>
 80174d6:	2500      	movs	r5, #0
 80174d8:	f104 0619 	add.w	r6, r4, #25
 80174dc:	e7f5      	b.n	80174ca <_printf_i+0x222>
 80174de:	bf00      	nop
 80174e0:	0801af6c 	.word	0x0801af6c
 80174e4:	0801af7d 	.word	0x0801af7d

080174e8 <__swbuf_r>:
 80174e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ea:	460e      	mov	r6, r1
 80174ec:	4614      	mov	r4, r2
 80174ee:	4605      	mov	r5, r0
 80174f0:	b118      	cbz	r0, 80174fa <__swbuf_r+0x12>
 80174f2:	6a03      	ldr	r3, [r0, #32]
 80174f4:	b90b      	cbnz	r3, 80174fa <__swbuf_r+0x12>
 80174f6:	f7ff f9d1 	bl	801689c <__sinit>
 80174fa:	69a3      	ldr	r3, [r4, #24]
 80174fc:	60a3      	str	r3, [r4, #8]
 80174fe:	89a3      	ldrh	r3, [r4, #12]
 8017500:	071a      	lsls	r2, r3, #28
 8017502:	d501      	bpl.n	8017508 <__swbuf_r+0x20>
 8017504:	6923      	ldr	r3, [r4, #16]
 8017506:	b943      	cbnz	r3, 801751a <__swbuf_r+0x32>
 8017508:	4621      	mov	r1, r4
 801750a:	4628      	mov	r0, r5
 801750c:	f000 f82a 	bl	8017564 <__swsetup_r>
 8017510:	b118      	cbz	r0, 801751a <__swbuf_r+0x32>
 8017512:	f04f 37ff 	mov.w	r7, #4294967295
 8017516:	4638      	mov	r0, r7
 8017518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801751a:	6823      	ldr	r3, [r4, #0]
 801751c:	6922      	ldr	r2, [r4, #16]
 801751e:	1a98      	subs	r0, r3, r2
 8017520:	6963      	ldr	r3, [r4, #20]
 8017522:	b2f6      	uxtb	r6, r6
 8017524:	4283      	cmp	r3, r0
 8017526:	4637      	mov	r7, r6
 8017528:	dc05      	bgt.n	8017536 <__swbuf_r+0x4e>
 801752a:	4621      	mov	r1, r4
 801752c:	4628      	mov	r0, r5
 801752e:	f7ff fcbb 	bl	8016ea8 <_fflush_r>
 8017532:	2800      	cmp	r0, #0
 8017534:	d1ed      	bne.n	8017512 <__swbuf_r+0x2a>
 8017536:	68a3      	ldr	r3, [r4, #8]
 8017538:	3b01      	subs	r3, #1
 801753a:	60a3      	str	r3, [r4, #8]
 801753c:	6823      	ldr	r3, [r4, #0]
 801753e:	1c5a      	adds	r2, r3, #1
 8017540:	6022      	str	r2, [r4, #0]
 8017542:	701e      	strb	r6, [r3, #0]
 8017544:	6962      	ldr	r2, [r4, #20]
 8017546:	1c43      	adds	r3, r0, #1
 8017548:	429a      	cmp	r2, r3
 801754a:	d004      	beq.n	8017556 <__swbuf_r+0x6e>
 801754c:	89a3      	ldrh	r3, [r4, #12]
 801754e:	07db      	lsls	r3, r3, #31
 8017550:	d5e1      	bpl.n	8017516 <__swbuf_r+0x2e>
 8017552:	2e0a      	cmp	r6, #10
 8017554:	d1df      	bne.n	8017516 <__swbuf_r+0x2e>
 8017556:	4621      	mov	r1, r4
 8017558:	4628      	mov	r0, r5
 801755a:	f7ff fca5 	bl	8016ea8 <_fflush_r>
 801755e:	2800      	cmp	r0, #0
 8017560:	d0d9      	beq.n	8017516 <__swbuf_r+0x2e>
 8017562:	e7d6      	b.n	8017512 <__swbuf_r+0x2a>

08017564 <__swsetup_r>:
 8017564:	b538      	push	{r3, r4, r5, lr}
 8017566:	4b29      	ldr	r3, [pc, #164]	@ (801760c <__swsetup_r+0xa8>)
 8017568:	4605      	mov	r5, r0
 801756a:	6818      	ldr	r0, [r3, #0]
 801756c:	460c      	mov	r4, r1
 801756e:	b118      	cbz	r0, 8017578 <__swsetup_r+0x14>
 8017570:	6a03      	ldr	r3, [r0, #32]
 8017572:	b90b      	cbnz	r3, 8017578 <__swsetup_r+0x14>
 8017574:	f7ff f992 	bl	801689c <__sinit>
 8017578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801757c:	0719      	lsls	r1, r3, #28
 801757e:	d422      	bmi.n	80175c6 <__swsetup_r+0x62>
 8017580:	06da      	lsls	r2, r3, #27
 8017582:	d407      	bmi.n	8017594 <__swsetup_r+0x30>
 8017584:	2209      	movs	r2, #9
 8017586:	602a      	str	r2, [r5, #0]
 8017588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801758c:	81a3      	strh	r3, [r4, #12]
 801758e:	f04f 30ff 	mov.w	r0, #4294967295
 8017592:	e033      	b.n	80175fc <__swsetup_r+0x98>
 8017594:	0758      	lsls	r0, r3, #29
 8017596:	d512      	bpl.n	80175be <__swsetup_r+0x5a>
 8017598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801759a:	b141      	cbz	r1, 80175ae <__swsetup_r+0x4a>
 801759c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80175a0:	4299      	cmp	r1, r3
 80175a2:	d002      	beq.n	80175aa <__swsetup_r+0x46>
 80175a4:	4628      	mov	r0, r5
 80175a6:	f7ff fafb 	bl	8016ba0 <_free_r>
 80175aa:	2300      	movs	r3, #0
 80175ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80175ae:	89a3      	ldrh	r3, [r4, #12]
 80175b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80175b4:	81a3      	strh	r3, [r4, #12]
 80175b6:	2300      	movs	r3, #0
 80175b8:	6063      	str	r3, [r4, #4]
 80175ba:	6923      	ldr	r3, [r4, #16]
 80175bc:	6023      	str	r3, [r4, #0]
 80175be:	89a3      	ldrh	r3, [r4, #12]
 80175c0:	f043 0308 	orr.w	r3, r3, #8
 80175c4:	81a3      	strh	r3, [r4, #12]
 80175c6:	6923      	ldr	r3, [r4, #16]
 80175c8:	b94b      	cbnz	r3, 80175de <__swsetup_r+0x7a>
 80175ca:	89a3      	ldrh	r3, [r4, #12]
 80175cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80175d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175d4:	d003      	beq.n	80175de <__swsetup_r+0x7a>
 80175d6:	4621      	mov	r1, r4
 80175d8:	4628      	mov	r0, r5
 80175da:	f000 f883 	bl	80176e4 <__smakebuf_r>
 80175de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175e2:	f013 0201 	ands.w	r2, r3, #1
 80175e6:	d00a      	beq.n	80175fe <__swsetup_r+0x9a>
 80175e8:	2200      	movs	r2, #0
 80175ea:	60a2      	str	r2, [r4, #8]
 80175ec:	6962      	ldr	r2, [r4, #20]
 80175ee:	4252      	negs	r2, r2
 80175f0:	61a2      	str	r2, [r4, #24]
 80175f2:	6922      	ldr	r2, [r4, #16]
 80175f4:	b942      	cbnz	r2, 8017608 <__swsetup_r+0xa4>
 80175f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80175fa:	d1c5      	bne.n	8017588 <__swsetup_r+0x24>
 80175fc:	bd38      	pop	{r3, r4, r5, pc}
 80175fe:	0799      	lsls	r1, r3, #30
 8017600:	bf58      	it	pl
 8017602:	6962      	ldrpl	r2, [r4, #20]
 8017604:	60a2      	str	r2, [r4, #8]
 8017606:	e7f4      	b.n	80175f2 <__swsetup_r+0x8e>
 8017608:	2000      	movs	r0, #0
 801760a:	e7f7      	b.n	80175fc <__swsetup_r+0x98>
 801760c:	2000003c 	.word	0x2000003c

08017610 <_raise_r>:
 8017610:	291f      	cmp	r1, #31
 8017612:	b538      	push	{r3, r4, r5, lr}
 8017614:	4605      	mov	r5, r0
 8017616:	460c      	mov	r4, r1
 8017618:	d904      	bls.n	8017624 <_raise_r+0x14>
 801761a:	2316      	movs	r3, #22
 801761c:	6003      	str	r3, [r0, #0]
 801761e:	f04f 30ff 	mov.w	r0, #4294967295
 8017622:	bd38      	pop	{r3, r4, r5, pc}
 8017624:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017626:	b112      	cbz	r2, 801762e <_raise_r+0x1e>
 8017628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801762c:	b94b      	cbnz	r3, 8017642 <_raise_r+0x32>
 801762e:	4628      	mov	r0, r5
 8017630:	f000 f830 	bl	8017694 <_getpid_r>
 8017634:	4622      	mov	r2, r4
 8017636:	4601      	mov	r1, r0
 8017638:	4628      	mov	r0, r5
 801763a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801763e:	f000 b817 	b.w	8017670 <_kill_r>
 8017642:	2b01      	cmp	r3, #1
 8017644:	d00a      	beq.n	801765c <_raise_r+0x4c>
 8017646:	1c59      	adds	r1, r3, #1
 8017648:	d103      	bne.n	8017652 <_raise_r+0x42>
 801764a:	2316      	movs	r3, #22
 801764c:	6003      	str	r3, [r0, #0]
 801764e:	2001      	movs	r0, #1
 8017650:	e7e7      	b.n	8017622 <_raise_r+0x12>
 8017652:	2100      	movs	r1, #0
 8017654:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017658:	4620      	mov	r0, r4
 801765a:	4798      	blx	r3
 801765c:	2000      	movs	r0, #0
 801765e:	e7e0      	b.n	8017622 <_raise_r+0x12>

08017660 <raise>:
 8017660:	4b02      	ldr	r3, [pc, #8]	@ (801766c <raise+0xc>)
 8017662:	4601      	mov	r1, r0
 8017664:	6818      	ldr	r0, [r3, #0]
 8017666:	f7ff bfd3 	b.w	8017610 <_raise_r>
 801766a:	bf00      	nop
 801766c:	2000003c 	.word	0x2000003c

08017670 <_kill_r>:
 8017670:	b538      	push	{r3, r4, r5, lr}
 8017672:	4d07      	ldr	r5, [pc, #28]	@ (8017690 <_kill_r+0x20>)
 8017674:	2300      	movs	r3, #0
 8017676:	4604      	mov	r4, r0
 8017678:	4608      	mov	r0, r1
 801767a:	4611      	mov	r1, r2
 801767c:	602b      	str	r3, [r5, #0]
 801767e:	f7e9 feed 	bl	800145c <_kill>
 8017682:	1c43      	adds	r3, r0, #1
 8017684:	d102      	bne.n	801768c <_kill_r+0x1c>
 8017686:	682b      	ldr	r3, [r5, #0]
 8017688:	b103      	cbz	r3, 801768c <_kill_r+0x1c>
 801768a:	6023      	str	r3, [r4, #0]
 801768c:	bd38      	pop	{r3, r4, r5, pc}
 801768e:	bf00      	nop
 8017690:	2000c840 	.word	0x2000c840

08017694 <_getpid_r>:
 8017694:	f7e9 beda 	b.w	800144c <_getpid>

08017698 <__swhatbuf_r>:
 8017698:	b570      	push	{r4, r5, r6, lr}
 801769a:	460c      	mov	r4, r1
 801769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176a0:	2900      	cmp	r1, #0
 80176a2:	b096      	sub	sp, #88	@ 0x58
 80176a4:	4615      	mov	r5, r2
 80176a6:	461e      	mov	r6, r3
 80176a8:	da0d      	bge.n	80176c6 <__swhatbuf_r+0x2e>
 80176aa:	89a3      	ldrh	r3, [r4, #12]
 80176ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176b0:	f04f 0100 	mov.w	r1, #0
 80176b4:	bf14      	ite	ne
 80176b6:	2340      	movne	r3, #64	@ 0x40
 80176b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80176bc:	2000      	movs	r0, #0
 80176be:	6031      	str	r1, [r6, #0]
 80176c0:	602b      	str	r3, [r5, #0]
 80176c2:	b016      	add	sp, #88	@ 0x58
 80176c4:	bd70      	pop	{r4, r5, r6, pc}
 80176c6:	466a      	mov	r2, sp
 80176c8:	f000 f848 	bl	801775c <_fstat_r>
 80176cc:	2800      	cmp	r0, #0
 80176ce:	dbec      	blt.n	80176aa <__swhatbuf_r+0x12>
 80176d0:	9901      	ldr	r1, [sp, #4]
 80176d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80176d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80176da:	4259      	negs	r1, r3
 80176dc:	4159      	adcs	r1, r3
 80176de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176e2:	e7eb      	b.n	80176bc <__swhatbuf_r+0x24>

080176e4 <__smakebuf_r>:
 80176e4:	898b      	ldrh	r3, [r1, #12]
 80176e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176e8:	079d      	lsls	r5, r3, #30
 80176ea:	4606      	mov	r6, r0
 80176ec:	460c      	mov	r4, r1
 80176ee:	d507      	bpl.n	8017700 <__smakebuf_r+0x1c>
 80176f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80176f4:	6023      	str	r3, [r4, #0]
 80176f6:	6123      	str	r3, [r4, #16]
 80176f8:	2301      	movs	r3, #1
 80176fa:	6163      	str	r3, [r4, #20]
 80176fc:	b003      	add	sp, #12
 80176fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017700:	ab01      	add	r3, sp, #4
 8017702:	466a      	mov	r2, sp
 8017704:	f7ff ffc8 	bl	8017698 <__swhatbuf_r>
 8017708:	9f00      	ldr	r7, [sp, #0]
 801770a:	4605      	mov	r5, r0
 801770c:	4639      	mov	r1, r7
 801770e:	4630      	mov	r0, r6
 8017710:	f7ff faba 	bl	8016c88 <_malloc_r>
 8017714:	b948      	cbnz	r0, 801772a <__smakebuf_r+0x46>
 8017716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801771a:	059a      	lsls	r2, r3, #22
 801771c:	d4ee      	bmi.n	80176fc <__smakebuf_r+0x18>
 801771e:	f023 0303 	bic.w	r3, r3, #3
 8017722:	f043 0302 	orr.w	r3, r3, #2
 8017726:	81a3      	strh	r3, [r4, #12]
 8017728:	e7e2      	b.n	80176f0 <__smakebuf_r+0xc>
 801772a:	89a3      	ldrh	r3, [r4, #12]
 801772c:	6020      	str	r0, [r4, #0]
 801772e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017732:	81a3      	strh	r3, [r4, #12]
 8017734:	9b01      	ldr	r3, [sp, #4]
 8017736:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801773a:	b15b      	cbz	r3, 8017754 <__smakebuf_r+0x70>
 801773c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017740:	4630      	mov	r0, r6
 8017742:	f000 f81d 	bl	8017780 <_isatty_r>
 8017746:	b128      	cbz	r0, 8017754 <__smakebuf_r+0x70>
 8017748:	89a3      	ldrh	r3, [r4, #12]
 801774a:	f023 0303 	bic.w	r3, r3, #3
 801774e:	f043 0301 	orr.w	r3, r3, #1
 8017752:	81a3      	strh	r3, [r4, #12]
 8017754:	89a3      	ldrh	r3, [r4, #12]
 8017756:	431d      	orrs	r5, r3
 8017758:	81a5      	strh	r5, [r4, #12]
 801775a:	e7cf      	b.n	80176fc <__smakebuf_r+0x18>

0801775c <_fstat_r>:
 801775c:	b538      	push	{r3, r4, r5, lr}
 801775e:	4d07      	ldr	r5, [pc, #28]	@ (801777c <_fstat_r+0x20>)
 8017760:	2300      	movs	r3, #0
 8017762:	4604      	mov	r4, r0
 8017764:	4608      	mov	r0, r1
 8017766:	4611      	mov	r1, r2
 8017768:	602b      	str	r3, [r5, #0]
 801776a:	f7e9 fed9 	bl	8001520 <_fstat>
 801776e:	1c43      	adds	r3, r0, #1
 8017770:	d102      	bne.n	8017778 <_fstat_r+0x1c>
 8017772:	682b      	ldr	r3, [r5, #0]
 8017774:	b103      	cbz	r3, 8017778 <_fstat_r+0x1c>
 8017776:	6023      	str	r3, [r4, #0]
 8017778:	bd38      	pop	{r3, r4, r5, pc}
 801777a:	bf00      	nop
 801777c:	2000c840 	.word	0x2000c840

08017780 <_isatty_r>:
 8017780:	b538      	push	{r3, r4, r5, lr}
 8017782:	4d06      	ldr	r5, [pc, #24]	@ (801779c <_isatty_r+0x1c>)
 8017784:	2300      	movs	r3, #0
 8017786:	4604      	mov	r4, r0
 8017788:	4608      	mov	r0, r1
 801778a:	602b      	str	r3, [r5, #0]
 801778c:	f7e9 fed8 	bl	8001540 <_isatty>
 8017790:	1c43      	adds	r3, r0, #1
 8017792:	d102      	bne.n	801779a <_isatty_r+0x1a>
 8017794:	682b      	ldr	r3, [r5, #0]
 8017796:	b103      	cbz	r3, 801779a <_isatty_r+0x1a>
 8017798:	6023      	str	r3, [r4, #0]
 801779a:	bd38      	pop	{r3, r4, r5, pc}
 801779c:	2000c840 	.word	0x2000c840

080177a0 <_init>:
 80177a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177a2:	bf00      	nop
 80177a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177a6:	bc08      	pop	{r3}
 80177a8:	469e      	mov	lr, r3
 80177aa:	4770      	bx	lr

080177ac <_fini>:
 80177ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ae:	bf00      	nop
 80177b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177b2:	bc08      	pop	{r3}
 80177b4:	469e      	mov	lr, r3
 80177b6:	4770      	bx	lr
